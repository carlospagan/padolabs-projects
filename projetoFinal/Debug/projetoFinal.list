
projetoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003104  08003104  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003104  08003104  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003104  08003104  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800310c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000001c  08003128  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003128  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef96  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a9  00000000  00000000  0002efda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00031188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00032010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b67c  00000000  00000000  00032d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4e6  00000000  00000000  0004e40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2d52  00000000  00000000  0005d8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00110644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033dc  00000000  00000000  00110698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080030ac 	.word	0x080030ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	080030ac 	.word	0x080030ac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fb34 	bl	800088c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f80b 	bl	800023e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f908 	bl	800043c <MX_GPIO_Init>
  MX_SPI1_Init();
 800022c:	f000 f866 	bl	80002fc <MX_SPI1_Init>
  MX_TIM2_Init();
 8000230:	f000 f8a2 	bl	8000378 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  app_init();
 8000234:	f002 fd00 	bl	8002c38 <app_init>
  app_run();
 8000238:	f002 fd14 	bl	8002c64 <app_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x20>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b590      	push	{r4, r7, lr}
 8000240:	b095      	sub	sp, #84	; 0x54
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	2414      	movs	r4, #20
 8000246:	193b      	adds	r3, r7, r4
 8000248:	0018      	movs	r0, r3
 800024a:	233c      	movs	r3, #60	; 0x3c
 800024c:	001a      	movs	r2, r3
 800024e:	2100      	movs	r1, #0
 8000250:	f002 ff24 	bl	800309c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	0018      	movs	r0, r3
 8000258:	2310      	movs	r3, #16
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f002 ff1d 	bl	800309c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000262:	2380      	movs	r3, #128	; 0x80
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fea0 	bl	8000fac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	193b      	adds	r3, r7, r4
 800026e:	2202      	movs	r2, #2
 8000270:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	193b      	adds	r3, r7, r4
 8000274:	2280      	movs	r2, #128	; 0x80
 8000276:	0052      	lsls	r2, r2, #1
 8000278:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800027a:	0021      	movs	r1, r4
 800027c:	187b      	adds	r3, r7, r1
 800027e:	2200      	movs	r2, #0
 8000280:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2240      	movs	r2, #64	; 0x40
 8000286:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2202      	movs	r2, #2
 800028c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2202      	movs	r2, #2
 8000292:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2200      	movs	r2, #0
 8000298:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2208      	movs	r2, #8
 800029e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	0292      	lsls	r2, r2, #10
 80002a6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	0492      	lsls	r2, r2, #18
 80002ae:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2280      	movs	r2, #128	; 0x80
 80002b4:	0592      	lsls	r2, r2, #22
 80002b6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 feb6 	bl	800102c <HAL_RCC_OscConfig>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002c4:	f000 f94e 	bl	8000564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2207      	movs	r2, #7
 80002cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2202      	movs	r2, #2
 80002d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2102      	movs	r1, #2
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 fa07 	bl	80016f8 <HAL_RCC_ClockConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002ee:	f000 f939 	bl	8000564 <Error_Handler>
  }
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b015      	add	sp, #84	; 0x54
 80002f8:	bd90      	pop	{r4, r7, pc}
	...

080002fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_SPI1_Init+0x74>)
 8000302:	4a1c      	ldr	r2, [pc, #112]	; (8000374 <MX_SPI1_Init+0x78>)
 8000304:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <MX_SPI1_Init+0x74>)
 8000308:	2282      	movs	r2, #130	; 0x82
 800030a:	0052      	lsls	r2, r2, #1
 800030c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_SPI1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <MX_SPI1_Init+0x74>)
 8000316:	22e0      	movs	r2, #224	; 0xe0
 8000318:	00d2      	lsls	r2, r2, #3
 800031a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_SPI1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000322:	4b13      	ldr	r3, [pc, #76]	; (8000370 <MX_SPI1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_SPI1_Init+0x74>)
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	0092      	lsls	r2, r2, #2
 800032e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_SPI1_Init+0x74>)
 8000332:	2218      	movs	r2, #24
 8000334:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_SPI1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_SPI1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <MX_SPI1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_SPI1_Init+0x74>)
 800034a:	2207      	movs	r2, #7
 800034c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <MX_SPI1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_SPI1_Init+0x74>)
 8000356:	2208      	movs	r2, #8
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <MX_SPI1_Init+0x74>)
 800035c:	0018      	movs	r0, r3
 800035e:	f001 fb55 	bl	8001a0c <HAL_SPI_Init>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000366:	f000 f8fd 	bl	8000564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	2000003c 	.word	0x2000003c
 8000374:	40013000 	.word	0x40013000

08000378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b08d      	sub	sp, #52	; 0x34
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800037e:	240c      	movs	r4, #12
 8000380:	193b      	adds	r3, r7, r4
 8000382:	0018      	movs	r0, r3
 8000384:	2324      	movs	r3, #36	; 0x24
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f002 fe87 	bl	800309c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038e:	003b      	movs	r3, r7
 8000390:	0018      	movs	r0, r3
 8000392:	230c      	movs	r3, #12
 8000394:	001a      	movs	r2, r3
 8000396:	2100      	movs	r1, #0
 8000398:	f002 fe80 	bl	800309c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800039c:	4b26      	ldr	r3, [pc, #152]	; (8000438 <MX_TIM2_Init+0xc0>)
 800039e:	2280      	movs	r2, #128	; 0x80
 80003a0:	05d2      	lsls	r2, r2, #23
 80003a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003a4:	4b24      	ldr	r3, [pc, #144]	; (8000438 <MX_TIM2_Init+0xc0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003aa:	4b23      	ldr	r3, [pc, #140]	; (8000438 <MX_TIM2_Init+0xc0>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <MX_TIM2_Init+0xc0>)
 80003b2:	2264      	movs	r2, #100	; 0x64
 80003b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b6:	4b20      	ldr	r3, [pc, #128]	; (8000438 <MX_TIM2_Init+0xc0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003bc:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <MX_TIM2_Init+0xc0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80003c2:	0021      	movs	r1, r4
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2203      	movs	r2, #3
 80003c8:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2202      	movs	r2, #2
 80003ce:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2201      	movs	r2, #1
 80003d4:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2202      	movs	r2, #2
 80003e6:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2201      	movs	r2, #1
 80003ec:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2200      	movs	r2, #0
 80003f2:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80003fa:	187a      	adds	r2, r7, r1
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_TIM2_Init+0xc0>)
 80003fe:	0011      	movs	r1, r2
 8000400:	0018      	movs	r0, r3
 8000402:	f002 f81f 	bl	8002444 <HAL_TIM_Encoder_Init>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800040a:	f000 f8ab 	bl	8000564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040e:	003b      	movs	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000414:	003b      	movs	r3, r7
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800041a:	003a      	movs	r2, r7
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_TIM2_Init+0xc0>)
 800041e:	0011      	movs	r1, r2
 8000420:	0018      	movs	r0, r3
 8000422:	f002 fb7b 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800042a:	f000 f89b 	bl	8000564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b00d      	add	sp, #52	; 0x34
 8000434:	bd90      	pop	{r4, r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	200000a0 	.word	0x200000a0

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b08b      	sub	sp, #44	; 0x2c
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	2414      	movs	r4, #20
 8000444:	193b      	adds	r3, r7, r4
 8000446:	0018      	movs	r0, r3
 8000448:	2314      	movs	r3, #20
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f002 fe25 	bl	800309c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b41      	ldr	r3, [pc, #260]	; (8000558 <MX_GPIO_Init+0x11c>)
 8000454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000456:	4b40      	ldr	r3, [pc, #256]	; (8000558 <MX_GPIO_Init+0x11c>)
 8000458:	2101      	movs	r1, #1
 800045a:	430a      	orrs	r2, r1
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
 800045e:	4b3e      	ldr	r3, [pc, #248]	; (8000558 <MX_GPIO_Init+0x11c>)
 8000460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000462:	2201      	movs	r2, #1
 8000464:	4013      	ands	r3, r2
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046a:	4b3b      	ldr	r3, [pc, #236]	; (8000558 <MX_GPIO_Init+0x11c>)
 800046c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800046e:	4b3a      	ldr	r3, [pc, #232]	; (8000558 <MX_GPIO_Init+0x11c>)
 8000470:	2104      	movs	r1, #4
 8000472:	430a      	orrs	r2, r1
 8000474:	635a      	str	r2, [r3, #52]	; 0x34
 8000476:	4b38      	ldr	r3, [pc, #224]	; (8000558 <MX_GPIO_Init+0x11c>)
 8000478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047a:	2204      	movs	r2, #4
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000482:	4b35      	ldr	r3, [pc, #212]	; (8000558 <MX_GPIO_Init+0x11c>)
 8000484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000486:	4b34      	ldr	r3, [pc, #208]	; (8000558 <MX_GPIO_Init+0x11c>)
 8000488:	2108      	movs	r1, #8
 800048a:	430a      	orrs	r2, r1
 800048c:	635a      	str	r2, [r3, #52]	; 0x34
 800048e:	4b32      	ldr	r3, [pc, #200]	; (8000558 <MX_GPIO_Init+0x11c>)
 8000490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000492:	2208      	movs	r2, #8
 8000494:	4013      	ands	r3, r2
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049a:	4b2f      	ldr	r3, [pc, #188]	; (8000558 <MX_GPIO_Init+0x11c>)
 800049c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800049e:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <MX_GPIO_Init+0x11c>)
 80004a0:	2102      	movs	r1, #2
 80004a2:	430a      	orrs	r2, r1
 80004a4:	635a      	str	r2, [r3, #52]	; 0x34
 80004a6:	4b2c      	ldr	r3, [pc, #176]	; (8000558 <MX_GPIO_Init+0x11c>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004aa:	2202      	movs	r2, #2
 80004ac:	4013      	ands	r3, r2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80004b2:	23a0      	movs	r3, #160	; 0xa0
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	2200      	movs	r2, #0
 80004b8:	2120      	movs	r1, #32
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fd58 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4825      	ldr	r0, [pc, #148]	; (800055c <MX_GPIO_Init+0x120>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	0019      	movs	r1, r3
 80004ca:	f000 fd51 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	4822      	ldr	r0, [pc, #136]	; (800055c <MX_GPIO_Init+0x120>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	0019      	movs	r1, r3
 80004d8:	f000 fd4a 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2220      	movs	r2, #32
 80004e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2201      	movs	r2, #1
 80004e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80004f4:	193a      	adds	r2, r7, r4
 80004f6:	23a0      	movs	r3, #160	; 0xa0
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fbcb 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000502:	0021      	movs	r1, r4
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2220      	movs	r2, #32
 8000508:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2288      	movs	r2, #136	; 0x88
 800050e:	0352      	lsls	r2, r2, #13
 8000510:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000518:	000c      	movs	r4, r1
 800051a:	187b      	adds	r3, r7, r1
 800051c:	4a10      	ldr	r2, [pc, #64]	; (8000560 <MX_GPIO_Init+0x124>)
 800051e:	0019      	movs	r1, r3
 8000520:	0010      	movs	r0, r2
 8000522:	f000 fbb9 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000526:	0021      	movs	r1, r4
 8000528:	187b      	adds	r3, r7, r1
 800052a:	22c0      	movs	r2, #192	; 0xc0
 800052c:	0092      	lsls	r2, r2, #2
 800052e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2201      	movs	r2, #1
 8000534:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2203      	movs	r2, #3
 8000540:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000542:	187b      	adds	r3, r7, r1
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <MX_GPIO_Init+0x120>)
 8000546:	0019      	movs	r1, r3
 8000548:	0010      	movs	r0, r2
 800054a:	f000 fba5 	bl	8000c98 <HAL_GPIO_Init>

}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b00b      	add	sp, #44	; 0x2c
 8000554:	bd90      	pop	{r4, r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000
 800055c:	50000c00 	.word	0x50000c00
 8000560:	50000800 	.word	0x50000800

08000564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000568:	b672      	cpsid	i
}
 800056a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800056c:	e7fe      	b.n	800056c <Error_Handler+0x8>

0800056e <nrf24_setupPins>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;

void nrf24_setupPins()
{
 800056e:	b580      	push	{r7, lr}
 8000570:	af00      	add	r7, sp, #0

}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	0002      	movs	r2, r0
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, state);
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	781a      	ldrb	r2, [r3, #0]
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <nrf24_ce_digitalWrite+0x24>)
 800058e:	0019      	movs	r1, r3
 8000590:	f000 fcee 	bl	8000f70 <HAL_GPIO_WritePin>
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b002      	add	sp, #8
 800059a:	bd80      	pop	{r7, pc}
 800059c:	50000c00 	.word	0x50000c00

080005a0 <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	0002      	movs	r2, r0
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, state);
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <nrf24_csn_digitalWrite+0x24>)
 80005b6:	0019      	movs	r1, r3
 80005b8:	f000 fcda 	bl	8000f70 <HAL_GPIO_WritePin>
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	50000c00 	.word	0x50000c00

080005c8 <nrf24_spi_transfer>:
{
	return 0;
}
/* ------------------------------------------------------------------------- */

uint8_t nrf24_spi_transfer(uint8_t *tx){
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]
	uint8_t rx;

	HAL_SPI_TransmitReceive(&hspi1, tx, &rx, 1, 100);
 80005d0:	240f      	movs	r4, #15
 80005d2:	193a      	adds	r2, r7, r4
 80005d4:	6879      	ldr	r1, [r7, #4]
 80005d6:	4806      	ldr	r0, [pc, #24]	; (80005f0 <nrf24_spi_transfer+0x28>)
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	f001 facd 	bl	8001b7c <HAL_SPI_TransmitReceive>

	return rx;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	781b      	ldrb	r3, [r3, #0]
}
 80005e6:	0018      	movs	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b005      	add	sp, #20
 80005ec:	bd90      	pop	{r4, r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	2000003c 	.word	0x2000003c

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <HAL_MspInit+0x4c>)
 80005fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <HAL_MspInit+0x4c>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	641a      	str	r2, [r3, #64]	; 0x40
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <HAL_MspInit+0x4c>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <HAL_MspInit+0x4c>)
 8000614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_MspInit+0x4c>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0549      	lsls	r1, r1, #21
 800061c:	430a      	orrs	r2, r1
 800061e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_MspInit+0x4c>)
 8000622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	055b      	lsls	r3, r3, #21
 8000628:	4013      	ands	r3, r2
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800062e:	23c0      	movs	r3, #192	; 0xc0
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	0018      	movs	r0, r3
 8000634:	f000 f9d4 	bl	80009e0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b08b      	sub	sp, #44	; 0x2c
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	2414      	movs	r4, #20
 800064e:	193b      	adds	r3, r7, r4
 8000650:	0018      	movs	r0, r3
 8000652:	2314      	movs	r3, #20
 8000654:	001a      	movs	r2, r3
 8000656:	2100      	movs	r1, #0
 8000658:	f002 fd20 	bl	800309c <memset>
  if(hspi->Instance==SPI1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a1f      	ldr	r2, [pc, #124]	; (80006e0 <HAL_SPI_MspInit+0x9c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d138      	bne.n	80006d8 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <HAL_SPI_MspInit+0xa0>)
 8000668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <HAL_SPI_MspInit+0xa0>)
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	0149      	lsls	r1, r1, #5
 8000670:	430a      	orrs	r2, r1
 8000672:	641a      	str	r2, [r3, #64]	; 0x40
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <HAL_SPI_MspInit+0xa0>)
 8000676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	015b      	lsls	r3, r3, #5
 800067c:	4013      	ands	r3, r2
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <HAL_SPI_MspInit+0xa0>)
 8000684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <HAL_SPI_MspInit+0xa0>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_SPI_MspInit+0xa0>)
 8000690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 800069a:	0021      	movs	r1, r4
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2246      	movs	r2, #70	; 0x46
 80006a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2202      	movs	r2, #2
 80006a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	187a      	adds	r2, r7, r1
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fae8 	bl	8000c98 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2019      	movs	r0, #25
 80006ce:	f000 fa49 	bl	8000b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80006d2:	2019      	movs	r0, #25
 80006d4:	f000 fa5b 	bl	8000b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b00b      	add	sp, #44	; 0x2c
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	40013000 	.word	0x40013000
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b08b      	sub	sp, #44	; 0x2c
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	2414      	movs	r4, #20
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0018      	movs	r0, r3
 80006f6:	2314      	movs	r3, #20
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f002 fcce 	bl	800309c <memset>
  if(htim_encoder->Instance==TIM2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	429a      	cmp	r2, r3
 800070a:	d157      	bne.n	80007bc <HAL_TIM_Encoder_MspInit+0xd4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800070c:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800070e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000710:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000712:	2101      	movs	r1, #1
 8000714:	430a      	orrs	r2, r1
 8000716:	63da      	str	r2, [r3, #60]	; 0x3c
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800071a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800071c:	2201      	movs	r2, #1
 800071e:	4013      	ands	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000728:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800072a:	2101      	movs	r1, #1
 800072c:	430a      	orrs	r2, r1
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
 8000730:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000734:	2201      	movs	r2, #1
 8000736:	4013      	ands	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800073e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000742:	2102      	movs	r1, #2
 8000744:	430a      	orrs	r2, r1
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800074a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800074c:	2202      	movs	r2, #2
 800074e:	4013      	ands	r3, r2
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2202      	movs	r2, #2
 800075e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2202      	movs	r2, #2
 8000770:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	193a      	adds	r2, r7, r4
 8000774:	23a0      	movs	r3, #160	; 0xa0
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f000 fa8c 	bl	8000c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000780:	0021      	movs	r1, r4
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2208      	movs	r2, #8
 8000786:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2202      	movs	r2, #2
 800078c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2202      	movs	r2, #2
 800079e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80007a4:	0019      	movs	r1, r3
 80007a6:	0010      	movs	r0, r2
 80007a8:	f000 fa76 	bl	8000c98 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	200f      	movs	r0, #15
 80007b2:	f000 f9d7 	bl	8000b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 f9e9 	bl	8000b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b00b      	add	sp, #44	; 0x2c
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	50000400 	.word	0x50000400

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f8b6 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <TIM2_IRQHandler+0x14>)
 8000802:	0018      	movs	r0, r3
 8000804:	f001 ff8a 	bl	800271c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	200000a0 	.word	0x200000a0

08000814 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1/I2S1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <SPI1_IRQHandler+0x14>)
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fb80 	bl	8001f20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	2000003c 	.word	0x2000003c

0800082c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800083a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800083c:	f7ff fff6 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <LoopForever+0x6>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LoopForever+0xe>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <LoopForever+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000866:	f002 fbf5 	bl	8003054 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800086a:	f7ff fcd7 	bl	800021c <main>

0800086e <LoopForever>:

LoopForever:
  b LoopForever
 800086e:	e7fe      	b.n	800086e <LoopForever>
  ldr   r0, =_estack
 8000870:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800087c:	0800310c 	.word	0x0800310c
  ldr r2, =_sbss
 8000880:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000884:	200000f8 	.word	0x200000f8

08000888 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_COMP_IRQHandler>
	...

0800088c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_Init+0x3c>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <HAL_Init+0x3c>)
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	0049      	lsls	r1, r1, #1
 80008a2:	430a      	orrs	r2, r1
 80008a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a6:	2003      	movs	r0, #3
 80008a8:	f000 f810 	bl	80008cc <HAL_InitTick>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d003      	beq.n	80008b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	e001      	b.n	80008bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff fe9c 	bl	80005f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d4:	230f      	movs	r3, #15
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <HAL_InitTick+0x88>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d02b      	beq.n	800093c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <HAL_InitTick+0x8c>)
 80008e6:	681c      	ldr	r4, [r3, #0]
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <HAL_InitTick+0x88>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	0019      	movs	r1, r3
 80008ee:	23fa      	movs	r3, #250	; 0xfa
 80008f0:	0098      	lsls	r0, r3, #2
 80008f2:	f7ff fc07 	bl	8000104 <__udivsi3>
 80008f6:	0003      	movs	r3, r0
 80008f8:	0019      	movs	r1, r3
 80008fa:	0020      	movs	r0, r4
 80008fc:	f7ff fc02 	bl	8000104 <__udivsi3>
 8000900:	0003      	movs	r3, r0
 8000902:	0018      	movs	r0, r3
 8000904:	f000 f953 	bl	8000bae <HAL_SYSTICK_Config>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d112      	bne.n	8000932 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d80a      	bhi.n	8000928 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	2301      	movs	r3, #1
 8000916:	425b      	negs	r3, r3
 8000918:	2200      	movs	r2, #0
 800091a:	0018      	movs	r0, r3
 800091c:	f000 f922 	bl	8000b64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_InitTick+0x90>)
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e00d      	b.n	8000944 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000928:	230f      	movs	r3, #15
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e008      	b.n	8000944 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000932:	230f      	movs	r3, #15
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	e003      	b.n	8000944 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800093c:	230f      	movs	r3, #15
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000944:	230f      	movs	r3, #15
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	b005      	add	sp, #20
 8000950:	bd90      	pop	{r4, r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	20000008 	.word	0x20000008
 8000958:	20000000 	.word	0x20000000
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	001a      	movs	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	18d2      	adds	r2, r2, r3
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	20000008 	.word	0x20000008
 8000980:	200000ec 	.word	0x200000ec

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	200000ec 	.word	0x200000ec

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff fff0 	bl	8000984 <HAL_GetTick>
 80009a4:	0003      	movs	r3, r0
 80009a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	001a      	movs	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	189b      	adds	r3, r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	f7ff ffe0 	bl	8000984 <HAL_GetTick>
 80009c4:	0002      	movs	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	20000008 	.word	0x20000008

080009e0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80009ee:	4013      	ands	r3, r2
 80009f0:	0019      	movs	r1, r3
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40010000 	.word	0x40010000
 8000a08:	fffff9ff 	.word	0xfffff9ff

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	0002      	movs	r2, r0
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a1e:	d809      	bhi.n	8000a34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001a      	movs	r2, r3
 8000a26:	231f      	movs	r3, #31
 8000a28:	401a      	ands	r2, r3
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_EnableIRQ+0x30>)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4091      	lsls	r1, r2
 8000a30:	000a      	movs	r2, r1
 8000a32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	0002      	movs	r2, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b7f      	cmp	r3, #127	; 0x7f
 8000a54:	d828      	bhi.n	8000aa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a56:	4a2f      	ldr	r2, [pc, #188]	; (8000b14 <__NVIC_SetPriority+0xd4>)
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	33c0      	adds	r3, #192	; 0xc0
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	589b      	ldr	r3, [r3, r2]
 8000a66:	1dfa      	adds	r2, r7, #7
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	400a      	ands	r2, r1
 8000a70:	00d2      	lsls	r2, r2, #3
 8000a72:	21ff      	movs	r1, #255	; 0xff
 8000a74:	4091      	lsls	r1, r2
 8000a76:	000a      	movs	r2, r1
 8000a78:	43d2      	mvns	r2, r2
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	019b      	lsls	r3, r3, #6
 8000a82:	22ff      	movs	r2, #255	; 0xff
 8000a84:	401a      	ands	r2, r3
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	4003      	ands	r3, r0
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a94:	481f      	ldr	r0, [pc, #124]	; (8000b14 <__NVIC_SetPriority+0xd4>)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b25b      	sxtb	r3, r3
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	33c0      	adds	r3, #192	; 0xc0
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aa6:	e031      	b.n	8000b0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <__NVIC_SetPriority+0xd8>)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0019      	movs	r1, r3
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	400b      	ands	r3, r1
 8000ab4:	3b08      	subs	r3, #8
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	3306      	adds	r3, #6
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	3304      	adds	r3, #4
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	2203      	movs	r2, #3
 8000aca:	400a      	ands	r2, r1
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	21ff      	movs	r1, #255	; 0xff
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2303      	movs	r3, #3
 8000aea:	4003      	ands	r3, r0
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <__NVIC_SetPriority+0xd8>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	001c      	movs	r4, r3
 8000af8:	230f      	movs	r3, #15
 8000afa:	4023      	ands	r3, r4
 8000afc:	3b08      	subs	r3, #8
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	430a      	orrs	r2, r1
 8000b02:	3306      	adds	r3, #6
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	18c3      	adds	r3, r0, r3
 8000b08:	3304      	adds	r3, #4
 8000b0a:	601a      	str	r2, [r3, #0]
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b003      	add	sp, #12
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	1e5a      	subs	r2, r3, #1
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	045b      	lsls	r3, r3, #17
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d301      	bcc.n	8000b34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b30:	2301      	movs	r3, #1
 8000b32:	e010      	b.n	8000b56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <SysTick_Config+0x44>)
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	3a01      	subs	r2, #1
 8000b3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	425b      	negs	r3, r3
 8000b40:	2103      	movs	r1, #3
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff ff7c 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SysTick_Config+0x44>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SysTick_Config+0x44>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	0018      	movs	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	210f      	movs	r1, #15
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	1c02      	adds	r2, r0, #0
 8000b74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff ff5d 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	0002      	movs	r2, r0
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff ff33 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b002      	add	sp, #8
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ffaf 	bl	8000b1c <SysTick_Config>
 8000bbe:	0003      	movs	r3, r0
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2225      	movs	r2, #37	; 0x25
 8000bdc:	5c9b      	ldrb	r3, [r3, r2]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d006      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2204      	movs	r2, #4
 8000be8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e048      	b.n	8000c84 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	210e      	movs	r1, #14
 8000bfe:	438a      	bics	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	438a      	bics	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c1c:	491d      	ldr	r1, [pc, #116]	; (8000c94 <HAL_DMA_Abort_IT+0xcc>)
 8000c1e:	400a      	ands	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	221c      	movs	r2, #28
 8000c28:	401a      	ands	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4091      	lsls	r1, r2
 8000c32:	000a      	movs	r2, r1
 8000c34:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c3e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00c      	beq.n	8000c62 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c52:	4910      	ldr	r1, [pc, #64]	; (8000c94 <HAL_DMA_Abort_IT+0xcc>)
 8000c54:	400a      	ands	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c60:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2225      	movs	r2, #37	; 0x25
 8000c66:	2101      	movs	r1, #1
 8000c68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2224      	movs	r2, #36	; 0x24
 8000c6e:	2100      	movs	r1, #0
 8000c70:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	0010      	movs	r0, r2
 8000c82:	4798      	blx	r3
    }
  }
  return status;
 8000c84:	230f      	movs	r3, #15
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	781b      	ldrb	r3, [r3, #0]
}
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	fffffeff 	.word	0xfffffeff

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca6:	e14d      	b.n	8000f44 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	000a      	movs	r2, r1
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d100      	bne.n	8000cc0 <HAL_GPIO_Init+0x28>
 8000cbe:	e13e      	b.n	8000f3e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d005      	beq.n	8000cd8 <HAL_GPIO_Init+0x40>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d130      	bne.n	8000d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	43da      	mvns	r2, r3
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	409a      	lsls	r2, r3
 8000cfa:	0013      	movs	r3, r2
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d0e:	2201      	movs	r2, #1
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	43da      	mvns	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	2201      	movs	r2, #1
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2203      	movs	r2, #3
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d017      	beq.n	8000d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	43da      	mvns	r2, r3
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d123      	bne.n	8000dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	58d3      	ldr	r3, [r2, r3]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	2207      	movs	r2, #7
 8000d94:	4013      	ands	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	691a      	ldr	r2, [r3, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2107      	movs	r1, #7
 8000dae:	400b      	ands	r3, r1
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	6939      	ldr	r1, [r7, #16]
 8000dc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2203      	movs	r2, #3
 8000de8:	401a      	ands	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	23c0      	movs	r3, #192	; 0xc0
 8000e04:	029b      	lsls	r3, r3, #10
 8000e06:	4013      	ands	r3, r2
 8000e08:	d100      	bne.n	8000e0c <HAL_GPIO_Init+0x174>
 8000e0a:	e098      	b.n	8000f3e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e0c:	4a53      	ldr	r2, [pc, #332]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3318      	adds	r3, #24
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	589b      	ldr	r3, [r3, r2]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	4013      	ands	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	220f      	movs	r2, #15
 8000e24:	409a      	lsls	r2, r3
 8000e26:	0013      	movs	r3, r2
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d019      	beq.n	8000e6e <HAL_GPIO_Init+0x1d6>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a48      	ldr	r2, [pc, #288]	; (8000f60 <HAL_GPIO_Init+0x2c8>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x1d2>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a47      	ldr	r2, [pc, #284]	; (8000f64 <HAL_GPIO_Init+0x2cc>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x1ce>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a46      	ldr	r2, [pc, #280]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x1ca>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a45      	ldr	r2, [pc, #276]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x1c6>
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	e008      	b.n	8000e70 <HAL_GPIO_Init+0x1d8>
 8000e5e:	2305      	movs	r3, #5
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x1d8>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e004      	b.n	8000e70 <HAL_GPIO_Init+0x1d8>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_Init+0x1d8>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <HAL_GPIO_Init+0x1d8>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	2103      	movs	r1, #3
 8000e74:	400a      	ands	r2, r1
 8000e76:	00d2      	lsls	r2, r2, #3
 8000e78:	4093      	lsls	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e80:	4936      	ldr	r1, [pc, #216]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3318      	adds	r3, #24
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e8e:	4a33      	ldr	r2, [pc, #204]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	58d3      	ldr	r3, [r2, r3]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43da      	mvns	r2, r3
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	025b      	lsls	r3, r3, #9
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eb4:	4929      	ldr	r1, [pc, #164]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000ebc:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000ebe:	2384      	movs	r3, #132	; 0x84
 8000ec0:	58d3      	ldr	r3, [r2, r3]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	029b      	lsls	r3, r3, #10
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ee2:	491e      	ldr	r1, [pc, #120]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000ee4:	2284      	movs	r2, #132	; 0x84
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	035b      	lsls	r3, r3, #13
 8000f02:	4013      	ands	r3, r2
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	039b      	lsls	r3, r3, #14
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_GPIO_Init+0x2c4>)
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	40da      	lsrs	r2, r3
 8000f4c:	1e13      	subs	r3, r2, #0
 8000f4e:	d000      	beq.n	8000f52 <HAL_GPIO_Init+0x2ba>
 8000f50:	e6aa      	b.n	8000ca8 <HAL_GPIO_Init+0x10>
  }
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b006      	add	sp, #24
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021800 	.word	0x40021800
 8000f60:	50000400 	.word	0x50000400
 8000f64:	50000800 	.word	0x50000800
 8000f68:	50000c00 	.word	0x50000c00
 8000f6c:	50001000 	.word	0x50001000

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	0008      	movs	r0, r1
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	1cbb      	adds	r3, r7, #2
 8000f7e:	1c02      	adds	r2, r0, #0
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	1c7b      	adds	r3, r7, #1
 8000f84:	1c0a      	adds	r2, r1, #0
 8000f86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f88:	1c7b      	adds	r3, r7, #1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f90:	1cbb      	adds	r3, r7, #2
 8000f92:	881a      	ldrh	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f98:	e003      	b.n	8000fa2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9a:	1cbb      	adds	r3, r7, #2
 8000f9c:	881a      	ldrh	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d11f      	bne.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	189b      	adds	r3, r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4912      	ldr	r1, [pc, #72]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff f890 	bl	8000104 <__udivsi3>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fea:	e008      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e001      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e009      	b.n	8001012 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	401a      	ands	r2, r3
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	429a      	cmp	r2, r3
 800100e:	d0ed      	beq.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40007000 	.word	0x40007000
 8001020:	fffff9ff 	.word	0xfffff9ff
 8001024:	20000000 	.word	0x20000000
 8001028:	000f4240 	.word	0x000f4240

0800102c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	f000 fb56 	bl	80016ec <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	4013      	ands	r3, r2
 8001048:	d100      	bne.n	800104c <HAL_RCC_OscConfig+0x20>
 800104a:	e07d      	b.n	8001148 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800104c:	4bc3      	ldr	r3, [pc, #780]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2238      	movs	r2, #56	; 0x38
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001056:	4bc1      	ldr	r3, [pc, #772]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2203      	movs	r2, #3
 800105c:	4013      	ands	r3, r2
 800105e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2b10      	cmp	r3, #16
 8001064:	d102      	bne.n	800106c <HAL_RCC_OscConfig+0x40>
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2b03      	cmp	r3, #3
 800106a:	d002      	beq.n	8001072 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2b08      	cmp	r3, #8
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	4bba      	ldr	r3, [pc, #744]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	029b      	lsls	r3, r3, #10
 800107a:	4013      	ands	r3, r2
 800107c:	d063      	beq.n	8001146 <HAL_RCC_OscConfig+0x11a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d15f      	bne.n	8001146 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	f000 fb30 	bl	80016ec <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	025b      	lsls	r3, r3, #9
 8001094:	429a      	cmp	r2, r3
 8001096:	d107      	bne.n	80010a8 <HAL_RCC_OscConfig+0x7c>
 8001098:	4bb0      	ldr	r3, [pc, #704]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4baf      	ldr	r3, [pc, #700]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	0249      	lsls	r1, r1, #9
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e020      	b.n	80010ea <HAL_RCC_OscConfig+0xbe>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	23a0      	movs	r3, #160	; 0xa0
 80010ae:	02db      	lsls	r3, r3, #11
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d10e      	bne.n	80010d2 <HAL_RCC_OscConfig+0xa6>
 80010b4:	4ba9      	ldr	r3, [pc, #676]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4ba8      	ldr	r3, [pc, #672]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	02c9      	lsls	r1, r1, #11
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	4ba6      	ldr	r3, [pc, #664]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4ba5      	ldr	r3, [pc, #660]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0249      	lsls	r1, r1, #9
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e00b      	b.n	80010ea <HAL_RCC_OscConfig+0xbe>
 80010d2:	4ba2      	ldr	r3, [pc, #648]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4ba1      	ldr	r3, [pc, #644]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80010d8:	49a1      	ldr	r1, [pc, #644]	; (8001360 <HAL_RCC_OscConfig+0x334>)
 80010da:	400a      	ands	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	4b9f      	ldr	r3, [pc, #636]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b9e      	ldr	r3, [pc, #632]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80010e4:	499f      	ldr	r1, [pc, #636]	; (8001364 <HAL_RCC_OscConfig+0x338>)
 80010e6:	400a      	ands	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d014      	beq.n	800111c <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f2:	f7ff fc47 	bl	8000984 <HAL_GetTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fc42 	bl	8000984 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e2ee      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800110e:	4b93      	ldr	r3, [pc, #588]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	029b      	lsls	r3, r3, #10
 8001116:	4013      	ands	r3, r2
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0xd0>
 800111a:	e015      	b.n	8001148 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111c:	f7ff fc32 	bl	8000984 <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001126:	f7ff fc2d 	bl	8000984 <HAL_GetTick>
 800112a:	0002      	movs	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e2d9      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001138:	4b88      	ldr	r3, [pc, #544]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	4013      	ands	r3, r2
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0xfa>
 8001144:	e000      	b.n	8001148 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001146:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2202      	movs	r2, #2
 800114e:	4013      	ands	r3, r2
 8001150:	d100      	bne.n	8001154 <HAL_RCC_OscConfig+0x128>
 8001152:	e099      	b.n	8001288 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001154:	4b81      	ldr	r3, [pc, #516]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2238      	movs	r2, #56	; 0x38
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800115e:	4b7f      	ldr	r3, [pc, #508]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2203      	movs	r2, #3
 8001164:	4013      	ands	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b10      	cmp	r3, #16
 800116c:	d102      	bne.n	8001174 <HAL_RCC_OscConfig+0x148>
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d002      	beq.n	800117a <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d135      	bne.n	80011e6 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800117a:	4b78      	ldr	r3, [pc, #480]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4013      	ands	r3, r2
 8001184:	d005      	beq.n	8001192 <HAL_RCC_OscConfig+0x166>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e2ac      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001192:	4b72      	ldr	r3, [pc, #456]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a74      	ldr	r2, [pc, #464]	; (8001368 <HAL_RCC_OscConfig+0x33c>)
 8001198:	4013      	ands	r3, r2
 800119a:	0019      	movs	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	021a      	lsls	r2, r3, #8
 80011a2:	4b6e      	ldr	r3, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d112      	bne.n	80011d4 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011ae:	4b6b      	ldr	r3, [pc, #428]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6e      	ldr	r2, [pc, #440]	; (800136c <HAL_RCC_OscConfig+0x340>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	0019      	movs	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691a      	ldr	r2, [r3, #16]
 80011bc:	4b67      	ldr	r3, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011c2:	4b66      	ldr	r3, [pc, #408]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0adb      	lsrs	r3, r3, #11
 80011c8:	2207      	movs	r2, #7
 80011ca:	4013      	ands	r3, r2
 80011cc:	4a68      	ldr	r2, [pc, #416]	; (8001370 <HAL_RCC_OscConfig+0x344>)
 80011ce:	40da      	lsrs	r2, r3
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_RCC_OscConfig+0x348>)
 80011d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011d4:	4b68      	ldr	r3, [pc, #416]	; (8001378 <HAL_RCC_OscConfig+0x34c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff fb77 	bl	80008cc <HAL_InitTick>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d051      	beq.n	8001286 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e282      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d030      	beq.n	8001250 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011ee:	4b5b      	ldr	r3, [pc, #364]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a5e      	ldr	r2, [pc, #376]	; (800136c <HAL_RCC_OscConfig+0x340>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	0019      	movs	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	4b57      	ldr	r3, [pc, #348]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001202:	4b56      	ldr	r3, [pc, #344]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b55      	ldr	r3, [pc, #340]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	0049      	lsls	r1, r1, #1
 800120c:	430a      	orrs	r2, r1
 800120e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fbb8 	bl	8000984 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fbb3 	bl	8000984 <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e25f      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4013      	ands	r3, r2
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b48      	ldr	r3, [pc, #288]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a4a      	ldr	r2, [pc, #296]	; (8001368 <HAL_RCC_OscConfig+0x33c>)
 800123e:	4013      	ands	r3, r2
 8001240:	0019      	movs	r1, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	021a      	lsls	r2, r3, #8
 8001248:	4b44      	ldr	r3, [pc, #272]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800124a:	430a      	orrs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	e01b      	b.n	8001288 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001250:	4b42      	ldr	r3, [pc, #264]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b41      	ldr	r3, [pc, #260]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001256:	4949      	ldr	r1, [pc, #292]	; (800137c <HAL_RCC_OscConfig+0x350>)
 8001258:	400a      	ands	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fb92 	bl	8000984 <HAL_GetTick>
 8001260:	0003      	movs	r3, r0
 8001262:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fb8d 	bl	8000984 <HAL_GetTick>
 800126a:	0002      	movs	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e239      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001278:	4b38      	ldr	r3, [pc, #224]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4013      	ands	r3, r2
 8001282:	d1f0      	bne.n	8001266 <HAL_RCC_OscConfig+0x23a>
 8001284:	e000      	b.n	8001288 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001286:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2208      	movs	r2, #8
 800128e:	4013      	ands	r3, r2
 8001290:	d047      	beq.n	8001322 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001292:	4b32      	ldr	r3, [pc, #200]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2238      	movs	r2, #56	; 0x38
 8001298:	4013      	ands	r3, r2
 800129a:	2b18      	cmp	r3, #24
 800129c:	d10a      	bne.n	80012b4 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d03c      	beq.n	8001322 <HAL_RCC_OscConfig+0x2f6>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d138      	bne.n	8001322 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e21b      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d019      	beq.n	80012f0 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80012be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	430a      	orrs	r2, r1
 80012c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fb5c 	bl	8000984 <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff fb57 	bl	8000984 <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e203      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e8:	2202      	movs	r2, #2
 80012ea:	4013      	ands	r3, r2
 80012ec:	d0f1      	beq.n	80012d2 <HAL_RCC_OscConfig+0x2a6>
 80012ee:	e018      	b.n	8001322 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80012f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80012f6:	2101      	movs	r1, #1
 80012f8:	438a      	bics	r2, r1
 80012fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fb42 	bl	8000984 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001306:	f7ff fb3d 	bl	8000984 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e1e9      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800131a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131c:	2202      	movs	r2, #2
 800131e:	4013      	ands	r3, r2
 8001320:	d1f1      	bne.n	8001306 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2204      	movs	r2, #4
 8001328:	4013      	ands	r3, r2
 800132a:	d100      	bne.n	800132e <HAL_RCC_OscConfig+0x302>
 800132c:	e0c6      	b.n	80014bc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132e:	231f      	movs	r3, #31
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2238      	movs	r2, #56	; 0x38
 800133c:	4013      	ands	r3, r2
 800133e:	2b20      	cmp	r3, #32
 8001340:	d11e      	bne.n	8001380 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001346:	2202      	movs	r2, #2
 8001348:	4013      	ands	r3, r2
 800134a:	d100      	bne.n	800134e <HAL_RCC_OscConfig+0x322>
 800134c:	e0b6      	b.n	80014bc <HAL_RCC_OscConfig+0x490>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d000      	beq.n	8001358 <HAL_RCC_OscConfig+0x32c>
 8001356:	e0b1      	b.n	80014bc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e1c7      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
 800135c:	40021000 	.word	0x40021000
 8001360:	fffeffff 	.word	0xfffeffff
 8001364:	fffbffff 	.word	0xfffbffff
 8001368:	ffff80ff 	.word	0xffff80ff
 800136c:	ffffc7ff 	.word	0xffffc7ff
 8001370:	00f42400 	.word	0x00f42400
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004
 800137c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001380:	4bb8      	ldr	r3, [pc, #736]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	055b      	lsls	r3, r3, #21
 8001388:	4013      	ands	r3, r2
 800138a:	d101      	bne.n	8001390 <HAL_RCC_OscConfig+0x364>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x366>
 8001390:	2300      	movs	r3, #0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d011      	beq.n	80013ba <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4bb3      	ldr	r3, [pc, #716]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800139a:	4bb2      	ldr	r3, [pc, #712]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	0549      	lsls	r1, r1, #21
 80013a0:	430a      	orrs	r2, r1
 80013a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80013a4:	4baf      	ldr	r3, [pc, #700]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80013a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	055b      	lsls	r3, r3, #21
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80013b2:	231f      	movs	r3, #31
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ba:	4bab      	ldr	r3, [pc, #684]	; (8001668 <HAL_RCC_OscConfig+0x63c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4013      	ands	r3, r2
 80013c4:	d11a      	bne.n	80013fc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013c6:	4ba8      	ldr	r3, [pc, #672]	; (8001668 <HAL_RCC_OscConfig+0x63c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4ba7      	ldr	r3, [pc, #668]	; (8001668 <HAL_RCC_OscConfig+0x63c>)
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0049      	lsls	r1, r1, #1
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fad6 	bl	8000984 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013de:	f7ff fad1 	bl	8000984 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e17d      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f0:	4b9d      	ldr	r3, [pc, #628]	; (8001668 <HAL_RCC_OscConfig+0x63c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4013      	ands	r3, r2
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x3e6>
 8001404:	4b97      	ldr	r3, [pc, #604]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001406:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001408:	4b96      	ldr	r3, [pc, #600]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800140a:	2101      	movs	r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001410:	e01c      	b.n	800144c <HAL_RCC_OscConfig+0x420>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b05      	cmp	r3, #5
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x408>
 800141a:	4b92      	ldr	r3, [pc, #584]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800141c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800141e:	4b91      	ldr	r3, [pc, #580]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001420:	2104      	movs	r1, #4
 8001422:	430a      	orrs	r2, r1
 8001424:	65da      	str	r2, [r3, #92]	; 0x5c
 8001426:	4b8f      	ldr	r3, [pc, #572]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001428:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800142a:	4b8e      	ldr	r3, [pc, #568]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800142c:	2101      	movs	r1, #1
 800142e:	430a      	orrs	r2, r1
 8001430:	65da      	str	r2, [r3, #92]	; 0x5c
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0x420>
 8001434:	4b8b      	ldr	r3, [pc, #556]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001436:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001438:	4b8a      	ldr	r3, [pc, #552]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800143a:	2101      	movs	r1, #1
 800143c:	438a      	bics	r2, r1
 800143e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001440:	4b88      	ldr	r3, [pc, #544]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001442:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001444:	4b87      	ldr	r3, [pc, #540]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001446:	2104      	movs	r1, #4
 8001448:	438a      	bics	r2, r1
 800144a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d014      	beq.n	800147e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fa96 	bl	8000984 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800145c:	e009      	b.n	8001472 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145e:	f7ff fa91 	bl	8000984 <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	4a80      	ldr	r2, [pc, #512]	; (800166c <HAL_RCC_OscConfig+0x640>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e13c      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001472:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	2202      	movs	r2, #2
 8001478:	4013      	ands	r3, r2
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x432>
 800147c:	e013      	b.n	80014a6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147e:	f7ff fa81 	bl	8000984 <HAL_GetTick>
 8001482:	0003      	movs	r3, r0
 8001484:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001486:	e009      	b.n	800149c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001488:	f7ff fa7c 	bl	8000984 <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	4a76      	ldr	r2, [pc, #472]	; (800166c <HAL_RCC_OscConfig+0x640>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e127      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800149c:	4b71      	ldr	r3, [pc, #452]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	2202      	movs	r2, #2
 80014a2:	4013      	ands	r3, r2
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014a6:	231f      	movs	r3, #31
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d105      	bne.n	80014bc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014b0:	4b6c      	ldr	r3, [pc, #432]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80014b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014b4:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80014b6:	496e      	ldr	r1, [pc, #440]	; (8001670 <HAL_RCC_OscConfig+0x644>)
 80014b8:	400a      	ands	r2, r1
 80014ba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2220      	movs	r2, #32
 80014c2:	4013      	ands	r3, r2
 80014c4:	d039      	beq.n	800153a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d01b      	beq.n	8001506 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014ce:	4b65      	ldr	r3, [pc, #404]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b64      	ldr	r3, [pc, #400]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	03c9      	lsls	r1, r1, #15
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff fa52 	bl	8000984 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014e6:	f7ff fa4d 	bl	8000984 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e0f9      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014f8:	4b5a      	ldr	r3, [pc, #360]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	041b      	lsls	r3, r3, #16
 8001500:	4013      	ands	r3, r2
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x4ba>
 8001504:	e019      	b.n	800153a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001506:	4b57      	ldr	r3, [pc, #348]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b56      	ldr	r3, [pc, #344]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800150c:	4959      	ldr	r1, [pc, #356]	; (8001674 <HAL_RCC_OscConfig+0x648>)
 800150e:	400a      	ands	r2, r1
 8001510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001512:	f7ff fa37 	bl	8000984 <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800151c:	f7ff fa32 	bl	8000984 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0de      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800152e:	4b4d      	ldr	r3, [pc, #308]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	4013      	ands	r3, r2
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d100      	bne.n	8001544 <HAL_RCC_OscConfig+0x518>
 8001542:	e0d2      	b.n	80016ea <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001544:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2238      	movs	r2, #56	; 0x38
 800154a:	4013      	ands	r3, r2
 800154c:	2b10      	cmp	r3, #16
 800154e:	d100      	bne.n	8001552 <HAL_RCC_OscConfig+0x526>
 8001550:	e081      	b.n	8001656 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d156      	bne.n	8001608 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b42      	ldr	r3, [pc, #264]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001560:	4945      	ldr	r1, [pc, #276]	; (8001678 <HAL_RCC_OscConfig+0x64c>)
 8001562:	400a      	ands	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001566:	f7ff fa0d 	bl	8000984 <HAL_GetTick>
 800156a:	0003      	movs	r3, r0
 800156c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff fa08 	bl	8000984 <HAL_GetTick>
 8001574:	0002      	movs	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0b4      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	049b      	lsls	r3, r3, #18
 800158a:	4013      	ands	r3, r2
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158e:	4b35      	ldr	r3, [pc, #212]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	4a3a      	ldr	r2, [pc, #232]	; (800167c <HAL_RCC_OscConfig+0x650>)
 8001594:	4013      	ands	r3, r2
 8001596:	0019      	movs	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ba:	431a      	orrs	r2, r3
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80015be:	430a      	orrs	r2, r1
 80015c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0449      	lsls	r1, r1, #17
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	0549      	lsls	r1, r1, #21
 80015da:	430a      	orrs	r2, r1
 80015dc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff f9d1 	bl	8000984 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff f9cc 	bl	8000984 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e078      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	049b      	lsls	r3, r3, #18
 8001602:	4013      	ands	r3, r2
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x5bc>
 8001606:	e070      	b.n	80016ea <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800160e:	491a      	ldr	r1, [pc, #104]	; (8001678 <HAL_RCC_OscConfig+0x64c>)
 8001610:	400a      	ands	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800161a:	2103      	movs	r1, #3
 800161c:	438a      	bics	r2, r1
 800161e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 8001626:	4916      	ldr	r1, [pc, #88]	; (8001680 <HAL_RCC_OscConfig+0x654>)
 8001628:	400a      	ands	r2, r1
 800162a:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff f9aa 	bl	8000984 <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001636:	f7ff f9a5 	bl	8000984 <HAL_GetTick>
 800163a:	0002      	movs	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e051      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_RCC_OscConfig+0x638>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	049b      	lsls	r3, r3, #18
 8001650:	4013      	ands	r3, r2
 8001652:	d1f0      	bne.n	8001636 <HAL_RCC_OscConfig+0x60a>
 8001654:	e049      	b.n	80016ea <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d112      	bne.n	8001684 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e044      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	40021000 	.word	0x40021000
 8001668:	40007000 	.word	0x40007000
 800166c:	00001388 	.word	0x00001388
 8001670:	efffffff 	.word	0xefffffff
 8001674:	ffbfffff 	.word	0xffbfffff
 8001678:	feffffff 	.word	0xfeffffff
 800167c:	11c1808c 	.word	0x11c1808c
 8001680:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x6c8>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2203      	movs	r2, #3
 800168e:	401a      	ands	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	429a      	cmp	r2, r3
 8001696:	d126      	bne.n	80016e6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2270      	movs	r2, #112	; 0x70
 800169c:	401a      	ands	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d11f      	bne.n	80016e6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	23fe      	movs	r3, #254	; 0xfe
 80016aa:	01db      	lsls	r3, r3, #7
 80016ac:	401a      	ands	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d116      	bne.n	80016e6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	23f8      	movs	r3, #248	; 0xf8
 80016bc:	039b      	lsls	r3, r3, #14
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d10e      	bne.n	80016e6 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	23e0      	movs	r3, #224	; 0xe0
 80016cc:	051b      	lsls	r3, r3, #20
 80016ce:	401a      	ands	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	0f5b      	lsrs	r3, r3, #29
 80016dc:	075a      	lsls	r2, r3, #29
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b008      	add	sp, #32
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0e9      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2207      	movs	r2, #7
 8001712:	4013      	ands	r3, r2
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d91e      	bls.n	8001758 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2207      	movs	r2, #7
 8001720:	4393      	bics	r3, r2
 8001722:	0019      	movs	r1, r3
 8001724:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800172c:	f7ff f92a 	bl	8000984 <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001734:	e009      	b.n	800174a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001736:	f7ff f925 	bl	8000984 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	4a6a      	ldr	r2, [pc, #424]	; (80018ec <HAL_RCC_ClockConfig+0x1f4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0ca      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800174a:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2207      	movs	r2, #7
 8001750:	4013      	ands	r3, r2
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d1ee      	bne.n	8001736 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d015      	beq.n	800178e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2204      	movs	r2, #4
 8001768:	4013      	ands	r3, r2
 800176a:	d006      	beq.n	800177a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800176c:	4b60      	ldr	r3, [pc, #384]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001772:	21e0      	movs	r1, #224	; 0xe0
 8001774:	01c9      	lsls	r1, r1, #7
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4a5d      	ldr	r2, [pc, #372]	; (80018f4 <HAL_RCC_ClockConfig+0x1fc>)
 8001780:	4013      	ands	r3, r2
 8001782:	0019      	movs	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 800178a:	430a      	orrs	r2, r1
 800178c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2201      	movs	r2, #1
 8001794:	4013      	ands	r3, r2
 8001796:	d057      	beq.n	8001848 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	029b      	lsls	r3, r3, #10
 80017a8:	4013      	ands	r3, r2
 80017aa:	d12b      	bne.n	8001804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e097      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b8:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	049b      	lsls	r3, r3, #18
 80017c0:	4013      	ands	r3, r2
 80017c2:	d11f      	bne.n	8001804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e08b      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d0:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	d113      	bne.n	8001804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e07f      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017e8:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d108      	bne.n	8001804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e074      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f6:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80017f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e06d      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001804:	4b3a      	ldr	r3, [pc, #232]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2207      	movs	r2, #7
 800180a:	4393      	bics	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001814:	430a      	orrs	r2, r1
 8001816:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001818:	f7ff f8b4 	bl	8000984 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001820:	e009      	b.n	8001836 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001822:	f7ff f8af 	bl	8000984 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	4a2f      	ldr	r2, [pc, #188]	; (80018ec <HAL_RCC_ClockConfig+0x1f4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e054      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2238      	movs	r2, #56	; 0x38
 800183c:	401a      	ands	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	429a      	cmp	r2, r3
 8001846:	d1ec      	bne.n	8001822 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2207      	movs	r2, #7
 800184e:	4013      	ands	r3, r2
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d21e      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2207      	movs	r2, #7
 800185c:	4393      	bics	r3, r2
 800185e:	0019      	movs	r1, r3
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001868:	f7ff f88c 	bl	8000984 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001870:	e009      	b.n	8001886 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001872:	f7ff f887 	bl	8000984 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <HAL_RCC_ClockConfig+0x1f4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e02c      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2207      	movs	r2, #7
 800188c:	4013      	ands	r3, r2
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d1ee      	bne.n	8001872 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2204      	movs	r2, #4
 800189a:	4013      	ands	r3, r2
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <HAL_RCC_ClockConfig+0x200>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018b2:	f000 f829 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018b6:	0001      	movs	r1, r0
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	220f      	movs	r2, #15
 80018c0:	401a      	ands	r2, r3
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x204>)
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	58d3      	ldr	r3, [r2, r3]
 80018c8:	221f      	movs	r2, #31
 80018ca:	4013      	ands	r3, r2
 80018cc:	000a      	movs	r2, r1
 80018ce:	40da      	lsrs	r2, r3
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_ClockConfig+0x208>)
 80018d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_ClockConfig+0x20c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0018      	movs	r0, r3
 80018da:	f7fe fff7 	bl	80008cc <HAL_InitTick>
 80018de:	0003      	movs	r3, r0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40022000 	.word	0x40022000
 80018ec:	00001388 	.word	0x00001388
 80018f0:	40021000 	.word	0x40021000
 80018f4:	fffff0ff 	.word	0xfffff0ff
 80018f8:	ffff8fff 	.word	0xffff8fff
 80018fc:	080030c4 	.word	0x080030c4
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2238      	movs	r2, #56	; 0x38
 8001914:	4013      	ands	r3, r2
 8001916:	d10f      	bne.n	8001938 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001918:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0adb      	lsrs	r3, r3, #11
 800191e:	2207      	movs	r2, #7
 8001920:	4013      	ands	r3, r2
 8001922:	2201      	movs	r2, #1
 8001924:	409a      	lsls	r2, r3
 8001926:	0013      	movs	r3, r2
 8001928:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	4835      	ldr	r0, [pc, #212]	; (8001a04 <HAL_RCC_GetSysClockFreq+0xfc>)
 800192e:	f7fe fbe9 	bl	8000104 <__udivsi3>
 8001932:	0003      	movs	r3, r0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	e05d      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001938:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2238      	movs	r2, #56	; 0x38
 800193e:	4013      	ands	r3, r2
 8001940:	2b08      	cmp	r3, #8
 8001942:	d102      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001944:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x100>)
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	e054      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2238      	movs	r2, #56	; 0x38
 8001950:	4013      	ands	r3, r2
 8001952:	2b10      	cmp	r3, #16
 8001954:	d138      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001956:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2203      	movs	r2, #3
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	2207      	movs	r2, #7
 8001968:	4013      	ands	r3, r2
 800196a:	3301      	adds	r3, #1
 800196c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d10d      	bne.n	8001990 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	4824      	ldr	r0, [pc, #144]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x100>)
 8001978:	f7fe fbc4 	bl	8000104 <__udivsi3>
 800197c:	0003      	movs	r3, r0
 800197e:	0019      	movs	r1, r3
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	227f      	movs	r2, #127	; 0x7f
 8001988:	4013      	ands	r3, r2
 800198a:	434b      	muls	r3, r1
 800198c:	617b      	str	r3, [r7, #20]
        break;
 800198e:	e00d      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	481c      	ldr	r0, [pc, #112]	; (8001a04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001994:	f7fe fbb6 	bl	8000104 <__udivsi3>
 8001998:	0003      	movs	r3, r0
 800199a:	0019      	movs	r1, r3
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	227f      	movs	r2, #127	; 0x7f
 80019a4:	4013      	ands	r3, r2
 80019a6:	434b      	muls	r3, r1
 80019a8:	617b      	str	r3, [r7, #20]
        break;
 80019aa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0f5b      	lsrs	r3, r3, #29
 80019b2:	2207      	movs	r2, #7
 80019b4:	4013      	ands	r3, r2
 80019b6:	3301      	adds	r3, #1
 80019b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	f7fe fba1 	bl	8000104 <__udivsi3>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e015      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2238      	movs	r2, #56	; 0x38
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d103      	bne.n	80019dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2238      	movs	r2, #56	; 0x38
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b18      	cmp	r3, #24
 80019e6:	d103      	bne.n	80019f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019e8:	23fa      	movs	r3, #250	; 0xfa
 80019ea:	01db      	lsls	r3, r3, #7
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	e001      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019f4:	693b      	ldr	r3, [r7, #16]
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b006      	add	sp, #24
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	40021000 	.word	0x40021000
 8001a04:	00f42400 	.word	0x00f42400
 8001a08:	007a1200 	.word	0x007a1200

08001a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0a8      	b.n	8001b70 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d109      	bne.n	8001a3a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	2382      	movs	r3, #130	; 0x82
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d009      	beq.n	8001a46 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
 8001a38:	e005      	b.n	8001a46 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	225d      	movs	r2, #93	; 0x5d
 8001a50:	5c9b      	ldrb	r3, [r3, r2]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	225c      	movs	r2, #92	; 0x5c
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7fe fdee 	bl	8000644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	225d      	movs	r2, #93	; 0x5d
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2140      	movs	r1, #64	; 0x40
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	23e0      	movs	r3, #224	; 0xe0
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d902      	bls.n	8001a92 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e002      	b.n	8001a98 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	015b      	lsls	r3, r3, #5
 8001a96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	23f0      	movs	r3, #240	; 0xf0
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d008      	beq.n	8001ab6 <HAL_SPI_Init+0xaa>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	23e0      	movs	r3, #224	; 0xe0
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d002      	beq.n	8001ab6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	2382      	movs	r3, #130	; 0x82
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	401a      	ands	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	2384      	movs	r3, #132	; 0x84
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	400b      	ands	r3, r1
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	2101      	movs	r1, #1
 8001adc:	400b      	ands	r3, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6999      	ldr	r1, [r3, #24]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	400b      	ands	r3, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	2138      	movs	r1, #56	; 0x38
 8001af2:	400b      	ands	r3, r1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	400b      	ands	r3, r1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	0011      	movs	r1, r2
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	019b      	lsls	r3, r3, #6
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	2110      	movs	r1, #16
 8001b24:	400b      	ands	r3, r1
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	400b      	ands	r3, r1
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68d9      	ldr	r1, [r3, #12]
 8001b36:	23f0      	movs	r3, #240	; 0xf0
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	0011      	movs	r1, r2
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	015b      	lsls	r3, r3, #5
 8001b46:	401a      	ands	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	69da      	ldr	r2, [r3, #28]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4907      	ldr	r1, [pc, #28]	; (8001b78 <HAL_SPI_Init+0x16c>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	225d      	movs	r2, #93	; 0x5d
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b004      	add	sp, #16
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	fffff7ff 	.word	0xfffff7ff

08001b7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	001a      	movs	r2, r3
 8001b8a:	1cbb      	adds	r3, r7, #2
 8001b8c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b92:	2323      	movs	r3, #35	; 0x23
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	225c      	movs	r2, #92	; 0x5c
 8001b9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_SPI_TransmitReceive+0x2c>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e1b5      	b.n	8001f14 <HAL_SPI_TransmitReceive+0x398>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	225c      	movs	r2, #92	; 0x5c
 8001bac:	2101      	movs	r1, #1
 8001bae:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bb0:	f7fe fee8 	bl	8000984 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001bb8:	201b      	movs	r0, #27
 8001bba:	183b      	adds	r3, r7, r0
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	215d      	movs	r1, #93	; 0x5d
 8001bc0:	5c52      	ldrb	r2, [r2, r1]
 8001bc2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001bca:	2312      	movs	r3, #18
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	1cba      	adds	r2, r7, #2
 8001bd0:	8812      	ldrh	r2, [r2, #0]
 8001bd2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d011      	beq.n	8001c00 <HAL_SPI_TransmitReceive+0x84>
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	2382      	movs	r3, #130	; 0x82
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d107      	bne.n	8001bf6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d103      	bne.n	8001bf6 <HAL_SPI_TransmitReceive+0x7a>
 8001bee:	183b      	adds	r3, r7, r0
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d004      	beq.n	8001c00 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001bf6:	2323      	movs	r3, #35	; 0x23
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bfe:	e17e      	b.n	8001efe <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <HAL_SPI_TransmitReceive+0x98>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_SPI_TransmitReceive+0x98>
 8001c0c:	1cbb      	adds	r3, r7, #2
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d104      	bne.n	8001c1e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001c14:	2323      	movs	r3, #35	; 0x23
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001c1c:	e16f      	b.n	8001efe <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	225d      	movs	r2, #93	; 0x5d
 8001c22:	5c9b      	ldrb	r3, [r3, r2]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d003      	beq.n	8001c32 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	225d      	movs	r2, #93	; 0x5d
 8001c2e:	2105      	movs	r1, #5
 8001c30:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1cba      	adds	r2, r7, #2
 8001c42:	2146      	movs	r1, #70	; 0x46
 8001c44:	8812      	ldrh	r2, [r2, #0]
 8001c46:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1cba      	adds	r2, r7, #2
 8001c4c:	2144      	movs	r1, #68	; 0x44
 8001c4e:	8812      	ldrh	r2, [r2, #0]
 8001c50:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1cba      	adds	r2, r7, #2
 8001c5c:	8812      	ldrh	r2, [r2, #0]
 8001c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1cba      	adds	r2, r7, #2
 8001c64:	8812      	ldrh	r2, [r2, #0]
 8001c66:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	23e0      	movs	r3, #224	; 0xe0
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d908      	bls.n	8001c92 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	49a4      	ldr	r1, [pc, #656]	; (8001f1c <HAL_SPI_TransmitReceive+0x3a0>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	e008      	b.n	8001ca4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2180      	movs	r1, #128	; 0x80
 8001c9e:	0149      	lsls	r1, r1, #5
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2240      	movs	r2, #64	; 0x40
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b40      	cmp	r3, #64	; 0x40
 8001cb0:	d007      	beq.n	8001cc2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	23e0      	movs	r3, #224	; 0xe0
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d800      	bhi.n	8001cd0 <HAL_SPI_TransmitReceive+0x154>
 8001cce:	e07f      	b.n	8001dd0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_SPI_TransmitReceive+0x168>
 8001cd8:	2312      	movs	r3, #18
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d000      	beq.n	8001ce4 <HAL_SPI_TransmitReceive+0x168>
 8001ce2:	e069      	b.n	8001db8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	881a      	ldrh	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	1c9a      	adds	r2, r3, #2
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d08:	e056      	b.n	8001db8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2202      	movs	r2, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d11b      	bne.n	8001d50 <HAL_SPI_TransmitReceive+0x1d4>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d016      	beq.n	8001d50 <HAL_SPI_TransmitReceive+0x1d4>
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d113      	bne.n	8001d50 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	881a      	ldrh	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	1c9a      	adds	r2, r3, #2
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d11c      	bne.n	8001d98 <HAL_SPI_TransmitReceive+0x21c>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2246      	movs	r2, #70	; 0x46
 8001d62:	5a9b      	ldrh	r3, [r3, r2]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d016      	beq.n	8001d98 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	b292      	uxth	r2, r2
 8001d76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	1c9a      	adds	r2, r3, #2
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2246      	movs	r2, #70	; 0x46
 8001d86:	5a9b      	ldrh	r3, [r3, r2]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2246      	movs	r2, #70	; 0x46
 8001d92:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d94:	2301      	movs	r3, #1
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d98:	f7fe fdf4 	bl	8000984 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d807      	bhi.n	8001db8 <HAL_SPI_TransmitReceive+0x23c>
 8001da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001daa:	3301      	adds	r3, #1
 8001dac:	d004      	beq.n	8001db8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001dae:	2323      	movs	r3, #35	; 0x23
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	2203      	movs	r2, #3
 8001db4:	701a      	strb	r2, [r3, #0]
        goto error;
 8001db6:	e0a2      	b.n	8001efe <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1a3      	bne.n	8001d0a <HAL_SPI_TransmitReceive+0x18e>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2246      	movs	r2, #70	; 0x46
 8001dc6:	5a9b      	ldrh	r3, [r3, r2]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d19d      	bne.n	8001d0a <HAL_SPI_TransmitReceive+0x18e>
 8001dce:	e085      	b.n	8001edc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_SPI_TransmitReceive+0x268>
 8001dd8:	2312      	movs	r3, #18
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d000      	beq.n	8001de4 <HAL_SPI_TransmitReceive+0x268>
 8001de2:	e070      	b.n	8001ec6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	330c      	adds	r3, #12
 8001dee:	7812      	ldrb	r2, [r2, #0]
 8001df0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e0a:	e05c      	b.n	8001ec6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d11c      	bne.n	8001e54 <HAL_SPI_TransmitReceive+0x2d8>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d017      	beq.n	8001e54 <HAL_SPI_TransmitReceive+0x2d8>
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d114      	bne.n	8001e54 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	330c      	adds	r3, #12
 8001e34:	7812      	ldrb	r2, [r2, #0]
 8001e36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d11e      	bne.n	8001ea0 <HAL_SPI_TransmitReceive+0x324>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2246      	movs	r2, #70	; 0x46
 8001e66:	5a9b      	ldrh	r3, [r3, r2]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d018      	beq.n	8001ea0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	330c      	adds	r3, #12
 8001e74:	001a      	movs	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2246      	movs	r2, #70	; 0x46
 8001e8e:	5a9b      	ldrh	r3, [r3, r2]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b299      	uxth	r1, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2246      	movs	r2, #70	; 0x46
 8001e9a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001ea0:	f7fe fd70 	bl	8000984 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d802      	bhi.n	8001eb6 <HAL_SPI_TransmitReceive+0x33a>
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_SPI_TransmitReceive+0x340>
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8001ebc:	2323      	movs	r3, #35	; 0x23
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	701a      	strb	r2, [r3, #0]
        goto error;
 8001ec4:	e01b      	b.n	8001efe <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d19d      	bne.n	8001e0c <HAL_SPI_TransmitReceive+0x290>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2246      	movs	r2, #70	; 0x46
 8001ed4:	5a9b      	ldrh	r3, [r3, r2]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d197      	bne.n	8001e0c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fa68 	bl	80023b8 <SPI_EndRxTxTransaction>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d007      	beq.n	8001efc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8001eec:	2323      	movs	r3, #35	; 0x23
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	661a      	str	r2, [r3, #96]	; 0x60
 8001efa:	e000      	b.n	8001efe <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8001efc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	225d      	movs	r2, #93	; 0x5d
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	225c      	movs	r2, #92	; 0x5c
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f0e:	2323      	movs	r3, #35	; 0x23
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	781b      	ldrb	r3, [r3, #0]
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b00a      	add	sp, #40	; 0x28
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	ffffefff 	.word	0xffffefff

08001f20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	099b      	lsrs	r3, r3, #6
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	2301      	movs	r3, #1
 8001f40:	4013      	ands	r3, r2
 8001f42:	d10f      	bne.n	8001f64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f4a:	d00b      	beq.n	8001f64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	001a      	movs	r2, r3
 8001f52:	2301      	movs	r3, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	d005      	beq.n	8001f64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	0010      	movs	r0, r2
 8001f60:	4798      	blx	r3
    return;
 8001f62:	e0d5      	b.n	8002110 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	001a      	movs	r2, r3
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d00b      	beq.n	8001f88 <HAL_SPI_IRQHandler+0x68>
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	09db      	lsrs	r3, r3, #7
 8001f74:	001a      	movs	r2, r3
 8001f76:	2301      	movs	r3, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d005      	beq.n	8001f88 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	0010      	movs	r0, r2
 8001f84:	4798      	blx	r3
    return;
 8001f86:	e0c3      	b.n	8002110 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	001a      	movs	r2, r3
 8001f8e:	2301      	movs	r3, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d10c      	bne.n	8001fae <HAL_SPI_IRQHandler+0x8e>
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	099b      	lsrs	r3, r3, #6
 8001f98:	001a      	movs	r2, r3
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d106      	bne.n	8001fae <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d100      	bne.n	8001fae <HAL_SPI_IRQHandler+0x8e>
 8001fac:	e0b0      	b.n	8002110 <HAL_SPI_IRQHandler+0x1f0>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d100      	bne.n	8001fbc <HAL_SPI_IRQHandler+0x9c>
 8001fba:	e0a9      	b.n	8002110 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d023      	beq.n	8002010 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	225d      	movs	r2, #93	; 0x5d
 8001fcc:	5c9b      	ldrb	r3, [r3, r2]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d011      	beq.n	8001ff8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd8:	2204      	movs	r2, #4
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	e00b      	b.n	8002010 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
        return;
 800200e:	e07f      	b.n	8002110 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	001a      	movs	r2, r3
 8002016:	2301      	movs	r3, #1
 8002018:	4013      	ands	r3, r2
 800201a:	d014      	beq.n	8002046 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002020:	2201      	movs	r2, #1
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	438a      	bics	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	001a      	movs	r2, r3
 800204c:	2301      	movs	r3, #1
 800204e:	4013      	ands	r3, r2
 8002050:	d00c      	beq.n	800206c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002056:	2208      	movs	r2, #8
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002070:	2b00      	cmp	r3, #0
 8002072:	d04c      	beq.n	800210e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	21e0      	movs	r1, #224	; 0xe0
 8002080:	438a      	bics	r2, r1
 8002082:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	225d      	movs	r2, #93	; 0x5d
 8002088:	2101      	movs	r1, #1
 800208a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2202      	movs	r2, #2
 8002090:	4013      	ands	r3, r2
 8002092:	d103      	bne.n	800209c <HAL_SPI_IRQHandler+0x17c>
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2201      	movs	r2, #1
 8002098:	4013      	ands	r3, r2
 800209a:	d032      	beq.n	8002102 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2103      	movs	r1, #3
 80020a8:	438a      	bics	r2, r1
 80020aa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	4a17      	ldr	r2, [pc, #92]	; (8002118 <HAL_SPI_IRQHandler+0x1f8>)
 80020ba:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7fe fd81 	bl	8000bc8 <HAL_DMA_Abort_IT>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	2240      	movs	r2, #64	; 0x40
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <HAL_SPI_IRQHandler+0x1f8>)
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7fe fd6c 	bl	8000bc8 <HAL_DMA_Abort_IT>
 80020f0:	1e03      	subs	r3, r0, #0
 80020f2:	d00b      	beq.n	800210c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f8:	2240      	movs	r2, #64	; 0x40
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002100:	e004      	b.n	800210c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f000 f809 	bl	800211c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800210a:	e000      	b.n	800210e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800210c:	46c0      	nop			; (mov r8, r8)
    return;
 800210e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002110:	46bd      	mov	sp, r7
 8002112:	b008      	add	sp, #32
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	0800212d 	.word	0x0800212d

0800211c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	b002      	add	sp, #8
 800212a:	bd80      	pop	{r7, pc}

0800212c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2246      	movs	r2, #70	; 0x46
 800213e:	2100      	movs	r1, #0
 8002140:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	0018      	movs	r0, r3
 800214c:	f7ff ffe6 	bl	800211c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b004      	add	sp, #16
 8002156:	bd80      	pop	{r7, pc}

08002158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002168:	f7fe fc0c 	bl	8000984 <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	18d3      	adds	r3, r2, r3
 8002176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002178:	f7fe fc04 	bl	8000984 <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	015b      	lsls	r3, r3, #5
 8002186:	0d1b      	lsrs	r3, r3, #20
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	4353      	muls	r3, r2
 800218c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800218e:	e058      	b.n	8002242 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	d055      	beq.n	8002242 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002196:	f7fe fbf5 	bl	8000984 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d902      	bls.n	80021ac <SPI_WaitFlagStateUntilTimeout+0x54>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d142      	bne.n	8002232 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	21e0      	movs	r1, #224	; 0xe0
 80021b8:	438a      	bics	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	2382      	movs	r3, #130	; 0x82
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d113      	bne.n	80021f0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d005      	beq.n	80021e0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	429a      	cmp	r2, r3
 80021de:	d107      	bne.n	80021f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2140      	movs	r1, #64	; 0x40
 80021ec:	438a      	bics	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	019b      	lsls	r3, r3, #6
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d110      	bne.n	800221e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	491a      	ldr	r1, [pc, #104]	; (8002270 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002208:	400a      	ands	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	0189      	lsls	r1, r1, #6
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	225d      	movs	r2, #93	; 0x5d
 8002222:	2101      	movs	r1, #1
 8002224:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	225c      	movs	r2, #92	; 0x5c
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e017      	b.n	8002262 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3b01      	subs	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4013      	ands	r3, r2
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	425a      	negs	r2, r3
 8002252:	4153      	adcs	r3, r2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	001a      	movs	r2, r3
 8002258:	1dfb      	adds	r3, r7, #7
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d197      	bne.n	8002190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b008      	add	sp, #32
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	20000000 	.word	0x20000000
 8002270:	ffffdfff 	.word	0xffffdfff

08002274 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002282:	2317      	movs	r3, #23
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800228a:	f7fe fb7b 	bl	8000984 <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	18d3      	adds	r3, r2, r3
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800229a:	f7fe fb73 	bl	8000984 <HAL_GetTick>
 800229e:	0003      	movs	r3, r0
 80022a0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	330c      	adds	r3, #12
 80022a8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	0013      	movs	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	189b      	adds	r3, r3, r2
 80022b4:	00da      	lsls	r2, r3, #3
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	0d1b      	lsrs	r3, r3, #20
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	4353      	muls	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80022c0:	e068      	b.n	8002394 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	23c0      	movs	r3, #192	; 0xc0
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d10a      	bne.n	80022e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d107      	bne.n	80022e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	2117      	movs	r1, #23
 80022da:	187b      	adds	r3, r7, r1
 80022dc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	d055      	beq.n	8002394 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022e8:	f7fe fb4c 	bl	8000984 <HAL_GetTick>
 80022ec:	0002      	movs	r2, r0
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d902      	bls.n	80022fe <SPI_WaitFifoStateUntilTimeout+0x8a>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d142      	bne.n	8002384 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	21e0      	movs	r1, #224	; 0xe0
 800230a:	438a      	bics	r2, r1
 800230c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	2382      	movs	r3, #130	; 0x82
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	429a      	cmp	r2, r3
 8002318:	d113      	bne.n	8002342 <SPI_WaitFifoStateUntilTimeout+0xce>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	429a      	cmp	r2, r3
 8002324:	d005      	beq.n	8002332 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	429a      	cmp	r2, r3
 8002330:	d107      	bne.n	8002342 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2140      	movs	r1, #64	; 0x40
 800233e:	438a      	bics	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	019b      	lsls	r3, r3, #6
 800234a:	429a      	cmp	r2, r3
 800234c:	d110      	bne.n	8002370 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4916      	ldr	r1, [pc, #88]	; (80023b4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800235a:	400a      	ands	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0189      	lsls	r1, r1, #6
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	225d      	movs	r2, #93	; 0x5d
 8002374:	2101      	movs	r1, #1
 8002376:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	225c      	movs	r2, #92	; 0x5c
 800237c:	2100      	movs	r1, #0
 800237e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e010      	b.n	80023a6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	3b01      	subs	r3, #1
 8002392:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4013      	ands	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d18e      	bne.n	80022c2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b00a      	add	sp, #40	; 0x28
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	20000000 	.word	0x20000000
 80023b4:	ffffdfff 	.word	0xffffdfff

080023b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	23c0      	movs	r3, #192	; 0xc0
 80023c8:	0159      	lsls	r1, r3, #5
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	0013      	movs	r3, r2
 80023d2:	2200      	movs	r2, #0
 80023d4:	f7ff ff4e 	bl	8002274 <SPI_WaitFifoStateUntilTimeout>
 80023d8:	1e03      	subs	r3, r0, #0
 80023da:	d007      	beq.n	80023ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e0:	2220      	movs	r2, #32
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e027      	b.n	800243c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	0013      	movs	r3, r2
 80023f6:	2200      	movs	r2, #0
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	f7ff fead 	bl	8002158 <SPI_WaitFlagStateUntilTimeout>
 80023fe:	1e03      	subs	r3, r0, #0
 8002400:	d007      	beq.n	8002412 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002406:	2220      	movs	r2, #32
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e014      	b.n	800243c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	23c0      	movs	r3, #192	; 0xc0
 8002416:	00d9      	lsls	r1, r3, #3
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	0013      	movs	r3, r2
 8002420:	2200      	movs	r2, #0
 8002422:	f7ff ff27 	bl	8002274 <SPI_WaitFifoStateUntilTimeout>
 8002426:	1e03      	subs	r3, r0, #0
 8002428:	d007      	beq.n	800243a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	2220      	movs	r2, #32
 8002430:	431a      	orrs	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e000      	b.n	800243c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b004      	add	sp, #16
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e090      	b.n	800257a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	223d      	movs	r2, #61	; 0x3d
 800245c:	5c9b      	ldrb	r3, [r3, r2]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d107      	bne.n	8002474 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	223c      	movs	r2, #60	; 0x3c
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f7fe f93a 	bl	80006e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	223d      	movs	r2, #61	; 0x3d
 8002478:	2102      	movs	r1, #2
 800247a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	493f      	ldr	r1, [pc, #252]	; (8002584 <HAL_TIM_Encoder_Init+0x140>)
 8002488:	400a      	ands	r2, r1
 800248a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	0019      	movs	r1, r3
 8002496:	0010      	movs	r0, r2
 8002498:	f000 fa92 	bl	80029c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_TIM_Encoder_Init+0x144>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	4313      	orrs	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4a2c      	ldr	r2, [pc, #176]	; (800258c <HAL_TIM_Encoder_Init+0x148>)
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4a2b      	ldr	r2, [pc, #172]	; (8002590 <HAL_TIM_Encoder_Init+0x14c>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	4313      	orrs	r3, r2
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	011a      	lsls	r2, r3, #4
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	031b      	lsls	r3, r3, #12
 8002506:	4313      	orrs	r3, r2
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2222      	movs	r2, #34	; 0x22
 8002512:	4393      	bics	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2288      	movs	r2, #136	; 0x88
 800251a:	4393      	bics	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	4313      	orrs	r3, r2
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2248      	movs	r2, #72	; 0x48
 800254c:	2101      	movs	r1, #1
 800254e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	223e      	movs	r2, #62	; 0x3e
 8002554:	2101      	movs	r1, #1
 8002556:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	223f      	movs	r2, #63	; 0x3f
 800255c:	2101      	movs	r1, #1
 800255e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2244      	movs	r2, #68	; 0x44
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2245      	movs	r2, #69	; 0x45
 800256c:	2101      	movs	r1, #1
 800256e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	223d      	movs	r2, #61	; 0x3d
 8002574:	2101      	movs	r1, #1
 8002576:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b006      	add	sp, #24
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	fffebff8 	.word	0xfffebff8
 8002588:	fffffcfc 	.word	0xfffffcfc
 800258c:	fffff3f3 	.word	0xfffff3f3
 8002590:	ffff0f0f 	.word	0xffff0f0f

08002594 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800259e:	200f      	movs	r0, #15
 80025a0:	183b      	adds	r3, r7, r0
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	213e      	movs	r1, #62	; 0x3e
 80025a6:	5c52      	ldrb	r2, [r2, r1]
 80025a8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80025aa:	230e      	movs	r3, #14
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	213f      	movs	r1, #63	; 0x3f
 80025b2:	5c52      	ldrb	r2, [r2, r1]
 80025b4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80025b6:	240d      	movs	r4, #13
 80025b8:	193b      	adds	r3, r7, r4
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	2144      	movs	r1, #68	; 0x44
 80025be:	5c52      	ldrb	r2, [r2, r1]
 80025c0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80025c2:	230c      	movs	r3, #12
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	2145      	movs	r1, #69	; 0x45
 80025ca:	5c52      	ldrb	r2, [r2, r1]
 80025cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d112      	bne.n	80025fa <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025d4:	183b      	adds	r3, r7, r0
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d103      	bne.n	80025e4 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80025dc:	193b      	adds	r3, r7, r4
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d001      	beq.n	80025e8 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e095      	b.n	8002714 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	223e      	movs	r2, #62	; 0x3e
 80025ec:	2102      	movs	r1, #2
 80025ee:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2244      	movs	r2, #68	; 0x44
 80025f4:	2102      	movs	r1, #2
 80025f6:	5499      	strb	r1, [r3, r2]
 80025f8:	e03d      	b.n	8002676 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d114      	bne.n	800262a <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002600:	230e      	movs	r3, #14
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d104      	bne.n	8002614 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800260a:	230c      	movs	r3, #12
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d001      	beq.n	8002618 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e07d      	b.n	8002714 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	223f      	movs	r2, #63	; 0x3f
 800261c:	2102      	movs	r1, #2
 800261e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2245      	movs	r2, #69	; 0x45
 8002624:	2102      	movs	r1, #2
 8002626:	5499      	strb	r1, [r3, r2]
 8002628:	e025      	b.n	8002676 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800262a:	230f      	movs	r3, #15
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d10e      	bne.n	8002652 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002634:	230e      	movs	r3, #14
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d109      	bne.n	8002652 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800263e:	230d      	movs	r3, #13
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d104      	bne.n	8002652 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002648:	230c      	movs	r3, #12
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e05e      	b.n	8002714 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	223e      	movs	r2, #62	; 0x3e
 800265a:	2102      	movs	r1, #2
 800265c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	223f      	movs	r2, #63	; 0x3f
 8002662:	2102      	movs	r1, #2
 8002664:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2244      	movs	r2, #68	; 0x44
 800266a:	2102      	movs	r1, #2
 800266c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2245      	movs	r2, #69	; 0x45
 8002672:	2102      	movs	r1, #2
 8002674:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_TIM_Encoder_Start_IT+0xf0>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b04      	cmp	r3, #4
 8002680:	d010      	beq.n	80026a4 <HAL_TIM_Encoder_Start_IT+0x110>
 8002682:	e01f      	b.n	80026c4 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2201      	movs	r2, #1
 800268a:	2100      	movs	r1, #0
 800268c:	0018      	movs	r0, r3
 800268e:	f000 fa21 	bl	8002ad4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2102      	movs	r1, #2
 800269e:	430a      	orrs	r2, r1
 80026a0:	60da      	str	r2, [r3, #12]
      break;
 80026a2:	e02e      	b.n	8002702 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	2104      	movs	r1, #4
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 fa11 	bl	8002ad4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2104      	movs	r1, #4
 80026be:	430a      	orrs	r2, r1
 80026c0:	60da      	str	r2, [r3, #12]
      break;
 80026c2:	e01e      	b.n	8002702 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	2100      	movs	r1, #0
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 fa01 	bl	8002ad4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	2104      	movs	r1, #4
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 f9fa 	bl	8002ad4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2102      	movs	r1, #2
 80026ec:	430a      	orrs	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2104      	movs	r1, #4
 80026fc:	430a      	orrs	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]
      break;
 8002700:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b005      	add	sp, #20
 800271a:	bd90      	pop	{r4, r7, pc}

0800271c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d124      	bne.n	800277c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2202      	movs	r2, #2
 800273a:	4013      	ands	r3, r2
 800273c:	2b02      	cmp	r3, #2
 800273e:	d11d      	bne.n	800277c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2203      	movs	r2, #3
 8002746:	4252      	negs	r2, r2
 8002748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2203      	movs	r2, #3
 8002758:	4013      	ands	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	0018      	movs	r0, r3
 8002760:	f000 fa70 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002764:	e007      	b.n	8002776 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f000 f911 	bl	8002990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f915 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2204      	movs	r2, #4
 8002784:	4013      	ands	r3, r2
 8002786:	2b04      	cmp	r3, #4
 8002788:	d125      	bne.n	80027d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2204      	movs	r2, #4
 8002792:	4013      	ands	r3, r2
 8002794:	2b04      	cmp	r3, #4
 8002796:	d11e      	bne.n	80027d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2205      	movs	r2, #5
 800279e:	4252      	negs	r2, r2
 80027a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2202      	movs	r2, #2
 80027a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 fa43 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 80027be:	e007      	b.n	80027d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f000 f8e4 	bl	8002990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 f8e8 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2208      	movs	r2, #8
 80027de:	4013      	ands	r3, r2
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d124      	bne.n	800282e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2208      	movs	r2, #8
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d11d      	bne.n	800282e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2209      	movs	r2, #9
 80027f8:	4252      	negs	r2, r2
 80027fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2204      	movs	r2, #4
 8002800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2203      	movs	r2, #3
 800280a:	4013      	ands	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 fa17 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002816:	e007      	b.n	8002828 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	0018      	movs	r0, r3
 800281c:	f000 f8b8 	bl	8002990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	0018      	movs	r0, r3
 8002824:	f000 f8bc 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2210      	movs	r2, #16
 8002836:	4013      	ands	r3, r2
 8002838:	2b10      	cmp	r3, #16
 800283a:	d125      	bne.n	8002888 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2210      	movs	r2, #16
 8002844:	4013      	ands	r3, r2
 8002846:	2b10      	cmp	r3, #16
 8002848:	d11e      	bne.n	8002888 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2211      	movs	r2, #17
 8002850:	4252      	negs	r2, r2
 8002852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2208      	movs	r2, #8
 8002858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	23c0      	movs	r3, #192	; 0xc0
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4013      	ands	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f000 f9ea 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002870:	e007      	b.n	8002882 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f000 f88b 	bl	8002990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0018      	movs	r0, r3
 800287e:	f000 f88f 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2201      	movs	r2, #1
 8002890:	4013      	ands	r3, r2
 8002892:	2b01      	cmp	r3, #1
 8002894:	d10f      	bne.n	80028b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d108      	bne.n	80028b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2202      	movs	r2, #2
 80028aa:	4252      	negs	r2, r2
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 f865 	bl	8002980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2280      	movs	r2, #128	; 0x80
 80028be:	4013      	ands	r3, r2
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d10f      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b80      	cmp	r3, #128	; 0x80
 80028d0:	d108      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2281      	movs	r2, #129	; 0x81
 80028d8:	4252      	negs	r2, r2
 80028da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 f99a 	bl	8002c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	401a      	ands	r2, r3
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d10e      	bne.n	8002916 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	4013      	ands	r3, r2
 8002902:	2b80      	cmp	r3, #128	; 0x80
 8002904:	d107      	bne.n	8002916 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1c      	ldr	r2, [pc, #112]	; (800297c <HAL_TIM_IRQHandler+0x260>)
 800290c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f000 f989 	bl	8002c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	4013      	ands	r3, r2
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d10f      	bne.n	8002944 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2240      	movs	r2, #64	; 0x40
 800292c:	4013      	ands	r3, r2
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d108      	bne.n	8002944 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2241      	movs	r2, #65	; 0x41
 8002938:	4252      	negs	r2, r2
 800293a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	0018      	movs	r0, r3
 8002940:	f000 f836 	bl	80029b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2220      	movs	r2, #32
 800294c:	4013      	ands	r3, r2
 800294e:	2b20      	cmp	r3, #32
 8002950:	d10f      	bne.n	8002972 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	4013      	ands	r3, r2
 800295c:	2b20      	cmp	r3, #32
 800295e:	d108      	bne.n	8002972 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2221      	movs	r2, #33	; 0x21
 8002966:	4252      	negs	r2, r2
 8002968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	0018      	movs	r0, r3
 800296e:	f000 f94b 	bl	8002c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b002      	add	sp, #8
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	fffffeff 	.word	0xfffffeff

08002980 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b002      	add	sp, #8
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a38      	ldr	r2, [pc, #224]	; (8002ab4 <TIM_Base_SetConfig+0xf4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00c      	beq.n	80029f2 <TIM_Base_SetConfig+0x32>
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	429a      	cmp	r2, r3
 80029e0:	d007      	beq.n	80029f2 <TIM_Base_SetConfig+0x32>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <TIM_Base_SetConfig+0xf8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <TIM_Base_SetConfig+0x32>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a33      	ldr	r2, [pc, #204]	; (8002abc <TIM_Base_SetConfig+0xfc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2270      	movs	r2, #112	; 0x70
 80029f6:	4393      	bics	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a2b      	ldr	r2, [pc, #172]	; (8002ab4 <TIM_Base_SetConfig+0xf4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01c      	beq.n	8002a46 <TIM_Base_SetConfig+0x86>
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	05db      	lsls	r3, r3, #23
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d017      	beq.n	8002a46 <TIM_Base_SetConfig+0x86>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <TIM_Base_SetConfig+0xf8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <TIM_Base_SetConfig+0x86>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <TIM_Base_SetConfig+0xfc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00f      	beq.n	8002a46 <TIM_Base_SetConfig+0x86>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <TIM_Base_SetConfig+0x100>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00b      	beq.n	8002a46 <TIM_Base_SetConfig+0x86>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <TIM_Base_SetConfig+0x104>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <TIM_Base_SetConfig+0x86>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <TIM_Base_SetConfig+0x108>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d003      	beq.n	8002a46 <TIM_Base_SetConfig+0x86>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a22      	ldr	r2, [pc, #136]	; (8002acc <TIM_Base_SetConfig+0x10c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d108      	bne.n	8002a58 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a21      	ldr	r2, [pc, #132]	; (8002ad0 <TIM_Base_SetConfig+0x110>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	001a      	movs	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <TIM_Base_SetConfig+0xf4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00b      	beq.n	8002a9e <TIM_Base_SetConfig+0xde>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <TIM_Base_SetConfig+0x104>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <TIM_Base_SetConfig+0xde>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a0d      	ldr	r2, [pc, #52]	; (8002ac8 <TIM_Base_SetConfig+0x108>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d003      	beq.n	8002a9e <TIM_Base_SetConfig+0xde>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <TIM_Base_SetConfig+0x10c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d103      	bne.n	8002aa6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	615a      	str	r2, [r3, #20]
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b004      	add	sp, #16
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	40002000 	.word	0x40002000
 8002ac4:	40014000 	.word	0x40014000
 8002ac8:	40014400 	.word	0x40014400
 8002acc:	40014800 	.word	0x40014800
 8002ad0:	fffffcff 	.word	0xfffffcff

08002ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	221f      	movs	r2, #31
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	0013      	movs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	43d2      	mvns	r2, r2
 8002af6:	401a      	ands	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	211f      	movs	r1, #31
 8002b04:	400b      	ands	r3, r1
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4099      	lsls	r1, r3
 8002b0a:	000b      	movs	r3, r1
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b006      	add	sp, #24
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	223c      	movs	r2, #60	; 0x3c
 8002b2a:	5c9b      	ldrb	r3, [r3, r2]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e05a      	b.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	223c      	movs	r2, #60	; 0x3c
 8002b38:	2101      	movs	r1, #1
 8002b3a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	223d      	movs	r2, #61	; 0x3d
 8002b40:	2102      	movs	r1, #2
 8002b42:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a26      	ldr	r2, [pc, #152]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a25      	ldr	r2, [pc, #148]	; (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2270      	movs	r2, #112	; 0x70
 8002b74:	4393      	bics	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d014      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	05db      	lsls	r3, r3, #23
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d00e      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d009      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d004      	beq.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2280      	movs	r2, #128	; 0x80
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	223d      	movs	r2, #61	; 0x3d
 8002bdc:	2101      	movs	r1, #1
 8002bde:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	223c      	movs	r2, #60	; 0x3c
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	ff0fffff 	.word	0xff0fffff
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40014000 	.word	0x40014000

08002c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b002      	add	sp, #8
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <app_init>:
extern TIM_HandleTypeDef htim2;
uint8_t data_array[4];
uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

void app_init() {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0


}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c52:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8002c54:	601a      	str	r2, [r3, #0]
}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b002      	add	sp, #8
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	20000038 	.word	0x20000038

08002c64 <app_run>:

void app_run() {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0

//	uint8_t data_array[4];
//	uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
//	uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <app_run+0x6c>)
 8002c6a:	213c      	movs	r1, #60	; 0x3c
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7ff fc91 	bl	8002594 <HAL_TIM_Encoder_Start_IT>
	nrf24_init();
 8002c72:	f000 f835 	bl	8002ce0 <nrf24_init>

	nrf24_config(2, 1);
 8002c76:	2101      	movs	r1, #1
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f000 f83f 	bl	8002cfc <nrf24_config>

	nrf24_tx_address(tx_address);
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <app_run+0x70>)
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 f8a7 	bl	8002dd4 <nrf24_tx_address>
	nrf24_rx_address(rx_address);
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <app_run+0x74>)
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 f88f 	bl	8002dac <nrf24_rx_address>


	while(1){
		  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 8002c8e:	23a0      	movs	r3, #160	; 0xa0
 8002c90:	05db      	lsls	r3, r3, #23
 8002c92:	2201      	movs	r2, #1
 8002c94:	2120      	movs	r1, #32
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7fe f96a 	bl	8000f70 <HAL_GPIO_WritePin>
		  data_array[0]++;
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <app_run+0x78>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <app_run+0x78>)
 8002ca6:	701a      	strb	r2, [r3, #0]
		  nrf24_send(data_array);
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <app_run+0x78>)
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 f8a6 	bl	8002dfc <nrf24_send>
		  //nrf24_send(data_array);
		  HAL_Delay(50);
 8002cb0:	2032      	movs	r0, #50	; 0x32
 8002cb2:	f7fd fe71 	bl	8000998 <HAL_Delay>
		  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8002cb6:	23a0      	movs	r3, #160	; 0xa0
 8002cb8:	05db      	lsls	r3, r3, #23
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2120      	movs	r1, #32
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f7fe f956 	bl	8000f70 <HAL_GPIO_WritePin>

		  HAL_Delay(1000);
 8002cc4:	23fa      	movs	r3, #250	; 0xfa
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fd fe65 	bl	8000998 <HAL_Delay>
		  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 8002cce:	e7de      	b.n	8002c8e <app_run+0x2a>
 8002cd0:	200000a0 	.word	0x200000a0
 8002cd4:	2000000c 	.word	0x2000000c
 8002cd8:	20000014 	.word	0x20000014
 8002cdc:	200000f0 	.word	0x200000f0

08002ce0 <nrf24_init>:

uint8_t payload_len;

/* init the hardware pins */
void nrf24_init() 
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
    nrf24_setupPins();
 8002ce4:	f7fd fc43 	bl	800056e <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fd fc45 	bl	8000578 <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f7fd fc56 	bl	80005a0 <nrf24_csn_digitalWrite>
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <nrf24_config>:

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	0002      	movs	r2, r0
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	1dbb      	adds	r3, r7, #6
 8002d0a:	1c0a      	adds	r2, r1, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
	uint8_t teste = 0;
 8002d0e:	240f      	movs	r4, #15
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
    /* Use static payload length ... */
    payload_len = pay_length;
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <nrf24_config+0xac>)
 8002d18:	1dba      	adds	r2, r7, #6
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	701a      	strb	r2, [r3, #0]

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	0019      	movs	r1, r3
 8002d24:	2005      	movs	r0, #5
 8002d26:	f000 f927 	bl	8002f78 <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	2011      	movs	r0, #17
 8002d2e:	f000 f923 	bl	8002f78 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <nrf24_config+0xac>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	0019      	movs	r1, r3
 8002d38:	2012      	movs	r0, #18
 8002d3a:	f000 f91d 	bl	8002f78 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 8002d3e:	2100      	movs	r1, #0
 8002d40:	2013      	movs	r0, #19
 8002d42:	f000 f919 	bl	8002f78 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 8002d46:	2100      	movs	r1, #0
 8002d48:	2014      	movs	r0, #20
 8002d4a:	f000 f915 	bl	8002f78 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 8002d4e:	2100      	movs	r1, #0
 8002d50:	2015      	movs	r0, #21
 8002d52:	f000 f911 	bl	8002f78 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 8002d56:	2100      	movs	r1, #0
 8002d58:	2016      	movs	r0, #22
 8002d5a:	f000 f90d 	bl	8002f78 <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
 8002d5e:	2106      	movs	r1, #6
 8002d60:	2006      	movs	r0, #6
 8002d62:	f000 f909 	bl	8002f78 <nrf24_configRegister>
    nrf24_readRegister(RF_SETUP, &teste, 1);
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	2201      	movs	r2, #1
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	2006      	movs	r0, #6
 8002d6e:	f000 f926 	bl	8002fbe <nrf24_readRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 8002d72:	2108      	movs	r1, #8
 8002d74:	2000      	movs	r0, #0
 8002d76:	f000 f8ff 	bl	8002f78 <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 8002d7a:	2103      	movs	r1, #3
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f000 f8fb 	bl	8002f78 <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 8002d82:	2103      	movs	r1, #3
 8002d84:	2002      	movs	r0, #2
 8002d86:	f000 f8f7 	bl	8002f78 <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 8002d8a:	214f      	movs	r1, #79	; 0x4f
 8002d8c:	2004      	movs	r0, #4
 8002d8e:	f000 f8f3 	bl	8002f78 <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 8002d92:	2100      	movs	r1, #0
 8002d94:	201c      	movs	r0, #28
 8002d96:	f000 f8ef 	bl	8002f78 <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
 8002d9a:	f000 f85b 	bl	8002e54 <nrf24_powerUpRx>
}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b005      	add	sp, #20
 8002da4:	bd90      	pop	{r4, r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	200000f4 	.word	0x200000f4

08002dac <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
    nrf24_ce_digitalWrite(LOW);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fd fbdf 	bl	8000578 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2205      	movs	r2, #5
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	200a      	movs	r0, #10
 8002dc2:	f000 f920 	bl	8003006 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f7fd fbd6 	bl	8000578 <nrf24_ce_digitalWrite>
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2205      	movs	r2, #5
 8002de0:	0019      	movs	r1, r3
 8002de2:	200a      	movs	r0, #10
 8002de4:	f000 f90f 	bl	8003006 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2205      	movs	r2, #5
 8002dec:	0019      	movs	r1, r3
 8002dee:	2010      	movs	r0, #16
 8002df0:	f000 f909 	bl	8003006 <nrf24_writeRegister>
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7fd fbb7 	bl	8000578 <nrf24_ce_digitalWrite>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
 8002e0a:	f000 f83f 	bl	8002e8c <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fd fbc6 	bl	80005a0 <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
 8002e14:	20e1      	movs	r0, #225	; 0xe1
 8002e16:	f000 f846 	bl	8002ea6 <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);                    
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f7fd fbc0 	bl	80005a0 <nrf24_csn_digitalWrite>
    #endif 

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fd fbbd 	bl	80005a0 <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
 8002e26:	20a0      	movs	r0, #160	; 0xa0
 8002e28:	f000 f83d 	bl	8002ea6 <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <nrf24_send+0x54>)
 8002e2e:	781a      	ldrb	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0011      	movs	r1, r2
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f879 	bl	8002f2c <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f7fd fbb0 	bl	80005a0 <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);    
 8002e40:	2001      	movs	r0, #1
 8002e42:	f7fd fb99 	bl	8000578 <nrf24_ce_digitalWrite>
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	200000f4 	.word	0x200000f4

08002e54 <nrf24_powerUpRx>:
        return 0xFF;
    }
}

void nrf24_powerUpRx()
{     
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
    nrf24_csn_digitalWrite(LOW);
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7fd fba1 	bl	80005a0 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
 8002e5e:	20e2      	movs	r0, #226	; 0xe2
 8002e60:	f000 f821 	bl	8002ea6 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 8002e64:	2001      	movs	r0, #1
 8002e66:	f7fd fb9b 	bl	80005a0 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 8002e6a:	2170      	movs	r1, #112	; 0x70
 8002e6c:	2007      	movs	r0, #7
 8002e6e:	f000 f883 	bl	8002f78 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fd fb80 	bl	8000578 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 8002e78:	210b      	movs	r1, #11
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f000 f87c 	bl	8002f78 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
 8002e80:	2001      	movs	r0, #1
 8002e82:	f7fd fb79 	bl	8000578 <nrf24_ce_digitalWrite>
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 8002e90:	2170      	movs	r1, #112	; 0x70
 8002e92:	2007      	movs	r0, #7
 8002e94:	f000 f870 	bl	8002f78 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 8002e98:	210a      	movs	r1, #10
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f000 f86c 	bl	8002f78 <nrf24_configRegister>
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
 8002ea6:	b5b0      	push	{r4, r5, r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	0002      	movs	r2, r0
 8002eae:	1dfb      	adds	r3, r7, #7
 8002eb0:	701a      	strb	r2, [r3, #0]
    uint8_t rx = 0;    
 8002eb2:	250f      	movs	r5, #15
 8002eb4:	197b      	adds	r3, r7, r5
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]

    rx = nrf24_spi_transfer(&tx);
 8002eba:	197c      	adds	r4, r7, r5
 8002ebc:	1dfb      	adds	r3, r7, #7
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7fd fb82 	bl	80005c8 <nrf24_spi_transfer>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	7023      	strb	r3, [r4, #0]

    return rx;
 8002ec8:	197b      	adds	r3, r7, r5
 8002eca:	781b      	ldrb	r3, [r3, #0]
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b004      	add	sp, #16
 8002ed2:	bdb0      	pop	{r4, r5, r7, pc}

08002ed4 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
 8002ed4:	b5b0      	push	{r4, r5, r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	1dfb      	adds	r3, r7, #7
 8002ee0:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for(i=0;i<len;i++)
 8002ee2:	2317      	movs	r3, #23
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e013      	b.n	8002f14 <nrf24_transferSync+0x40>
    {
        datain[i] = spi_transfer(dataout[i]);
 8002eec:	2517      	movs	r5, #23
 8002eee:	197b      	adds	r3, r7, r5
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	18d3      	adds	r3, r2, r3
 8002ef6:	7819      	ldrb	r1, [r3, #0]
 8002ef8:	197b      	adds	r3, r7, r5
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	18d4      	adds	r4, r2, r3
 8002f00:	0008      	movs	r0, r1
 8002f02:	f7ff ffd0 	bl	8002ea6 <spi_transfer>
 8002f06:	0003      	movs	r3, r0
 8002f08:	7023      	strb	r3, [r4, #0]
    for(i=0;i<len;i++)
 8002f0a:	197b      	adds	r3, r7, r5
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	197b      	adds	r3, r7, r5
 8002f10:	3201      	adds	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	2317      	movs	r3, #23
 8002f16:	18fa      	adds	r2, r7, r3
 8002f18:	1dfb      	adds	r3, r7, #7
 8002f1a:	7812      	ldrb	r2, [r2, #0]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d3e4      	bcc.n	8002eec <nrf24_transferSync+0x18>
    }

}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b006      	add	sp, #24
 8002f2a:	bdb0      	pop	{r4, r5, r7, pc}

08002f2c <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	000a      	movs	r2, r1
 8002f36:	1cfb      	adds	r3, r7, #3
 8002f38:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    
    for(i=0;i<len;i++)
 8002f3a:	230f      	movs	r3, #15
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e00d      	b.n	8002f60 <nrf24_transmitSync+0x34>
    {
        spi_transfer(dataout[i]);
 8002f44:	240f      	movs	r4, #15
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	18d3      	adds	r3, r2, r3
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7ff ffa8 	bl	8002ea6 <spi_transfer>
    for(i=0;i<len;i++)
 8002f56:	193b      	adds	r3, r7, r4
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	193b      	adds	r3, r7, r4
 8002f5c:	3201      	adds	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	230f      	movs	r3, #15
 8002f62:	18fa      	adds	r2, r7, r3
 8002f64:	1cfb      	adds	r3, r7, #3
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d3ea      	bcc.n	8002f44 <nrf24_transmitSync+0x18>
    }

}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b005      	add	sp, #20
 8002f76:	bd90      	pop	{r4, r7, pc}

08002f78 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	0002      	movs	r2, r0
 8002f80:	1dfb      	adds	r3, r7, #7
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	1dbb      	adds	r3, r7, #6
 8002f86:	1c0a      	adds	r2, r1, #0
 8002f88:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fd fb08 	bl	80005a0 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 8002f90:	1dfb      	adds	r3, r7, #7
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	221f      	movs	r2, #31
 8002f96:	4013      	ands	r3, r2
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7ff ff80 	bl	8002ea6 <spi_transfer>
    spi_transfer(value);
 8002fa6:	1dbb      	adds	r3, r7, #6
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7ff ff7b 	bl	8002ea6 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f7fd faf5 	bl	80005a0 <nrf24_csn_digitalWrite>
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6039      	str	r1, [r7, #0]
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	1c02      	adds	r2, r0, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	1dbb      	adds	r3, r7, #6
 8002fd0:	1c0a      	adds	r2, r1, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fd fae3 	bl	80005a0 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 8002fda:	1dfb      	adds	r3, r7, #7
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	221f      	movs	r2, #31
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7ff ff5e 	bl	8002ea6 <spi_transfer>
    nrf24_transferSync(value,value,len);
 8002fea:	1dbb      	adds	r3, r7, #6
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff ff6e 	bl	8002ed4 <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f7fd fad1 	bl	80005a0 <nrf24_csn_digitalWrite>
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b002      	add	sp, #8
 8003004:	bd80      	pop	{r7, pc}

08003006 <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	0011      	movs	r1, r2
 8003010:	1dfb      	adds	r3, r7, #7
 8003012:	1c02      	adds	r2, r0, #0
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	1dbb      	adds	r3, r7, #6
 8003018:	1c0a      	adds	r2, r1, #0
 800301a:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 800301c:	2000      	movs	r0, #0
 800301e:	f7fd fabf 	bl	80005a0 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	221f      	movs	r2, #31
 8003028:	4013      	ands	r3, r2
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2220      	movs	r2, #32
 800302e:	4313      	orrs	r3, r2
 8003030:	b2db      	uxtb	r3, r3
 8003032:	0018      	movs	r0, r3
 8003034:	f7ff ff37 	bl	8002ea6 <spi_transfer>
    nrf24_transmitSync(value,len);
 8003038:	1dbb      	adds	r3, r7, #6
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	0011      	movs	r1, r2
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff ff73 	bl	8002f2c <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 8003046:	2001      	movs	r0, #1
 8003048:	f7fd faaa 	bl	80005a0 <nrf24_csn_digitalWrite>
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <__libc_init_array>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	2600      	movs	r6, #0
 8003058:	4d0c      	ldr	r5, [pc, #48]	; (800308c <__libc_init_array+0x38>)
 800305a:	4c0d      	ldr	r4, [pc, #52]	; (8003090 <__libc_init_array+0x3c>)
 800305c:	1b64      	subs	r4, r4, r5
 800305e:	10a4      	asrs	r4, r4, #2
 8003060:	42a6      	cmp	r6, r4
 8003062:	d109      	bne.n	8003078 <__libc_init_array+0x24>
 8003064:	2600      	movs	r6, #0
 8003066:	f000 f821 	bl	80030ac <_init>
 800306a:	4d0a      	ldr	r5, [pc, #40]	; (8003094 <__libc_init_array+0x40>)
 800306c:	4c0a      	ldr	r4, [pc, #40]	; (8003098 <__libc_init_array+0x44>)
 800306e:	1b64      	subs	r4, r4, r5
 8003070:	10a4      	asrs	r4, r4, #2
 8003072:	42a6      	cmp	r6, r4
 8003074:	d105      	bne.n	8003082 <__libc_init_array+0x2e>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	00b3      	lsls	r3, r6, #2
 800307a:	58eb      	ldr	r3, [r5, r3]
 800307c:	4798      	blx	r3
 800307e:	3601      	adds	r6, #1
 8003080:	e7ee      	b.n	8003060 <__libc_init_array+0xc>
 8003082:	00b3      	lsls	r3, r6, #2
 8003084:	58eb      	ldr	r3, [r5, r3]
 8003086:	4798      	blx	r3
 8003088:	3601      	adds	r6, #1
 800308a:	e7f2      	b.n	8003072 <__libc_init_array+0x1e>
 800308c:	08003104 	.word	0x08003104
 8003090:	08003104 	.word	0x08003104
 8003094:	08003104 	.word	0x08003104
 8003098:	08003108 	.word	0x08003108

0800309c <memset>:
 800309c:	0003      	movs	r3, r0
 800309e:	1882      	adds	r2, r0, r2
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	7019      	strb	r1, [r3, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <_init>:
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b2:	bc08      	pop	{r3}
 80030b4:	469e      	mov	lr, r3
 80030b6:	4770      	bx	lr

080030b8 <_fini>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030be:	bc08      	pop	{r3}
 80030c0:	469e      	mov	lr, r3
 80030c2:	4770      	bx	lr
