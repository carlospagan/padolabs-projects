
TBJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002290  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800238c  0800238c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800238c  0800238c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800238c  0800238c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800238c  0800238c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000001c  080023b0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080023b0  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097c7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a62  00000000  00000000  0002980b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0002b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab96  00000000  00000000  0002c238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008de6  00000000  00000000  00046dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aade5  00000000  00000000  0004fbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa999  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bdc  00000000  00000000  000fa9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002334 	.word	0x08002334

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08002334 	.word	0x08002334

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa18 	bl	8000654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f809 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f88e 	bl	8000348 <MX_GPIO_Init>
  MX_SPI1_Init();
 800022c:	f000 f84e 	bl	80002cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000230:	f001 fe3e 	bl	8001eb0 <app_init>

  app_run();
 8000234:	f001 fe42 	bl	8001ebc <app_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x1c>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b590      	push	{r4, r7, lr}
 800023c:	b095      	sub	sp, #84	; 0x54
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	2414      	movs	r4, #20
 8000242:	193b      	adds	r3, r7, r4
 8000244:	0018      	movs	r0, r3
 8000246:	233c      	movs	r3, #60	; 0x3c
 8000248:	001a      	movs	r2, r3
 800024a:	2100      	movs	r1, #0
 800024c:	f002 f86a 	bl	8002324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	0018      	movs	r0, r3
 8000254:	2310      	movs	r3, #16
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f002 f863 	bl	8002324 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fcf4 	bl	8000c50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	193b      	adds	r3, r7, r4
 800026a:	2202      	movs	r2, #2
 800026c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	193b      	adds	r3, r7, r4
 8000270:	2280      	movs	r2, #128	; 0x80
 8000272:	0052      	lsls	r2, r2, #1
 8000274:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2240      	movs	r2, #64	; 0x40
 8000280:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2200      	movs	r2, #0
 8000286:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	f000 fd20 	bl	8000cd0 <HAL_RCC_OscConfig>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000294:	f000 f8de 	bl	8000454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2207      	movs	r2, #7
 800029c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2100      	movs	r1, #0
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 f871 	bl	800139c <HAL_RCC_ClockConfig>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002be:	f000 f8c9 	bl	8000454 <Error_Handler>
  }
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	b015      	add	sp, #84	; 0x54
 80002c8:	bd90      	pop	{r4, r7, pc}
	...

080002cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_SPI1_Init+0x74>)
 80002d2:	4a1c      	ldr	r2, [pc, #112]	; (8000344 <MX_SPI1_Init+0x78>)
 80002d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002d6:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <MX_SPI1_Init+0x74>)
 80002d8:	2282      	movs	r2, #130	; 0x82
 80002da:	0052      	lsls	r2, r2, #1
 80002dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_SPI1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <MX_SPI1_Init+0x74>)
 80002e6:	22e0      	movs	r2, #224	; 0xe0
 80002e8:	00d2      	lsls	r2, r2, #3
 80002ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <MX_SPI1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <MX_SPI1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_SPI1_Init+0x74>)
 80002fa:	2280      	movs	r2, #128	; 0x80
 80002fc:	0092      	lsls	r2, r2, #2
 80002fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_SPI1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_SPI1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_SPI1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_SPI1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_SPI1_Init+0x74>)
 800031a:	2207      	movs	r2, #7
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_SPI1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_SPI1_Init+0x74>)
 8000326:	2208      	movs	r2, #8
 8000328:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800032a:	4b05      	ldr	r3, [pc, #20]	; (8000340 <MX_SPI1_Init+0x74>)
 800032c:	0018      	movs	r0, r3
 800032e:	f001 f9bf 	bl	80016b0 <HAL_SPI_Init>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000336:	f000 f88d 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000038 	.word	0x20000038
 8000344:	40013000 	.word	0x40013000

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b089      	sub	sp, #36	; 0x24
 800034c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	240c      	movs	r4, #12
 8000350:	193b      	adds	r3, r7, r4
 8000352:	0018      	movs	r0, r3
 8000354:	2314      	movs	r3, #20
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f001 ffe3 	bl	8002324 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b3a      	ldr	r3, [pc, #232]	; (8000448 <MX_GPIO_Init+0x100>)
 8000360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000362:	4b39      	ldr	r3, [pc, #228]	; (8000448 <MX_GPIO_Init+0x100>)
 8000364:	2101      	movs	r1, #1
 8000366:	430a      	orrs	r2, r1
 8000368:	635a      	str	r2, [r3, #52]	; 0x34
 800036a:	4b37      	ldr	r3, [pc, #220]	; (8000448 <MX_GPIO_Init+0x100>)
 800036c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800036e:	2201      	movs	r2, #1
 8000370:	4013      	ands	r3, r2
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000376:	4b34      	ldr	r3, [pc, #208]	; (8000448 <MX_GPIO_Init+0x100>)
 8000378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800037a:	4b33      	ldr	r3, [pc, #204]	; (8000448 <MX_GPIO_Init+0x100>)
 800037c:	2104      	movs	r1, #4
 800037e:	430a      	orrs	r2, r1
 8000380:	635a      	str	r2, [r3, #52]	; 0x34
 8000382:	4b31      	ldr	r3, [pc, #196]	; (8000448 <MX_GPIO_Init+0x100>)
 8000384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000386:	2204      	movs	r2, #4
 8000388:	4013      	ands	r3, r2
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038e:	4b2e      	ldr	r3, [pc, #184]	; (8000448 <MX_GPIO_Init+0x100>)
 8000390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000392:	4b2d      	ldr	r3, [pc, #180]	; (8000448 <MX_GPIO_Init+0x100>)
 8000394:	2108      	movs	r1, #8
 8000396:	430a      	orrs	r2, r1
 8000398:	635a      	str	r2, [r3, #52]	; 0x34
 800039a:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <MX_GPIO_Init+0x100>)
 800039c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800039e:	2208      	movs	r2, #8
 80003a0:	4013      	ands	r3, r2
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80003a6:	23a0      	movs	r3, #160	; 0xa0
 80003a8:	05db      	lsls	r3, r3, #23
 80003aa:	2200      	movs	r2, #0
 80003ac:	2120      	movs	r1, #32
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 fc30 	bl	8000c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IRQ_GPIO_Port, IRQ_Pin, GPIO_PIN_RESET);
 80003b4:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_GPIO_Init+0x104>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	2120      	movs	r1, #32
 80003ba:	0018      	movs	r0, r3
 80003bc:	f000 fc2a 	bl	8000c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80003c0:	23c0      	movs	r3, #192	; 0xc0
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	4822      	ldr	r0, [pc, #136]	; (8000450 <MX_GPIO_Init+0x108>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	0019      	movs	r1, r3
 80003ca:	f000 fc23 	bl	8000c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80003ce:	193b      	adds	r3, r7, r4
 80003d0:	2220      	movs	r2, #32
 80003d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	2201      	movs	r2, #1
 80003d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	193b      	adds	r3, r7, r4
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80003e6:	193a      	adds	r2, r7, r4
 80003e8:	23a0      	movs	r3, #160	; 0xa0
 80003ea:	05db      	lsls	r3, r3, #23
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 faa4 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	2220      	movs	r2, #32
 80003f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	2201      	movs	r2, #1
 80003fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	193b      	adds	r3, r7, r4
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	193b      	adds	r3, r7, r4
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800040c:	193b      	adds	r3, r7, r4
 800040e:	4a0f      	ldr	r2, [pc, #60]	; (800044c <MX_GPIO_Init+0x104>)
 8000410:	0019      	movs	r1, r3
 8000412:	0010      	movs	r0, r2
 8000414:	f000 fa92 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000418:	0021      	movs	r1, r4
 800041a:	187b      	adds	r3, r7, r1
 800041c:	22c0      	movs	r2, #192	; 0xc0
 800041e:	0092      	lsls	r2, r2, #2
 8000420:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2201      	movs	r2, #1
 8000426:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000434:	187b      	adds	r3, r7, r1
 8000436:	4a06      	ldr	r2, [pc, #24]	; (8000450 <MX_GPIO_Init+0x108>)
 8000438:	0019      	movs	r1, r3
 800043a:	0010      	movs	r0, r2
 800043c:	f000 fa7e 	bl	800093c <HAL_GPIO_Init>

}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b009      	add	sp, #36	; 0x24
 8000446:	bd90      	pop	{r4, r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	50000800 	.word	0x50000800
 8000450:	50000c00 	.word	0x50000c00

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>

0800045e <nrf24_setupPins>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;

void nrf24_setupPins()
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0

}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	0002      	movs	r2, r0
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, state);
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <nrf24_ce_digitalWrite+0x24>)
 800047e:	0019      	movs	r1, r3
 8000480:	f000 fbc8 	bl	8000c14 <HAL_GPIO_WritePin>
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b002      	add	sp, #8
 800048a:	bd80      	pop	{r7, pc}
 800048c:	50000c00 	.word	0x50000c00

08000490 <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	0002      	movs	r2, r0
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, state);
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	781a      	ldrb	r2, [r3, #0]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <nrf24_csn_digitalWrite+0x24>)
 80004a6:	0019      	movs	r1, r3
 80004a8:	f000 fbb4 	bl	8000c14 <HAL_GPIO_WritePin>
}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b002      	add	sp, #8
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	50000c00 	.word	0x50000c00

080004b8 <nrf24_spi_transfer>:
{
	return 0;
}
/* ------------------------------------------------------------------------- */

uint8_t nrf24_spi_transfer(uint8_t *tx){
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af02      	add	r7, sp, #8
 80004be:	6078      	str	r0, [r7, #4]
	uint8_t rx;

	HAL_SPI_TransmitReceive(&hspi1, tx, &rx, 1, 100);
 80004c0:	240f      	movs	r4, #15
 80004c2:	193a      	adds	r2, r7, r4
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	4806      	ldr	r0, [pc, #24]	; (80004e0 <nrf24_spi_transfer+0x28>)
 80004c8:	2364      	movs	r3, #100	; 0x64
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2301      	movs	r3, #1
 80004ce:	f001 f9a7 	bl	8001820 <HAL_SPI_TransmitReceive>

	return rx;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	781b      	ldrb	r3, [r3, #0]
}
 80004d6:	0018      	movs	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	b005      	add	sp, #20
 80004dc:	bd90      	pop	{r4, r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	20000038 	.word	0x20000038

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <HAL_MspInit+0x4c>)
 80004ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <HAL_MspInit+0x4c>)
 80004f0:	2101      	movs	r1, #1
 80004f2:	430a      	orrs	r2, r1
 80004f4:	641a      	str	r2, [r3, #64]	; 0x40
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_MspInit+0x4c>)
 80004f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fa:	2201      	movs	r2, #1
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_MspInit+0x4c>)
 8000504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_MspInit+0x4c>)
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	0549      	lsls	r1, r1, #21
 800050c:	430a      	orrs	r2, r1
 800050e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <HAL_MspInit+0x4c>)
 8000512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	055b      	lsls	r3, r3, #21
 8000518:	4013      	ands	r3, r2
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800051e:	23c0      	movs	r3, #192	; 0xc0
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	0018      	movs	r0, r3
 8000524:	f000 f940 	bl	80007a8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000

08000534 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b08b      	sub	sp, #44	; 0x2c
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	2414      	movs	r4, #20
 800053e:	193b      	adds	r3, r7, r4
 8000540:	0018      	movs	r0, r3
 8000542:	2314      	movs	r3, #20
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f001 feec 	bl	8002324 <memset>
  if(hspi->Instance==SPI1)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <HAL_SPI_MspInit+0x8c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d130      	bne.n	80005b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <HAL_SPI_MspInit+0x90>)
 8000558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <HAL_SPI_MspInit+0x90>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0149      	lsls	r1, r1, #5
 8000560:	430a      	orrs	r2, r1
 8000562:	641a      	str	r2, [r3, #64]	; 0x40
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <HAL_SPI_MspInit+0x90>)
 8000566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	015b      	lsls	r3, r3, #5
 800056c:	4013      	ands	r3, r2
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <HAL_SPI_MspInit+0x90>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <HAL_SPI_MspInit+0x90>)
 8000578:	2101      	movs	r1, #1
 800057a:	430a      	orrs	r2, r1
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_SPI_MspInit+0x90>)
 8000580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000582:	2201      	movs	r2, #1
 8000584:	4013      	ands	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 800058a:	0021      	movs	r1, r4
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2246      	movs	r2, #70	; 0x46
 8000590:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2202      	movs	r2, #2
 8000596:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	187a      	adds	r2, r7, r1
 80005ac:	23a0      	movs	r3, #160	; 0xa0
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	0011      	movs	r1, r2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 f9c2 	bl	800093c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b00b      	add	sp, #44	; 0x2c
 80005be:	bd90      	pop	{r4, r7, pc}
 80005c0:	40013000 	.word	0x40013000
 80005c4:	40021000 	.word	0x40021000

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <NMI_Handler+0x4>

080005ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <HardFault_Handler+0x4>

080005d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ec:	f000 f89c 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000602:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000604:	f7ff fff7 	bl	80005f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062e:	f001 fe55 	bl	80022dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000632:	f7ff fdf3 	bl	800021c <main>

08000636 <LoopForever>:

LoopForever:
  b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   r0, =_estack
 8000638:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000644:	08002394 	.word	0x08002394
  ldr r2, =_sbss
 8000648:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800064c:	200000b4 	.word	0x200000b4

08000650 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_COMP_IRQHandler>
	...

08000654 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <HAL_Init+0x3c>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_Init+0x3c>)
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	0049      	lsls	r1, r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800066e:	2003      	movs	r0, #3
 8000670:	f000 f810 	bl	8000694 <HAL_InitTick>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d003      	beq.n	8000680 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e001      	b.n	8000684 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff ff30 	bl	80004e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
}
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800069c:	230f      	movs	r3, #15
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <HAL_InitTick+0x88>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d02b      	beq.n	8000704 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <HAL_InitTick+0x8c>)
 80006ae:	681c      	ldr	r4, [r3, #0]
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <HAL_InitTick+0x88>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	0019      	movs	r1, r3
 80006b6:	23fa      	movs	r3, #250	; 0xfa
 80006b8:	0098      	lsls	r0, r3, #2
 80006ba:	f7ff fd23 	bl	8000104 <__udivsi3>
 80006be:	0003      	movs	r3, r0
 80006c0:	0019      	movs	r1, r3
 80006c2:	0020      	movs	r0, r4
 80006c4:	f7ff fd1e 	bl	8000104 <__udivsi3>
 80006c8:	0003      	movs	r3, r0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f929 	bl	8000922 <HAL_SYSTICK_Config>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d112      	bne.n	80006fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d80a      	bhi.n	80006f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	2301      	movs	r3, #1
 80006de:	425b      	negs	r3, r3
 80006e0:	2200      	movs	r2, #0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 f908 	bl	80008f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_InitTick+0x90>)
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	e00d      	b.n	800070c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006f0:	230f      	movs	r3, #15
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	e008      	b.n	800070c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006fa:	230f      	movs	r3, #15
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e003      	b.n	800070c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000704:	230f      	movs	r3, #15
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800070c:	230f      	movs	r3, #15
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	781b      	ldrb	r3, [r3, #0]
}
 8000712:	0018      	movs	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	b005      	add	sp, #20
 8000718:	bd90      	pop	{r4, r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000008 	.word	0x20000008
 8000720:	20000000 	.word	0x20000000
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_IncTick+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	001a      	movs	r2, r3
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x20>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	18d2      	adds	r2, r2, r3
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <HAL_IncTick+0x20>)
 800073a:	601a      	str	r2, [r3, #0]
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000008 	.word	0x20000008
 8000748:	2000009c 	.word	0x2000009c

0800074c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b02      	ldr	r3, [pc, #8]	; (800075c <HAL_GetTick+0x10>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	2000009c 	.word	0x2000009c

08000760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000768:	f7ff fff0 	bl	800074c <HAL_GetTick>
 800076c:	0003      	movs	r3, r0
 800076e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	d005      	beq.n	8000786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_Delay+0x44>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	001a      	movs	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	189b      	adds	r3, r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	f7ff ffe0 	bl	800074c <HAL_GetTick>
 800078c:	0002      	movs	r2, r0
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	429a      	cmp	r2, r3
 8000796:	d8f7      	bhi.n	8000788 <HAL_Delay+0x28>
  {
  }
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b004      	add	sp, #16
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	20000008 	.word	0x20000008

080007a8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80007b6:	4013      	ands	r3, r2
 80007b8:	0019      	movs	r1, r3
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	430a      	orrs	r2, r1
 80007c0:	601a      	str	r2, [r3, #0]
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40010000 	.word	0x40010000
 80007d0:	fffff9ff 	.word	0xfffff9ff

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	0002      	movs	r2, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b7f      	cmp	r3, #127	; 0x7f
 80007e8:	d828      	bhi.n	800083c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ea:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <__NVIC_SetPriority+0xd4>)
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	089b      	lsrs	r3, r3, #2
 80007f4:	33c0      	adds	r3, #192	; 0xc0
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	589b      	ldr	r3, [r3, r2]
 80007fa:	1dfa      	adds	r2, r7, #7
 80007fc:	7812      	ldrb	r2, [r2, #0]
 80007fe:	0011      	movs	r1, r2
 8000800:	2203      	movs	r2, #3
 8000802:	400a      	ands	r2, r1
 8000804:	00d2      	lsls	r2, r2, #3
 8000806:	21ff      	movs	r1, #255	; 0xff
 8000808:	4091      	lsls	r1, r2
 800080a:	000a      	movs	r2, r1
 800080c:	43d2      	mvns	r2, r2
 800080e:	401a      	ands	r2, r3
 8000810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	019b      	lsls	r3, r3, #6
 8000816:	22ff      	movs	r2, #255	; 0xff
 8000818:	401a      	ands	r2, r3
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	0018      	movs	r0, r3
 8000820:	2303      	movs	r3, #3
 8000822:	4003      	ands	r3, r0
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000828:	481f      	ldr	r0, [pc, #124]	; (80008a8 <__NVIC_SetPriority+0xd4>)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b25b      	sxtb	r3, r3
 8000830:	089b      	lsrs	r3, r3, #2
 8000832:	430a      	orrs	r2, r1
 8000834:	33c0      	adds	r3, #192	; 0xc0
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800083a:	e031      	b.n	80008a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083c:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <__NVIC_SetPriority+0xd8>)
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0019      	movs	r1, r3
 8000844:	230f      	movs	r3, #15
 8000846:	400b      	ands	r3, r1
 8000848:	3b08      	subs	r3, #8
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	3306      	adds	r3, #6
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	3304      	adds	r3, #4
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	1dfa      	adds	r2, r7, #7
 8000858:	7812      	ldrb	r2, [r2, #0]
 800085a:	0011      	movs	r1, r2
 800085c:	2203      	movs	r2, #3
 800085e:	400a      	ands	r2, r1
 8000860:	00d2      	lsls	r2, r2, #3
 8000862:	21ff      	movs	r1, #255	; 0xff
 8000864:	4091      	lsls	r1, r2
 8000866:	000a      	movs	r2, r1
 8000868:	43d2      	mvns	r2, r2
 800086a:	401a      	ands	r2, r3
 800086c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	019b      	lsls	r3, r3, #6
 8000872:	22ff      	movs	r2, #255	; 0xff
 8000874:	401a      	ands	r2, r3
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	0018      	movs	r0, r3
 800087c:	2303      	movs	r3, #3
 800087e:	4003      	ands	r3, r0
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <__NVIC_SetPriority+0xd8>)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	001c      	movs	r4, r3
 800088c:	230f      	movs	r3, #15
 800088e:	4023      	ands	r3, r4
 8000890:	3b08      	subs	r3, #8
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	430a      	orrs	r2, r1
 8000896:	3306      	adds	r3, #6
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	18c3      	adds	r3, r0, r3
 800089c:	3304      	adds	r3, #4
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b003      	add	sp, #12
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	045b      	lsls	r3, r3, #17
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d301      	bcc.n	80008c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c4:	2301      	movs	r3, #1
 80008c6:	e010      	b.n	80008ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <SysTick_Config+0x44>)
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	3a01      	subs	r2, #1
 80008ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d0:	2301      	movs	r3, #1
 80008d2:	425b      	negs	r3, r3
 80008d4:	2103      	movs	r1, #3
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff ff7c 	bl	80007d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <SysTick_Config+0x44>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <SysTick_Config+0x44>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	210f      	movs	r1, #15
 8000904:	187b      	adds	r3, r7, r1
 8000906:	1c02      	adds	r2, r0, #0
 8000908:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	187b      	adds	r3, r7, r1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b25b      	sxtb	r3, r3
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f7ff ff5d 	bl	80007d4 <__NVIC_SetPriority>
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b004      	add	sp, #16
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff ffbf 	bl	80008b0 <SysTick_Config>
 8000932:	0003      	movs	r3, r0
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b002      	add	sp, #8
 800093a:	bd80      	pop	{r7, pc}

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e14d      	b.n	8000be8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4091      	lsls	r1, r2
 8000956:	000a      	movs	r2, r1
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d100      	bne.n	8000964 <HAL_GPIO_Init+0x28>
 8000962:	e13e      	b.n	8000be2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2203      	movs	r2, #3
 800096a:	4013      	ands	r3, r2
 800096c:	2b01      	cmp	r3, #1
 800096e:	d005      	beq.n	800097c <HAL_GPIO_Init+0x40>
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2203      	movs	r2, #3
 8000976:	4013      	ands	r3, r2
 8000978:	2b02      	cmp	r3, #2
 800097a:	d130      	bne.n	80009de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	2203      	movs	r2, #3
 8000988:	409a      	lsls	r2, r3
 800098a:	0013      	movs	r3, r2
 800098c:	43da      	mvns	r2, r3
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	409a      	lsls	r2, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009b2:	2201      	movs	r2, #1
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
 80009b8:	0013      	movs	r3, r2
 80009ba:	43da      	mvns	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	091b      	lsrs	r3, r3, #4
 80009c8:	2201      	movs	r2, #1
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
 80009d0:	0013      	movs	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2203      	movs	r2, #3
 80009e4:	4013      	ands	r3, r2
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d017      	beq.n	8000a1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	409a      	lsls	r2, r3
 80009f8:	0013      	movs	r3, r2
 80009fa:	43da      	mvns	r2, r3
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2203      	movs	r2, #3
 8000a20:	4013      	ands	r3, r2
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d123      	bne.n	8000a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	08da      	lsrs	r2, r3, #3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3208      	adds	r2, #8
 8000a2e:	0092      	lsls	r2, r2, #2
 8000a30:	58d3      	ldr	r3, [r2, r3]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2207      	movs	r2, #7
 8000a38:	4013      	ands	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	43da      	mvns	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	691a      	ldr	r2, [r3, #16]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2107      	movs	r1, #7
 8000a52:	400b      	ands	r3, r1
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	08da      	lsrs	r2, r3, #3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3208      	adds	r2, #8
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	6939      	ldr	r1, [r7, #16]
 8000a6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	23c0      	movs	r3, #192	; 0xc0
 8000aa8:	029b      	lsls	r3, r3, #10
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d100      	bne.n	8000ab0 <HAL_GPIO_Init+0x174>
 8000aae:	e098      	b.n	8000be2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ab0:	4a53      	ldr	r2, [pc, #332]	; (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	3318      	adds	r3, #24
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	589b      	ldr	r3, [r3, r2]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	220f      	movs	r2, #15
 8000ac8:	409a      	lsls	r2, r3
 8000aca:	0013      	movs	r3, r2
 8000acc:	43da      	mvns	r2, r3
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	23a0      	movs	r3, #160	; 0xa0
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d019      	beq.n	8000b12 <HAL_GPIO_Init+0x1d6>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a48      	ldr	r2, [pc, #288]	; (8000c04 <HAL_GPIO_Init+0x2c8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0x1d2>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a47      	ldr	r2, [pc, #284]	; (8000c08 <HAL_GPIO_Init+0x2cc>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d00d      	beq.n	8000b0a <HAL_GPIO_Init+0x1ce>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d007      	beq.n	8000b06 <HAL_GPIO_Init+0x1ca>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a45      	ldr	r2, [pc, #276]	; (8000c10 <HAL_GPIO_Init+0x2d4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_GPIO_Init+0x1c6>
 8000afe:	2304      	movs	r3, #4
 8000b00:	e008      	b.n	8000b14 <HAL_GPIO_Init+0x1d8>
 8000b02:	2305      	movs	r3, #5
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x1d8>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e004      	b.n	8000b14 <HAL_GPIO_Init+0x1d8>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	e002      	b.n	8000b14 <HAL_GPIO_Init+0x1d8>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_Init+0x1d8>
 8000b12:	2300      	movs	r3, #0
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	2103      	movs	r1, #3
 8000b18:	400a      	ands	r2, r1
 8000b1a:	00d2      	lsls	r2, r2, #3
 8000b1c:	4093      	lsls	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000b24:	4936      	ldr	r1, [pc, #216]	; (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3318      	adds	r3, #24
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b32:	4a33      	ldr	r2, [pc, #204]	; (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43da      	mvns	r2, r3
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	025b      	lsls	r3, r3, #9
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b58:	4929      	ldr	r1, [pc, #164]	; (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000b60:	4a27      	ldr	r2, [pc, #156]	; (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000b62:	2384      	movs	r3, #132	; 0x84
 8000b64:	58d3      	ldr	r3, [r2, r3]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	029b      	lsls	r3, r3, #10
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b86:	491e      	ldr	r1, [pc, #120]	; (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000b88:	2284      	movs	r2, #132	; 0x84
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	43da      	mvns	r2, r3
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	035b      	lsls	r3, r3, #13
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	039b      	lsls	r3, r3, #14
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	d003      	beq.n	8000bdc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_GPIO_Init+0x2c4>)
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	40da      	lsrs	r2, r3
 8000bf0:	1e13      	subs	r3, r2, #0
 8000bf2:	d000      	beq.n	8000bf6 <HAL_GPIO_Init+0x2ba>
 8000bf4:	e6aa      	b.n	800094c <HAL_GPIO_Init+0x10>
  }
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b006      	add	sp, #24
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021800 	.word	0x40021800
 8000c04:	50000400 	.word	0x50000400
 8000c08:	50000800 	.word	0x50000800
 8000c0c:	50000c00 	.word	0x50000c00
 8000c10:	50001000 	.word	0x50001000

08000c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	0008      	movs	r0, r1
 8000c1e:	0011      	movs	r1, r2
 8000c20:	1cbb      	adds	r3, r7, #2
 8000c22:	1c02      	adds	r2, r0, #0
 8000c24:	801a      	strh	r2, [r3, #0]
 8000c26:	1c7b      	adds	r3, r7, #1
 8000c28:	1c0a      	adds	r2, r1, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c2c:	1c7b      	adds	r3, r7, #1
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d004      	beq.n	8000c3e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c34:	1cbb      	adds	r3, r7, #2
 8000c36:	881a      	ldrh	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c3c:	e003      	b.n	8000c46 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3e:	1cbb      	adds	r3, r7, #2
 8000c40:	881a      	ldrh	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	0019      	movs	r1, r3
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d11f      	bne.n	8000cb4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	0013      	movs	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	189b      	adds	r3, r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4912      	ldr	r1, [pc, #72]	; (8000ccc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fa3e 	bl	8000104 <__udivsi3>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c8e:	e008      	b.n	8000ca2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	e001      	b.n	8000ca2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e009      	b.n	8000cb6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ca4:	695a      	ldr	r2, [r3, #20]
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	401a      	ands	r2, r3
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d0ed      	beq.n	8000c90 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	40007000 	.word	0x40007000
 8000cc4:	fffff9ff 	.word	0xfffff9ff
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	000f4240 	.word	0x000f4240

08000cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d102      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f000 fb56 	bl	8001390 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4013      	ands	r3, r2
 8000cec:	d100      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x20>
 8000cee:	e07d      	b.n	8000dec <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cf0:	4bc3      	ldr	r3, [pc, #780]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	2238      	movs	r2, #56	; 0x38
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cfa:	4bc1      	ldr	r3, [pc, #772]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2203      	movs	r2, #3
 8000d00:	4013      	ands	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	2b10      	cmp	r3, #16
 8000d08:	d102      	bne.n	8000d10 <HAL_RCC_OscConfig+0x40>
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d002      	beq.n	8000d16 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2b08      	cmp	r3, #8
 8000d14:	d10c      	bne.n	8000d30 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d16:	4bba      	ldr	r3, [pc, #744]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	029b      	lsls	r3, r3, #10
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d063      	beq.n	8000dea <HAL_RCC_OscConfig+0x11a>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d15f      	bne.n	8000dea <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f000 fb30 	bl	8001390 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	025b      	lsls	r3, r3, #9
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d107      	bne.n	8000d4c <HAL_RCC_OscConfig+0x7c>
 8000d3c:	4bb0      	ldr	r3, [pc, #704]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4baf      	ldr	r3, [pc, #700]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	0249      	lsls	r1, r1, #9
 8000d46:	430a      	orrs	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e020      	b.n	8000d8e <HAL_RCC_OscConfig+0xbe>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	23a0      	movs	r3, #160	; 0xa0
 8000d52:	02db      	lsls	r3, r3, #11
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d10e      	bne.n	8000d76 <HAL_RCC_OscConfig+0xa6>
 8000d58:	4ba9      	ldr	r3, [pc, #676]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4ba8      	ldr	r3, [pc, #672]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	02c9      	lsls	r1, r1, #11
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	4ba6      	ldr	r3, [pc, #664]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4ba5      	ldr	r3, [pc, #660]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	0249      	lsls	r1, r1, #9
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e00b      	b.n	8000d8e <HAL_RCC_OscConfig+0xbe>
 8000d76:	4ba2      	ldr	r3, [pc, #648]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4ba1      	ldr	r3, [pc, #644]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d7c:	49a1      	ldr	r1, [pc, #644]	; (8001004 <HAL_RCC_OscConfig+0x334>)
 8000d7e:	400a      	ands	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	4b9f      	ldr	r3, [pc, #636]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b9e      	ldr	r3, [pc, #632]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d88:	499f      	ldr	r1, [pc, #636]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d014      	beq.n	8000dc0 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d96:	f7ff fcd9 	bl	800074c <HAL_GetTick>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da0:	f7ff fcd4 	bl	800074c <HAL_GetTick>
 8000da4:	0002      	movs	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b64      	cmp	r3, #100	; 0x64
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e2ee      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000db2:	4b93      	ldr	r3, [pc, #588]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	029b      	lsls	r3, r3, #10
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d0f0      	beq.n	8000da0 <HAL_RCC_OscConfig+0xd0>
 8000dbe:	e015      	b.n	8000dec <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fcc4 	bl	800074c <HAL_GetTick>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dca:	f7ff fcbf 	bl	800074c <HAL_GetTick>
 8000dce:	0002      	movs	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b64      	cmp	r3, #100	; 0x64
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e2d9      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ddc:	4b88      	ldr	r3, [pc, #544]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	029b      	lsls	r3, r3, #10
 8000de4:	4013      	ands	r3, r2
 8000de6:	d1f0      	bne.n	8000dca <HAL_RCC_OscConfig+0xfa>
 8000de8:	e000      	b.n	8000dec <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2202      	movs	r2, #2
 8000df2:	4013      	ands	r3, r2
 8000df4:	d100      	bne.n	8000df8 <HAL_RCC_OscConfig+0x128>
 8000df6:	e099      	b.n	8000f2c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000df8:	4b81      	ldr	r3, [pc, #516]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2238      	movs	r2, #56	; 0x38
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e02:	4b7f      	ldr	r3, [pc, #508]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	2203      	movs	r2, #3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2b10      	cmp	r3, #16
 8000e10:	d102      	bne.n	8000e18 <HAL_RCC_OscConfig+0x148>
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d002      	beq.n	8000e1e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d135      	bne.n	8000e8a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e1e:	4b78      	ldr	r3, [pc, #480]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	4013      	ands	r3, r2
 8000e28:	d005      	beq.n	8000e36 <HAL_RCC_OscConfig+0x166>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e2ac      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e36:	4b72      	ldr	r3, [pc, #456]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4a74      	ldr	r2, [pc, #464]	; (800100c <HAL_RCC_OscConfig+0x33c>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	0019      	movs	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	021a      	lsls	r2, r3, #8
 8000e46:	4b6e      	ldr	r3, [pc, #440]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d112      	bne.n	8000e78 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e52:	4b6b      	ldr	r3, [pc, #428]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a6e      	ldr	r2, [pc, #440]	; (8001010 <HAL_RCC_OscConfig+0x340>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	4b67      	ldr	r3, [pc, #412]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e62:	430a      	orrs	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e66:	4b66      	ldr	r3, [pc, #408]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	0adb      	lsrs	r3, r3, #11
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	4013      	ands	r3, r2
 8000e70:	4a68      	ldr	r2, [pc, #416]	; (8001014 <HAL_RCC_OscConfig+0x344>)
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	4b68      	ldr	r3, [pc, #416]	; (8001018 <HAL_RCC_OscConfig+0x348>)
 8000e76:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e78:	4b68      	ldr	r3, [pc, #416]	; (800101c <HAL_RCC_OscConfig+0x34c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff fc09 	bl	8000694 <HAL_InitTick>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d051      	beq.n	8000f2a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e282      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d030      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e92:	4b5b      	ldr	r3, [pc, #364]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a5e      	ldr	r2, [pc, #376]	; (8001010 <HAL_RCC_OscConfig+0x340>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	4b57      	ldr	r3, [pc, #348]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000ea6:	4b56      	ldr	r3, [pc, #344]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b55      	ldr	r3, [pc, #340]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	0049      	lsls	r1, r1, #1
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fc4a 	bl	800074c <HAL_GetTick>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fc45 	bl	800074c <HAL_GetTick>
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e25f      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ed0:	4b4b      	ldr	r3, [pc, #300]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d0f0      	beq.n	8000ebe <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000edc:	4b48      	ldr	r3, [pc, #288]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4a4a      	ldr	r2, [pc, #296]	; (800100c <HAL_RCC_OscConfig+0x33c>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	021a      	lsls	r2, r3, #8
 8000eec:	4b44      	ldr	r3, [pc, #272]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	e01b      	b.n	8000f2c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000ef4:	4b42      	ldr	r3, [pc, #264]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b41      	ldr	r3, [pc, #260]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000efa:	4949      	ldr	r1, [pc, #292]	; (8001020 <HAL_RCC_OscConfig+0x350>)
 8000efc:	400a      	ands	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f00:	f7ff fc24 	bl	800074c <HAL_GetTick>
 8000f04:	0003      	movs	r3, r0
 8000f06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fc1f 	bl	800074c <HAL_GetTick>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e239      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f1c:	4b38      	ldr	r3, [pc, #224]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4013      	ands	r3, r2
 8000f26:	d1f0      	bne.n	8000f0a <HAL_RCC_OscConfig+0x23a>
 8000f28:	e000      	b.n	8000f2c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f2a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2208      	movs	r2, #8
 8000f32:	4013      	ands	r3, r2
 8000f34:	d047      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f36:	4b32      	ldr	r3, [pc, #200]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2238      	movs	r2, #56	; 0x38
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b18      	cmp	r3, #24
 8000f40:	d10a      	bne.n	8000f58 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000f42:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	2202      	movs	r2, #2
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d03c      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x2f6>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d138      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e21b      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d019      	beq.n	8000f94 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fbee 	bl	800074c <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f76:	f7ff fbe9 	bl	800074c <HAL_GetTick>
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e203      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d0f1      	beq.n	8000f76 <HAL_RCC_OscConfig+0x2a6>
 8000f92:	e018      	b.n	8000fc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	438a      	bics	r2, r1
 8000f9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fbd4 	bl	800074c <HAL_GetTick>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000faa:	f7ff fbcf 	bl	800074c <HAL_GetTick>
 8000fae:	0002      	movs	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e1e9      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d1f1      	bne.n	8000faa <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d100      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x302>
 8000fd0:	e0c6      	b.n	8001160 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd2:	231f      	movs	r3, #31
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2238      	movs	r2, #56	; 0x38
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b20      	cmp	r3, #32
 8000fe4:	d11e      	bne.n	8001024 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	d100      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x322>
 8000ff0:	e0b6      	b.n	8001160 <HAL_RCC_OscConfig+0x490>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d000      	beq.n	8000ffc <HAL_RCC_OscConfig+0x32c>
 8000ffa:	e0b1      	b.n	8001160 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e1c7      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
 8001000:	40021000 	.word	0x40021000
 8001004:	fffeffff 	.word	0xfffeffff
 8001008:	fffbffff 	.word	0xfffbffff
 800100c:	ffff80ff 	.word	0xffff80ff
 8001010:	ffffc7ff 	.word	0xffffc7ff
 8001014:	00f42400 	.word	0x00f42400
 8001018:	20000000 	.word	0x20000000
 800101c:	20000004 	.word	0x20000004
 8001020:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001024:	4bb8      	ldr	r3, [pc, #736]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	055b      	lsls	r3, r3, #21
 800102c:	4013      	ands	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_RCC_OscConfig+0x364>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <HAL_RCC_OscConfig+0x366>
 8001034:	2300      	movs	r3, #0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d011      	beq.n	800105e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4bb3      	ldr	r3, [pc, #716]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 800103c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800103e:	4bb2      	ldr	r3, [pc, #712]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	0549      	lsls	r1, r1, #21
 8001044:	430a      	orrs	r2, r1
 8001046:	63da      	str	r2, [r3, #60]	; 0x3c
 8001048:	4baf      	ldr	r3, [pc, #700]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 800104a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	055b      	lsls	r3, r3, #21
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001056:	231f      	movs	r3, #31
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800105e:	4bab      	ldr	r3, [pc, #684]	; (800130c <HAL_RCC_OscConfig+0x63c>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4013      	ands	r3, r2
 8001068:	d11a      	bne.n	80010a0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800106a:	4ba8      	ldr	r3, [pc, #672]	; (800130c <HAL_RCC_OscConfig+0x63c>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4ba7      	ldr	r3, [pc, #668]	; (800130c <HAL_RCC_OscConfig+0x63c>)
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	0049      	lsls	r1, r1, #1
 8001074:	430a      	orrs	r2, r1
 8001076:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001078:	f7ff fb68 	bl	800074c <HAL_GetTick>
 800107c:	0003      	movs	r3, r0
 800107e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001082:	f7ff fb63 	bl	800074c <HAL_GetTick>
 8001086:	0002      	movs	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e17d      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001094:	4b9d      	ldr	r3, [pc, #628]	; (800130c <HAL_RCC_OscConfig+0x63c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4013      	ands	r3, r2
 800109e:	d0f0      	beq.n	8001082 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d106      	bne.n	80010b6 <HAL_RCC_OscConfig+0x3e6>
 80010a8:	4b97      	ldr	r3, [pc, #604]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80010aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010ac:	4b96      	ldr	r3, [pc, #600]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	430a      	orrs	r2, r1
 80010b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80010b4:	e01c      	b.n	80010f0 <HAL_RCC_OscConfig+0x420>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b05      	cmp	r3, #5
 80010bc:	d10c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x408>
 80010be:	4b92      	ldr	r3, [pc, #584]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80010c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010c2:	4b91      	ldr	r3, [pc, #580]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80010c4:	2104      	movs	r1, #4
 80010c6:	430a      	orrs	r2, r1
 80010c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80010ca:	4b8f      	ldr	r3, [pc, #572]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80010cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010ce:	4b8e      	ldr	r3, [pc, #568]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	430a      	orrs	r2, r1
 80010d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80010d6:	e00b      	b.n	80010f0 <HAL_RCC_OscConfig+0x420>
 80010d8:	4b8b      	ldr	r3, [pc, #556]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80010da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010dc:	4b8a      	ldr	r3, [pc, #552]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80010de:	2101      	movs	r1, #1
 80010e0:	438a      	bics	r2, r1
 80010e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80010e4:	4b88      	ldr	r3, [pc, #544]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80010e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010e8:	4b87      	ldr	r3, [pc, #540]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80010ea:	2104      	movs	r1, #4
 80010ec:	438a      	bics	r2, r1
 80010ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d014      	beq.n	8001122 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb28 	bl	800074c <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001100:	e009      	b.n	8001116 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001102:	f7ff fb23 	bl	800074c <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	4a80      	ldr	r2, [pc, #512]	; (8001310 <HAL_RCC_OscConfig+0x640>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e13c      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001116:	4b7c      	ldr	r3, [pc, #496]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111a:	2202      	movs	r2, #2
 800111c:	4013      	ands	r3, r2
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0x432>
 8001120:	e013      	b.n	800114a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001122:	f7ff fb13 	bl	800074c <HAL_GetTick>
 8001126:	0003      	movs	r3, r0
 8001128:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800112a:	e009      	b.n	8001140 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112c:	f7ff fb0e 	bl	800074c <HAL_GetTick>
 8001130:	0002      	movs	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	4a76      	ldr	r2, [pc, #472]	; (8001310 <HAL_RCC_OscConfig+0x640>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e127      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001140:	4b71      	ldr	r3, [pc, #452]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	2202      	movs	r2, #2
 8001146:	4013      	ands	r3, r2
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800114a:	231f      	movs	r3, #31
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001154:	4b6c      	ldr	r3, [pc, #432]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001158:	4b6b      	ldr	r3, [pc, #428]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 800115a:	496e      	ldr	r1, [pc, #440]	; (8001314 <HAL_RCC_OscConfig+0x644>)
 800115c:	400a      	ands	r2, r1
 800115e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2220      	movs	r2, #32
 8001166:	4013      	ands	r3, r2
 8001168:	d039      	beq.n	80011de <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d01b      	beq.n	80011aa <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001172:	4b65      	ldr	r3, [pc, #404]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b64      	ldr	r3, [pc, #400]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	03c9      	lsls	r1, r1, #15
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001180:	f7ff fae4 	bl	800074c <HAL_GetTick>
 8001184:	0003      	movs	r3, r0
 8001186:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800118a:	f7ff fadf 	bl	800074c <HAL_GetTick>
 800118e:	0002      	movs	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e0f9      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800119c:	4b5a      	ldr	r3, [pc, #360]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	041b      	lsls	r3, r3, #16
 80011a4:	4013      	ands	r3, r2
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x4ba>
 80011a8:	e019      	b.n	80011de <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011aa:	4b57      	ldr	r3, [pc, #348]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b56      	ldr	r3, [pc, #344]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80011b0:	4959      	ldr	r1, [pc, #356]	; (8001318 <HAL_RCC_OscConfig+0x648>)
 80011b2:	400a      	ands	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b6:	f7ff fac9 	bl	800074c <HAL_GetTick>
 80011ba:	0003      	movs	r3, r0
 80011bc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011c0:	f7ff fac4 	bl	800074c <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e0de      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80011d2:	4b4d      	ldr	r3, [pc, #308]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	041b      	lsls	r3, r3, #16
 80011da:	4013      	ands	r3, r2
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d100      	bne.n	80011e8 <HAL_RCC_OscConfig+0x518>
 80011e6:	e0d2      	b.n	800138e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e8:	4b47      	ldr	r3, [pc, #284]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2238      	movs	r2, #56	; 0x38
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x526>
 80011f4:	e081      	b.n	80012fa <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d156      	bne.n	80012ac <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fe:	4b42      	ldr	r3, [pc, #264]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001204:	4945      	ldr	r1, [pc, #276]	; (800131c <HAL_RCC_OscConfig+0x64c>)
 8001206:	400a      	ands	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff fa9f 	bl	800074c <HAL_GetTick>
 800120e:	0003      	movs	r3, r0
 8001210:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001214:	f7ff fa9a 	bl	800074c <HAL_GetTick>
 8001218:	0002      	movs	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e0b4      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	049b      	lsls	r3, r3, #18
 800122e:	4013      	ands	r3, r2
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	4a3a      	ldr	r2, [pc, #232]	; (8001320 <HAL_RCC_OscConfig+0x650>)
 8001238:	4013      	ands	r3, r2
 800123a:	0019      	movs	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125e:	431a      	orrs	r2, r3
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001262:	430a      	orrs	r2, r1
 8001264:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	0449      	lsls	r1, r1, #17
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	0549      	lsls	r1, r1, #21
 800127e:	430a      	orrs	r2, r1
 8001280:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fa63 	bl	800074c <HAL_GetTick>
 8001286:	0003      	movs	r3, r0
 8001288:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128c:	f7ff fa5e 	bl	800074c <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e078      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	049b      	lsls	r3, r3, #18
 80012a6:	4013      	ands	r3, r2
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0x5bc>
 80012aa:	e070      	b.n	800138e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80012b2:	491a      	ldr	r1, [pc, #104]	; (800131c <HAL_RCC_OscConfig+0x64c>)
 80012b4:	400a      	ands	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80012be:	2103      	movs	r1, #3
 80012c0:	438a      	bics	r2, r1
 80012c2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80012ca:	4916      	ldr	r1, [pc, #88]	; (8001324 <HAL_RCC_OscConfig+0x654>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fa3c 	bl	800074c <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fa37 	bl	800074c <HAL_GetTick>
 80012de:	0002      	movs	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e051      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_RCC_OscConfig+0x638>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	049b      	lsls	r3, r3, #18
 80012f4:	4013      	ands	r3, r2
 80012f6:	d1f0      	bne.n	80012da <HAL_RCC_OscConfig+0x60a>
 80012f8:	e049      	b.n	800138e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d112      	bne.n	8001328 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e044      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	40021000 	.word	0x40021000
 800130c:	40007000 	.word	0x40007000
 8001310:	00001388 	.word	0x00001388
 8001314:	efffffff 	.word	0xefffffff
 8001318:	ffbfffff 	.word	0xffbfffff
 800131c:	feffffff 	.word	0xfeffffff
 8001320:	11c1808c 	.word	0x11c1808c
 8001324:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_RCC_OscConfig+0x6c8>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2203      	movs	r2, #3
 8001332:	401a      	ands	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	429a      	cmp	r2, r3
 800133a:	d126      	bne.n	800138a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2270      	movs	r2, #112	; 0x70
 8001340:	401a      	ands	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	429a      	cmp	r2, r3
 8001348:	d11f      	bne.n	800138a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	23fe      	movs	r3, #254	; 0xfe
 800134e:	01db      	lsls	r3, r3, #7
 8001350:	401a      	ands	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d116      	bne.n	800138a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	23f8      	movs	r3, #248	; 0xf8
 8001360:	039b      	lsls	r3, r3, #14
 8001362:	401a      	ands	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001368:	429a      	cmp	r2, r3
 800136a:	d10e      	bne.n	800138a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	23e0      	movs	r3, #224	; 0xe0
 8001370:	051b      	lsls	r3, r3, #20
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	0f5b      	lsrs	r3, r3, #29
 8001380:	075a      	lsls	r2, r3, #29
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b008      	add	sp, #32
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0e9      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_RCC_ClockConfig+0x1f0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2207      	movs	r2, #7
 80013b6:	4013      	ands	r3, r2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d91e      	bls.n	80013fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b73      	ldr	r3, [pc, #460]	; (800158c <HAL_RCC_ClockConfig+0x1f0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2207      	movs	r2, #7
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	4b70      	ldr	r3, [pc, #448]	; (800158c <HAL_RCC_ClockConfig+0x1f0>)
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013d0:	f7ff f9bc 	bl	800074c <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013d8:	e009      	b.n	80013ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013da:	f7ff f9b7 	bl	800074c <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <HAL_RCC_ClockConfig+0x1f4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e0ca      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013ee:	4b67      	ldr	r3, [pc, #412]	; (800158c <HAL_RCC_ClockConfig+0x1f0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2207      	movs	r2, #7
 80013f4:	4013      	ands	r3, r2
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d1ee      	bne.n	80013da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d015      	beq.n	8001432 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2204      	movs	r2, #4
 800140c:	4013      	ands	r3, r2
 800140e:	d006      	beq.n	800141e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001410:	4b60      	ldr	r3, [pc, #384]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 8001416:	21e0      	movs	r1, #224	; 0xe0
 8001418:	01c9      	lsls	r1, r1, #7
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141e:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4a5d      	ldr	r2, [pc, #372]	; (8001598 <HAL_RCC_ClockConfig+0x1fc>)
 8001424:	4013      	ands	r3, r2
 8001426:	0019      	movs	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 800142e:	430a      	orrs	r2, r1
 8001430:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2201      	movs	r2, #1
 8001438:	4013      	ands	r3, r2
 800143a:	d057      	beq.n	80014ec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d107      	bne.n	8001454 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001444:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	4013      	ands	r3, r2
 800144e:	d12b      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e097      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d107      	bne.n	800146c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145c:	4b4d      	ldr	r3, [pc, #308]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	049b      	lsls	r3, r3, #18
 8001464:	4013      	ands	r3, r2
 8001466:	d11f      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e08b      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d107      	bne.n	8001484 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001474:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4013      	ands	r3, r2
 800147e:	d113      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e07f      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d106      	bne.n	800149a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800148c:	4b41      	ldr	r3, [pc, #260]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 800148e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001490:	2202      	movs	r2, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d108      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e074      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149a:	4b3e      	ldr	r3, [pc, #248]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 800149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e06d      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014a8:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2207      	movs	r2, #7
 80014ae:	4393      	bics	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 80014b8:	430a      	orrs	r2, r1
 80014ba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014bc:	f7ff f946 	bl	800074c <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c4:	e009      	b.n	80014da <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c6:	f7ff f941 	bl	800074c <HAL_GetTick>
 80014ca:	0002      	movs	r2, r0
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <HAL_RCC_ClockConfig+0x1f4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e054      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2238      	movs	r2, #56	; 0x38
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1ec      	bne.n	80014c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <HAL_RCC_ClockConfig+0x1f0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2207      	movs	r2, #7
 80014f2:	4013      	ands	r3, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d21e      	bcs.n	8001538 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_RCC_ClockConfig+0x1f0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2207      	movs	r2, #7
 8001500:	4393      	bics	r3, r2
 8001502:	0019      	movs	r1, r3
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_RCC_ClockConfig+0x1f0>)
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800150c:	f7ff f91e 	bl	800074c <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001514:	e009      	b.n	800152a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001516:	f7ff f919 	bl	800074c <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <HAL_RCC_ClockConfig+0x1f4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e02c      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2207      	movs	r2, #7
 8001530:	4013      	ands	r3, r2
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d1ee      	bne.n	8001516 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2204      	movs	r2, #4
 800153e:	4013      	ands	r3, r2
 8001540:	d009      	beq.n	8001556 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <HAL_RCC_ClockConfig+0x200>)
 8001548:	4013      	ands	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 8001552:	430a      	orrs	r2, r1
 8001554:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001556:	f000 f829 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 800155a:	0001      	movs	r1, r0
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_RCC_ClockConfig+0x1f8>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	220f      	movs	r2, #15
 8001564:	401a      	ands	r2, r3
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_RCC_ClockConfig+0x204>)
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	58d3      	ldr	r3, [r2, r3]
 800156c:	221f      	movs	r2, #31
 800156e:	4013      	ands	r3, r2
 8001570:	000a      	movs	r2, r1
 8001572:	40da      	lsrs	r2, r3
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_ClockConfig+0x208>)
 8001576:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_ClockConfig+0x20c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff f889 	bl	8000694 <HAL_InitTick>
 8001582:	0003      	movs	r3, r0
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b004      	add	sp, #16
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40022000 	.word	0x40022000
 8001590:	00001388 	.word	0x00001388
 8001594:	40021000 	.word	0x40021000
 8001598:	fffff0ff 	.word	0xfffff0ff
 800159c:	ffff8fff 	.word	0xffff8fff
 80015a0:	0800234c 	.word	0x0800234c
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b2:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2238      	movs	r2, #56	; 0x38
 80015b8:	4013      	ands	r3, r2
 80015ba:	d10f      	bne.n	80015dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0adb      	lsrs	r3, r3, #11
 80015c2:	2207      	movs	r2, #7
 80015c4:	4013      	ands	r3, r2
 80015c6:	2201      	movs	r2, #1
 80015c8:	409a      	lsls	r2, r3
 80015ca:	0013      	movs	r3, r2
 80015cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	4835      	ldr	r0, [pc, #212]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015d2:	f7fe fd97 	bl	8000104 <__udivsi3>
 80015d6:	0003      	movs	r3, r0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	e05d      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015dc:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2238      	movs	r2, #56	; 0x38
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d102      	bne.n	80015ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_RCC_GetSysClockFreq+0x100>)
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	e054      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2238      	movs	r2, #56	; 0x38
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b10      	cmp	r3, #16
 80015f8:	d138      	bne.n	800166c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2203      	movs	r2, #3
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	2207      	movs	r2, #7
 800160c:	4013      	ands	r3, r2
 800160e:	3301      	adds	r3, #1
 8001610:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d10d      	bne.n	8001634 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	4824      	ldr	r0, [pc, #144]	; (80016ac <HAL_RCC_GetSysClockFreq+0x100>)
 800161c:	f7fe fd72 	bl	8000104 <__udivsi3>
 8001620:	0003      	movs	r3, r0
 8001622:	0019      	movs	r1, r3
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	227f      	movs	r2, #127	; 0x7f
 800162c:	4013      	ands	r3, r2
 800162e:	434b      	muls	r3, r1
 8001630:	617b      	str	r3, [r7, #20]
        break;
 8001632:	e00d      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	481c      	ldr	r0, [pc, #112]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001638:	f7fe fd64 	bl	8000104 <__udivsi3>
 800163c:	0003      	movs	r3, r0
 800163e:	0019      	movs	r1, r3
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	227f      	movs	r2, #127	; 0x7f
 8001648:	4013      	ands	r3, r2
 800164a:	434b      	muls	r3, r1
 800164c:	617b      	str	r3, [r7, #20]
        break;
 800164e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0f5b      	lsrs	r3, r3, #29
 8001656:	2207      	movs	r2, #7
 8001658:	4013      	ands	r3, r2
 800165a:	3301      	adds	r3, #1
 800165c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	6978      	ldr	r0, [r7, #20]
 8001662:	f7fe fd4f 	bl	8000104 <__udivsi3>
 8001666:	0003      	movs	r3, r0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	e015      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2238      	movs	r2, #56	; 0x38
 8001672:	4013      	ands	r3, r2
 8001674:	2b20      	cmp	r3, #32
 8001676:	d103      	bne.n	8001680 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	e00b      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2238      	movs	r2, #56	; 0x38
 8001686:	4013      	ands	r3, r2
 8001688:	2b18      	cmp	r3, #24
 800168a:	d103      	bne.n	8001694 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800168c:	23fa      	movs	r3, #250	; 0xfa
 800168e:	01db      	lsls	r3, r3, #7
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	e001      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001698:	693b      	ldr	r3, [r7, #16]
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b006      	add	sp, #24
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	40021000 	.word	0x40021000
 80016a8:	00f42400 	.word	0x00f42400
 80016ac:	007a1200 	.word	0x007a1200

080016b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0a8      	b.n	8001814 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	2382      	movs	r3, #130	; 0x82
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d009      	beq.n	80016ea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	61da      	str	r2, [r3, #28]
 80016dc:	e005      	b.n	80016ea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	225d      	movs	r2, #93	; 0x5d
 80016f4:	5c9b      	ldrb	r3, [r3, r2]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d107      	bne.n	800170c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	225c      	movs	r2, #92	; 0x5c
 8001700:	2100      	movs	r1, #0
 8001702:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	0018      	movs	r0, r3
 8001708:	f7fe ff14 	bl	8000534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	225d      	movs	r2, #93	; 0x5d
 8001710:	2102      	movs	r1, #2
 8001712:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2140      	movs	r1, #64	; 0x40
 8001720:	438a      	bics	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	23e0      	movs	r3, #224	; 0xe0
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	429a      	cmp	r2, r3
 800172e:	d902      	bls.n	8001736 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e002      	b.n	800173c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	015b      	lsls	r3, r3, #5
 800173a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	23f0      	movs	r3, #240	; 0xf0
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	429a      	cmp	r2, r3
 8001746:	d008      	beq.n	800175a <HAL_SPI_Init+0xaa>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	23e0      	movs	r3, #224	; 0xe0
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	429a      	cmp	r2, r3
 8001752:	d002      	beq.n	800175a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	2382      	movs	r3, #130	; 0x82
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	401a      	ands	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	2384      	movs	r3, #132	; 0x84
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	400b      	ands	r3, r1
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2102      	movs	r1, #2
 8001776:	400b      	ands	r3, r1
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2101      	movs	r1, #1
 8001780:	400b      	ands	r3, r1
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6999      	ldr	r1, [r3, #24]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	400b      	ands	r3, r1
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	2138      	movs	r1, #56	; 0x38
 8001796:	400b      	ands	r3, r1
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	400b      	ands	r3, r1
 80017a2:	431a      	orrs	r2, r3
 80017a4:	0011      	movs	r1, r2
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	019b      	lsls	r3, r3, #6
 80017ae:	401a      	ands	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	0c1b      	lsrs	r3, r3, #16
 80017be:	2204      	movs	r2, #4
 80017c0:	401a      	ands	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	2110      	movs	r1, #16
 80017c8:	400b      	ands	r3, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	2108      	movs	r1, #8
 80017d2:	400b      	ands	r3, r1
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68d9      	ldr	r1, [r3, #12]
 80017da:	23f0      	movs	r3, #240	; 0xf0
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	400b      	ands	r3, r1
 80017e0:	431a      	orrs	r2, r3
 80017e2:	0011      	movs	r1, r2
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	401a      	ands	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4907      	ldr	r1, [pc, #28]	; (800181c <HAL_SPI_Init+0x16c>)
 8001800:	400a      	ands	r2, r1
 8001802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	225d      	movs	r2, #93	; 0x5d
 800180e:	2101      	movs	r1, #1
 8001810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b004      	add	sp, #16
 800181a:	bd80      	pop	{r7, pc}
 800181c:	fffff7ff 	.word	0xfffff7ff

08001820 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	001a      	movs	r2, r3
 800182e:	1cbb      	adds	r3, r7, #2
 8001830:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001832:	2301      	movs	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001836:	2323      	movs	r3, #35	; 0x23
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	225c      	movs	r2, #92	; 0x5c
 8001842:	5c9b      	ldrb	r3, [r3, r2]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_SPI_TransmitReceive+0x2c>
 8001848:	2302      	movs	r3, #2
 800184a:	e1b5      	b.n	8001bb8 <HAL_SPI_TransmitReceive+0x398>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	225c      	movs	r2, #92	; 0x5c
 8001850:	2101      	movs	r1, #1
 8001852:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001854:	f7fe ff7a 	bl	800074c <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800185c:	201b      	movs	r0, #27
 800185e:	183b      	adds	r3, r7, r0
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	215d      	movs	r1, #93	; 0x5d
 8001864:	5c52      	ldrb	r2, [r2, r1]
 8001866:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800186e:	2312      	movs	r3, #18
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	1cba      	adds	r2, r7, #2
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001878:	183b      	adds	r3, r7, r0
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d011      	beq.n	80018a4 <HAL_SPI_TransmitReceive+0x84>
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	2382      	movs	r3, #130	; 0x82
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	429a      	cmp	r2, r3
 8001888:	d107      	bne.n	800189a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <HAL_SPI_TransmitReceive+0x7a>
 8001892:	183b      	adds	r3, r7, r0
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b04      	cmp	r3, #4
 8001898:	d004      	beq.n	80018a4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800189a:	2323      	movs	r3, #35	; 0x23
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2202      	movs	r2, #2
 80018a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80018a2:	e17e      	b.n	8001ba2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_SPI_TransmitReceive+0x98>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_SPI_TransmitReceive+0x98>
 80018b0:	1cbb      	adds	r3, r7, #2
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d104      	bne.n	80018c2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80018b8:	2323      	movs	r3, #35	; 0x23
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
    goto error;
 80018c0:	e16f      	b.n	8001ba2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	225d      	movs	r2, #93	; 0x5d
 80018c6:	5c9b      	ldrb	r3, [r3, r2]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d003      	beq.n	80018d6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	225d      	movs	r2, #93	; 0x5d
 80018d2:	2105      	movs	r1, #5
 80018d4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1cba      	adds	r2, r7, #2
 80018e6:	2146      	movs	r1, #70	; 0x46
 80018e8:	8812      	ldrh	r2, [r2, #0]
 80018ea:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1cba      	adds	r2, r7, #2
 80018f0:	2144      	movs	r1, #68	; 0x44
 80018f2:	8812      	ldrh	r2, [r2, #0]
 80018f4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1cba      	adds	r2, r7, #2
 8001900:	8812      	ldrh	r2, [r2, #0]
 8001902:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1cba      	adds	r2, r7, #2
 8001908:	8812      	ldrh	r2, [r2, #0]
 800190a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	23e0      	movs	r3, #224	; 0xe0
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	429a      	cmp	r2, r3
 8001922:	d908      	bls.n	8001936 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	49a4      	ldr	r1, [pc, #656]	; (8001bc0 <HAL_SPI_TransmitReceive+0x3a0>)
 8001930:	400a      	ands	r2, r1
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	e008      	b.n	8001948 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0149      	lsls	r1, r1, #5
 8001944:	430a      	orrs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2240      	movs	r2, #64	; 0x40
 8001950:	4013      	ands	r3, r2
 8001952:	2b40      	cmp	r3, #64	; 0x40
 8001954:	d007      	beq.n	8001966 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2140      	movs	r1, #64	; 0x40
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	23e0      	movs	r3, #224	; 0xe0
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	429a      	cmp	r2, r3
 8001970:	d800      	bhi.n	8001974 <HAL_SPI_TransmitReceive+0x154>
 8001972:	e07f      	b.n	8001a74 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_SPI_TransmitReceive+0x168>
 800197c:	2312      	movs	r3, #18
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d000      	beq.n	8001988 <HAL_SPI_TransmitReceive+0x168>
 8001986:	e069      	b.n	8001a5c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198c:	881a      	ldrh	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001998:	1c9a      	adds	r2, r3, #2
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019ac:	e056      	b.n	8001a5c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2202      	movs	r2, #2
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d11b      	bne.n	80019f4 <HAL_SPI_TransmitReceive+0x1d4>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <HAL_SPI_TransmitReceive+0x1d4>
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d113      	bne.n	80019f4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d0:	881a      	ldrh	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	1c9a      	adds	r2, r3, #2
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d11c      	bne.n	8001a3c <HAL_SPI_TransmitReceive+0x21c>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2246      	movs	r2, #70	; 0x46
 8001a06:	5a9b      	ldrh	r3, [r3, r2]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	1c9a      	adds	r2, r3, #2
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2246      	movs	r2, #70	; 0x46
 8001a2a:	5a9b      	ldrh	r3, [r3, r2]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b299      	uxth	r1, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2246      	movs	r2, #70	; 0x46
 8001a36:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001a3c:	f7fe fe86 	bl	800074c <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d807      	bhi.n	8001a5c <HAL_SPI_TransmitReceive+0x23c>
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	3301      	adds	r3, #1
 8001a50:	d004      	beq.n	8001a5c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001a52:	2323      	movs	r3, #35	; 0x23
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	2203      	movs	r2, #3
 8001a58:	701a      	strb	r2, [r3, #0]
        goto error;
 8001a5a:	e0a2      	b.n	8001ba2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1a3      	bne.n	80019ae <HAL_SPI_TransmitReceive+0x18e>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2246      	movs	r2, #70	; 0x46
 8001a6a:	5a9b      	ldrh	r3, [r3, r2]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d19d      	bne.n	80019ae <HAL_SPI_TransmitReceive+0x18e>
 8001a72:	e085      	b.n	8001b80 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_SPI_TransmitReceive+0x268>
 8001a7c:	2312      	movs	r3, #18
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d000      	beq.n	8001a88 <HAL_SPI_TransmitReceive+0x268>
 8001a86:	e070      	b.n	8001b6a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	330c      	adds	r3, #12
 8001a92:	7812      	ldrb	r2, [r2, #0]
 8001a94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001aae:	e05c      	b.n	8001b6a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d11c      	bne.n	8001af8 <HAL_SPI_TransmitReceive+0x2d8>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d017      	beq.n	8001af8 <HAL_SPI_TransmitReceive+0x2d8>
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d114      	bne.n	8001af8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	330c      	adds	r3, #12
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d11e      	bne.n	8001b44 <HAL_SPI_TransmitReceive+0x324>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2246      	movs	r2, #70	; 0x46
 8001b0a:	5a9b      	ldrh	r3, [r3, r2]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d018      	beq.n	8001b44 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	330c      	adds	r3, #12
 8001b18:	001a      	movs	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2246      	movs	r2, #70	; 0x46
 8001b32:	5a9b      	ldrh	r3, [r3, r2]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b299      	uxth	r1, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2246      	movs	r2, #70	; 0x46
 8001b3e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b40:	2301      	movs	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001b44:	f7fe fe02 	bl	800074c <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d802      	bhi.n	8001b5a <HAL_SPI_TransmitReceive+0x33a>
 8001b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b56:	3301      	adds	r3, #1
 8001b58:	d102      	bne.n	8001b60 <HAL_SPI_TransmitReceive+0x340>
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d104      	bne.n	8001b6a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8001b60:	2323      	movs	r3, #35	; 0x23
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	2203      	movs	r2, #3
 8001b66:	701a      	strb	r2, [r3, #0]
        goto error;
 8001b68:	e01b      	b.n	8001ba2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d19d      	bne.n	8001ab0 <HAL_SPI_TransmitReceive+0x290>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2246      	movs	r2, #70	; 0x46
 8001b78:	5a9b      	ldrh	r3, [r3, r2]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d197      	bne.n	8001ab0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 f94c 	bl	8001e24 <SPI_EndRxTxTransaction>
 8001b8c:	1e03      	subs	r3, r0, #0
 8001b8e:	d007      	beq.n	8001ba0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8001b90:	2323      	movs	r3, #35	; 0x23
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	661a      	str	r2, [r3, #96]	; 0x60
 8001b9e:	e000      	b.n	8001ba2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8001ba0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	225d      	movs	r2, #93	; 0x5d
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	225c      	movs	r2, #92	; 0x5c
 8001bae:	2100      	movs	r1, #0
 8001bb0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001bb2:	2323      	movs	r3, #35	; 0x23
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	781b      	ldrb	r3, [r3, #0]
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b00a      	add	sp, #40	; 0x28
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	ffffefff 	.word	0xffffefff

08001bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	1dfb      	adds	r3, r7, #7
 8001bd2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001bd4:	f7fe fdba 	bl	800074c <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	18d3      	adds	r3, r2, r3
 8001be2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001be4:	f7fe fdb2 	bl	800074c <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001bec:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	015b      	lsls	r3, r3, #5
 8001bf2:	0d1b      	lsrs	r3, r3, #20
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	4353      	muls	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bfa:	e058      	b.n	8001cae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	d055      	beq.n	8001cae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c02:	f7fe fda3 	bl	800074c <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d902      	bls.n	8001c18 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d142      	bne.n	8001c9e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	21e0      	movs	r1, #224	; 0xe0
 8001c24:	438a      	bics	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	2382      	movs	r3, #130	; 0x82
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d113      	bne.n	8001c5c <SPI_WaitFlagStateUntilTimeout+0x98>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d005      	beq.n	8001c4c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d107      	bne.n	8001c5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2140      	movs	r1, #64	; 0x40
 8001c58:	438a      	bics	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	019b      	lsls	r3, r3, #6
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d110      	bne.n	8001c8a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	491a      	ldr	r1, [pc, #104]	; (8001cdc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	0189      	lsls	r1, r1, #6
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	225d      	movs	r2, #93	; 0x5d
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	225c      	movs	r2, #92	; 0x5c
 8001c96:	2100      	movs	r1, #0
 8001c98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e017      	b.n	8001cce <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	425a      	negs	r2, r3
 8001cbe:	4153      	adcs	r3, r2
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d197      	bne.n	8001bfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b008      	add	sp, #32
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	ffffdfff 	.word	0xffffdfff

08001ce0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001cee:	2317      	movs	r3, #23
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001cf6:	f7fe fd29 	bl	800074c <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	18d3      	adds	r3, r2, r3
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001d06:	f7fe fd21 	bl	800074c <HAL_GetTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	330c      	adds	r3, #12
 8001d14:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	189b      	adds	r3, r3, r2
 8001d20:	00da      	lsls	r2, r3, #3
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	0d1b      	lsrs	r3, r3, #20
 8001d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d28:	4353      	muls	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001d2c:	e068      	b.n	8001e00 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	23c0      	movs	r3, #192	; 0xc0
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d10a      	bne.n	8001d4e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d107      	bne.n	8001d4e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	2117      	movs	r1, #23
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3301      	adds	r3, #1
 8001d52:	d055      	beq.n	8001e00 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d54:	f7fe fcfa 	bl	800074c <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d902      	bls.n	8001d6a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d142      	bne.n	8001df0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	21e0      	movs	r1, #224	; 0xe0
 8001d76:	438a      	bics	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	2382      	movs	r3, #130	; 0x82
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d113      	bne.n	8001dae <SPI_WaitFifoStateUntilTimeout+0xce>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d005      	beq.n	8001d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d107      	bne.n	8001dae <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2140      	movs	r1, #64	; 0x40
 8001daa:	438a      	bics	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d110      	bne.n	8001ddc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4916      	ldr	r1, [pc, #88]	; (8001e20 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0189      	lsls	r1, r1, #6
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	225d      	movs	r2, #93	; 0x5d
 8001de0:	2101      	movs	r1, #1
 8001de2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	225c      	movs	r2, #92	; 0x5c
 8001de8:	2100      	movs	r1, #0
 8001dea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e010      	b.n	8001e12 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d18e      	bne.n	8001d2e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b00a      	add	sp, #40	; 0x28
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	ffffdfff 	.word	0xffffdfff

08001e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	23c0      	movs	r3, #192	; 0xc0
 8001e34:	0159      	lsls	r1, r3, #5
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f7ff ff4e 	bl	8001ce0 <SPI_WaitFifoStateUntilTimeout>
 8001e44:	1e03      	subs	r3, r0, #0
 8001e46:	d007      	beq.n	8001e58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e027      	b.n	8001ea8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	0013      	movs	r3, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	f7ff fead 	bl	8001bc4 <SPI_WaitFlagStateUntilTimeout>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d007      	beq.n	8001e7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	2220      	movs	r2, #32
 8001e74:	431a      	orrs	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e014      	b.n	8001ea8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	23c0      	movs	r3, #192	; 0xc0
 8001e82:	00d9      	lsls	r1, r3, #3
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	0013      	movs	r3, r2
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f7ff ff27 	bl	8001ce0 <SPI_WaitFifoStateUntilTimeout>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d007      	beq.n	8001ea6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e000      	b.n	8001ea8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <app_init>:

 uint32_t data_array[4];
 uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

 void app_init(){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0

 }
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <app_run>:

 void app_run(){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	 nrf24_init();
 8001ec0:	f000 f82c 	bl	8001f1c <nrf24_init>

	 nrf24_config(2, 1);
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f000 f836 	bl	8001f38 <nrf24_config>

	 nrf24_tx_address(rx_address);
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <app_run+0x54>)
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 f89e 	bl	8002010 <nrf24_tx_address>
	 nrf24_rx_address(tx_address);
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <app_run+0x58>)
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 f886 	bl	8001fe8 <nrf24_rx_address>

	 while (1){
		if(nrf24_dataReady()) {
 8001edc:	f000 f8ac 	bl	8002038 <nrf24_dataReady>
 8001ee0:	1e03      	subs	r3, r0, #0
 8001ee2:	d0fb      	beq.n	8001edc <app_run+0x20>
			nrf24_getData(data_array);
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <app_run+0x5c>)
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 f8d2 	bl	8002090 <nrf24_getData>
			HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 8001eec:	23a0      	movs	r3, #160	; 0xa0
 8001eee:	05db      	lsls	r3, r3, #23
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2120      	movs	r1, #32
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7fe fe8d 	bl	8000c14 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8001efa:	2032      	movs	r0, #50	; 0x32
 8001efc:	f7fe fc30 	bl	8000760 <HAL_Delay>
			HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
 8001f00:	23a0      	movs	r3, #160	; 0xa0
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	2200      	movs	r2, #0
 8001f06:	2120      	movs	r1, #32
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7fe fe83 	bl	8000c14 <HAL_GPIO_WritePin>
		if(nrf24_dataReady()) {
 8001f0e:	e7e5      	b.n	8001edc <app_run+0x20>
 8001f10:	20000014 	.word	0x20000014
 8001f14:	2000000c 	.word	0x2000000c
 8001f18:	200000a0 	.word	0x200000a0

08001f1c <nrf24_init>:

uint8_t payload_len;

/* init the hardware pins */
void nrf24_init() 
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
    nrf24_setupPins();
 8001f20:	f7fe fa9d 	bl	800045e <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7fe fa9f 	bl	8000468 <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f7fe fab0 	bl	8000490 <nrf24_csn_digitalWrite>
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <nrf24_config>:

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	0002      	movs	r2, r0
 8001f40:	1dfb      	adds	r3, r7, #7
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	1dbb      	adds	r3, r7, #6
 8001f46:	1c0a      	adds	r2, r1, #0
 8001f48:	701a      	strb	r2, [r3, #0]
	uint8_t teste = 0;
 8001f4a:	240f      	movs	r4, #15
 8001f4c:	193b      	adds	r3, r7, r4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
    /* Use static payload length ... */
    payload_len = pay_length;
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <nrf24_config+0xac>)
 8001f54:	1dba      	adds	r2, r7, #6
 8001f56:	7812      	ldrb	r2, [r2, #0]
 8001f58:	701a      	strb	r2, [r3, #0]

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	0019      	movs	r1, r3
 8001f60:	2005      	movs	r0, #5
 8001f62:	f000 f94d 	bl	8002200 <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 8001f66:	2100      	movs	r1, #0
 8001f68:	2011      	movs	r0, #17
 8001f6a:	f000 f949 	bl	8002200 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <nrf24_config+0xac>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	0019      	movs	r1, r3
 8001f74:	2012      	movs	r0, #18
 8001f76:	f000 f943 	bl	8002200 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2013      	movs	r0, #19
 8001f7e:	f000 f93f 	bl	8002200 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 8001f82:	2100      	movs	r1, #0
 8001f84:	2014      	movs	r0, #20
 8001f86:	f000 f93b 	bl	8002200 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2015      	movs	r0, #21
 8001f8e:	f000 f937 	bl	8002200 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 8001f92:	2100      	movs	r1, #0
 8001f94:	2016      	movs	r0, #22
 8001f96:	f000 f933 	bl	8002200 <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
 8001f9a:	2106      	movs	r1, #6
 8001f9c:	2006      	movs	r0, #6
 8001f9e:	f000 f92f 	bl	8002200 <nrf24_configRegister>
    nrf24_readRegister(RF_SETUP, &teste, 1);
 8001fa2:	193b      	adds	r3, r7, r4
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	2006      	movs	r0, #6
 8001faa:	f000 f94c 	bl	8002246 <nrf24_readRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 8001fae:	2108      	movs	r1, #8
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f000 f925 	bl	8002200 <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 8001fb6:	2103      	movs	r1, #3
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f000 f921 	bl	8002200 <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 8001fbe:	2103      	movs	r1, #3
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f000 f91d 	bl	8002200 <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 8001fc6:	214f      	movs	r1, #79	; 0x4f
 8001fc8:	2004      	movs	r0, #4
 8001fca:	f000 f919 	bl	8002200 <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 8001fce:	2100      	movs	r1, #0
 8001fd0:	201c      	movs	r0, #28
 8001fd2:	f000 f915 	bl	8002200 <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
 8001fd6:	f000 f88e 	bl	80020f6 <nrf24_powerUpRx>
}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b005      	add	sp, #20
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	200000b0 	.word	0x200000b0

08001fe8 <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    nrf24_ce_digitalWrite(LOW);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7fe fa39 	bl	8000468 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	200b      	movs	r0, #11
 8001ffe:	f000 f946 	bl	800228e <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 8002002:	2001      	movs	r0, #1
 8002004:	f7fe fa30 	bl	8000468 <nrf24_ce_digitalWrite>
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}

08002010 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2205      	movs	r2, #5
 800201c:	0019      	movs	r1, r3
 800201e:	200a      	movs	r0, #10
 8002020:	f000 f935 	bl	800228e <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2205      	movs	r2, #5
 8002028:	0019      	movs	r1, r3
 800202a:	2010      	movs	r0, #16
 800202c:	f000 f92f 	bl	800228e <nrf24_writeRegister>
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b002      	add	sp, #8
 8002036:	bd80      	pop	{r7, pc}

08002038 <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
 800203e:	1dfc      	adds	r4, r7, #7
 8002040:	f000 f844 	bl	80020cc <nrf24_getStatus>
 8002044:	0003      	movs	r3, r0
 8002046:	7023      	strb	r3, [r4, #0]

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2240      	movs	r2, #64	; 0x40
 800204e:	4013      	ands	r3, r2
 8002050:	d001      	beq.n	8002056 <nrf24_dataReady+0x1e>
    {
        return 1;
 8002052:	2301      	movs	r3, #1
 8002054:	e005      	b.n	8002062 <nrf24_dataReady+0x2a>
    }

    return !nrf24_rxFifoEmpty();;
 8002056:	f000 f808 	bl	800206a <nrf24_rxFifoEmpty>
 800205a:	0003      	movs	r3, r0
 800205c:	425a      	negs	r2, r3
 800205e:	4153      	adcs	r3, r2
 8002060:	b2db      	uxtb	r3, r3
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b003      	add	sp, #12
 8002068:	bd90      	pop	{r4, r7, pc}

0800206a <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	2201      	movs	r2, #1
 8002074:	0019      	movs	r1, r3
 8002076:	2017      	movs	r0, #23
 8002078:	f000 f8e5 	bl	8002246 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
 800207c:	1dfb      	adds	r3, r7, #7
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	b2db      	uxtb	r3, r3
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
 8002098:	2000      	movs	r0, #0
 800209a:	f7fe f9f9 	bl	8000490 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
 800209e:	2061      	movs	r0, #97	; 0x61
 80020a0:	f000 f845 	bl	800212e <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <nrf24_getData+0x38>)
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 f855 	bl	800215c <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7fe f9ec 	bl	8000490 <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
 80020b8:	2140      	movs	r1, #64	; 0x40
 80020ba:	2007      	movs	r0, #7
 80020bc:	f000 f8a0 	bl	8002200 <nrf24_configRegister>
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b002      	add	sp, #8
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200000b0 	.word	0x200000b0

080020cc <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7fe f9dc 	bl	8000490 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
 80020d8:	1dfc      	adds	r4, r7, #7
 80020da:	20ff      	movs	r0, #255	; 0xff
 80020dc:	f000 f827 	bl	800212e <spi_transfer>
 80020e0:	0003      	movs	r3, r0
 80020e2:	7023      	strb	r3, [r4, #0]
    nrf24_csn_digitalWrite(HIGH);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7fe f9d3 	bl	8000490 <nrf24_csn_digitalWrite>
    return rv;
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	781b      	ldrb	r3, [r3, #0]
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b003      	add	sp, #12
 80020f4:	bd90      	pop	{r4, r7, pc}

080020f6 <nrf24_powerUpRx>:
        return 0xFF;
    }
}

void nrf24_powerUpRx()
{     
 80020f6:	b580      	push	{r7, lr}
 80020f8:	af00      	add	r7, sp, #0
    nrf24_csn_digitalWrite(LOW);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7fe f9c8 	bl	8000490 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
 8002100:	20e2      	movs	r0, #226	; 0xe2
 8002102:	f000 f814 	bl	800212e <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 8002106:	2001      	movs	r0, #1
 8002108:	f7fe f9c2 	bl	8000490 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 800210c:	2170      	movs	r1, #112	; 0x70
 800210e:	2007      	movs	r0, #7
 8002110:	f000 f876 	bl	8002200 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
 8002114:	2000      	movs	r0, #0
 8002116:	f7fe f9a7 	bl	8000468 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 800211a:	210b      	movs	r1, #11
 800211c:	2000      	movs	r0, #0
 800211e:	f000 f86f 	bl	8002200 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
 8002122:	2001      	movs	r0, #1
 8002124:	f7fe f9a0 	bl	8000468 <nrf24_ce_digitalWrite>
}
 8002128:	46c0      	nop			; (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
 800212e:	b5b0      	push	{r4, r5, r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	0002      	movs	r2, r0
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	701a      	strb	r2, [r3, #0]
    uint8_t rx = 0;    
 800213a:	250f      	movs	r5, #15
 800213c:	197b      	adds	r3, r7, r5
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]

    rx = nrf24_spi_transfer(&tx);
 8002142:	197c      	adds	r4, r7, r5
 8002144:	1dfb      	adds	r3, r7, #7
 8002146:	0018      	movs	r0, r3
 8002148:	f7fe f9b6 	bl	80004b8 <nrf24_spi_transfer>
 800214c:	0003      	movs	r3, r0
 800214e:	7023      	strb	r3, [r4, #0]

    return rx;
 8002150:	197b      	adds	r3, r7, r5
 8002152:	781b      	ldrb	r3, [r3, #0]
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b004      	add	sp, #16
 800215a:	bdb0      	pop	{r4, r5, r7, pc}

0800215c <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
 800215c:	b5b0      	push	{r4, r5, r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for(i=0;i<len;i++)
 800216a:	2317      	movs	r3, #23
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e013      	b.n	800219c <nrf24_transferSync+0x40>
    {
        datain[i] = spi_transfer(dataout[i]);
 8002174:	2517      	movs	r5, #23
 8002176:	197b      	adds	r3, r7, r5
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	18d3      	adds	r3, r2, r3
 800217e:	7819      	ldrb	r1, [r3, #0]
 8002180:	197b      	adds	r3, r7, r5
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	18d4      	adds	r4, r2, r3
 8002188:	0008      	movs	r0, r1
 800218a:	f7ff ffd0 	bl	800212e <spi_transfer>
 800218e:	0003      	movs	r3, r0
 8002190:	7023      	strb	r3, [r4, #0]
    for(i=0;i<len;i++)
 8002192:	197b      	adds	r3, r7, r5
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	197b      	adds	r3, r7, r5
 8002198:	3201      	adds	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	2317      	movs	r3, #23
 800219e:	18fa      	adds	r2, r7, r3
 80021a0:	1dfb      	adds	r3, r7, #7
 80021a2:	7812      	ldrb	r2, [r2, #0]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d3e4      	bcc.n	8002174 <nrf24_transferSync+0x18>
    }

}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b006      	add	sp, #24
 80021b2:	bdb0      	pop	{r4, r5, r7, pc}

080021b4 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	000a      	movs	r2, r1
 80021be:	1cfb      	adds	r3, r7, #3
 80021c0:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    
    for(i=0;i<len;i++)
 80021c2:	230f      	movs	r3, #15
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e00d      	b.n	80021e8 <nrf24_transmitSync+0x34>
    {
        spi_transfer(dataout[i]);
 80021cc:	240f      	movs	r4, #15
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	18d3      	adds	r3, r2, r3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	0018      	movs	r0, r3
 80021da:	f7ff ffa8 	bl	800212e <spi_transfer>
    for(i=0;i<len;i++)
 80021de:	193b      	adds	r3, r7, r4
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	193b      	adds	r3, r7, r4
 80021e4:	3201      	adds	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	230f      	movs	r3, #15
 80021ea:	18fa      	adds	r2, r7, r3
 80021ec:	1cfb      	adds	r3, r7, #3
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d3ea      	bcc.n	80021cc <nrf24_transmitSync+0x18>
    }

}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b005      	add	sp, #20
 80021fe:	bd90      	pop	{r4, r7, pc}

08002200 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	0002      	movs	r2, r0
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	1dbb      	adds	r3, r7, #6
 800220e:	1c0a      	adds	r2, r1, #0
 8002210:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 8002212:	2000      	movs	r0, #0
 8002214:	f7fe f93c 	bl	8000490 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 8002218:	1dfb      	adds	r3, r7, #7
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	221f      	movs	r2, #31
 800221e:	4013      	ands	r3, r2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2220      	movs	r2, #32
 8002224:	4313      	orrs	r3, r2
 8002226:	b2db      	uxtb	r3, r3
 8002228:	0018      	movs	r0, r3
 800222a:	f7ff ff80 	bl	800212e <spi_transfer>
    spi_transfer(value);
 800222e:	1dbb      	adds	r3, r7, #6
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	0018      	movs	r0, r3
 8002234:	f7ff ff7b 	bl	800212e <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 8002238:	2001      	movs	r0, #1
 800223a:	f7fe f929 	bl	8000490 <nrf24_csn_digitalWrite>
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b002      	add	sp, #8
 8002244:	bd80      	pop	{r7, pc}

08002246 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	0011      	movs	r1, r2
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	1c02      	adds	r2, r0, #0
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	1dbb      	adds	r3, r7, #6
 8002258:	1c0a      	adds	r2, r1, #0
 800225a:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 800225c:	2000      	movs	r0, #0
 800225e:	f7fe f917 	bl	8000490 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	221f      	movs	r2, #31
 8002268:	4013      	ands	r3, r2
 800226a:	b2db      	uxtb	r3, r3
 800226c:	0018      	movs	r0, r3
 800226e:	f7ff ff5e 	bl	800212e <spi_transfer>
    nrf24_transferSync(value,value,len);
 8002272:	1dbb      	adds	r3, r7, #6
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff ff6e 	bl	800215c <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
 8002280:	2001      	movs	r0, #1
 8002282:	f7fe f905 	bl	8000490 <nrf24_csn_digitalWrite>
}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	46bd      	mov	sp, r7
 800228a:	b002      	add	sp, #8
 800228c:	bd80      	pop	{r7, pc}

0800228e <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	0011      	movs	r1, r2
 8002298:	1dfb      	adds	r3, r7, #7
 800229a:	1c02      	adds	r2, r0, #0
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	1dbb      	adds	r3, r7, #6
 80022a0:	1c0a      	adds	r2, r1, #0
 80022a2:	701a      	strb	r2, [r3, #0]
    nrf24_csn_digitalWrite(LOW);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7fe f8f3 	bl	8000490 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 80022aa:	1dfb      	adds	r3, r7, #7
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	221f      	movs	r2, #31
 80022b0:	4013      	ands	r3, r2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2220      	movs	r2, #32
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff ff37 	bl	800212e <spi_transfer>
    nrf24_transmitSync(value,len);
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	0011      	movs	r1, r2
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7ff ff73 	bl	80021b4 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f7fe f8de 	bl	8000490 <nrf24_csn_digitalWrite>
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <__libc_init_array>:
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	2600      	movs	r6, #0
 80022e0:	4d0c      	ldr	r5, [pc, #48]	; (8002314 <__libc_init_array+0x38>)
 80022e2:	4c0d      	ldr	r4, [pc, #52]	; (8002318 <__libc_init_array+0x3c>)
 80022e4:	1b64      	subs	r4, r4, r5
 80022e6:	10a4      	asrs	r4, r4, #2
 80022e8:	42a6      	cmp	r6, r4
 80022ea:	d109      	bne.n	8002300 <__libc_init_array+0x24>
 80022ec:	2600      	movs	r6, #0
 80022ee:	f000 f821 	bl	8002334 <_init>
 80022f2:	4d0a      	ldr	r5, [pc, #40]	; (800231c <__libc_init_array+0x40>)
 80022f4:	4c0a      	ldr	r4, [pc, #40]	; (8002320 <__libc_init_array+0x44>)
 80022f6:	1b64      	subs	r4, r4, r5
 80022f8:	10a4      	asrs	r4, r4, #2
 80022fa:	42a6      	cmp	r6, r4
 80022fc:	d105      	bne.n	800230a <__libc_init_array+0x2e>
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
 8002300:	00b3      	lsls	r3, r6, #2
 8002302:	58eb      	ldr	r3, [r5, r3]
 8002304:	4798      	blx	r3
 8002306:	3601      	adds	r6, #1
 8002308:	e7ee      	b.n	80022e8 <__libc_init_array+0xc>
 800230a:	00b3      	lsls	r3, r6, #2
 800230c:	58eb      	ldr	r3, [r5, r3]
 800230e:	4798      	blx	r3
 8002310:	3601      	adds	r6, #1
 8002312:	e7f2      	b.n	80022fa <__libc_init_array+0x1e>
 8002314:	0800238c 	.word	0x0800238c
 8002318:	0800238c 	.word	0x0800238c
 800231c:	0800238c 	.word	0x0800238c
 8002320:	08002390 	.word	0x08002390

08002324 <memset>:
 8002324:	0003      	movs	r3, r0
 8002326:	1882      	adds	r2, r0, r2
 8002328:	4293      	cmp	r3, r2
 800232a:	d100      	bne.n	800232e <memset+0xa>
 800232c:	4770      	bx	lr
 800232e:	7019      	strb	r1, [r3, #0]
 8002330:	3301      	adds	r3, #1
 8002332:	e7f9      	b.n	8002328 <memset+0x4>

08002334 <_init>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233a:	bc08      	pop	{r3}
 800233c:	469e      	mov	lr, r3
 800233e:	4770      	bx	lr

08002340 <_fini>:
 8002340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002346:	bc08      	pop	{r3}
 8002348:	469e      	mov	lr, r3
 800234a:	4770      	bx	lr
