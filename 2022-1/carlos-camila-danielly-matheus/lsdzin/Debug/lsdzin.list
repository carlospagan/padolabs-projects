
lsdzin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002790  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028f0  080028f0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080028f0  080028f0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028f0  080028f0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f4  080028f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080028f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000001c  08002914  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002914  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e22  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0f  00000000  00000000  00029e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002b978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3c2  00000000  00000000  0002cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae8d  00000000  00000000  00046f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8b03  00000000  00000000  00051e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002190  00000000  00000000  000fa968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002834 	.word	0x08002834

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08002834 	.word	0x08002834

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  dpRows = rows;
 8000228:	4b2f      	ldr	r3, [pc, #188]	; (80002e8 <HD44780_Init+0xcc>)
 800022a:	1dfa      	adds	r2, r7, #7
 800022c:	7812      	ldrb	r2, [r2, #0]
 800022e:	701a      	strb	r2, [r3, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000230:	4b2e      	ldr	r3, [pc, #184]	; (80002ec <HD44780_Init+0xd0>)
 8000232:	2208      	movs	r2, #8
 8000234:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000236:	4b2e      	ldr	r3, [pc, #184]	; (80002f0 <HD44780_Init+0xd4>)
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800023c:	4b2a      	ldr	r3, [pc, #168]	; (80002e8 <HD44780_Init+0xcc>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d907      	bls.n	8000254 <HD44780_Init+0x38>
  {
    dpFunction |= LCD_2LINE;
 8000244:	4b2a      	ldr	r3, [pc, #168]	; (80002f0 <HD44780_Init+0xd4>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2208      	movs	r2, #8
 800024a:	4313      	orrs	r3, r2
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b28      	ldr	r3, [pc, #160]	; (80002f0 <HD44780_Init+0xd4>)
 8000250:	701a      	strb	r2, [r3, #0]
 8000252:	e006      	b.n	8000262 <HD44780_Init+0x46>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000254:	4b26      	ldr	r3, [pc, #152]	; (80002f0 <HD44780_Init+0xd4>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2204      	movs	r2, #4
 800025a:	4313      	orrs	r3, r2
 800025c:	b2da      	uxtb	r2, r3
 800025e:	4b24      	ldr	r3, [pc, #144]	; (80002f0 <HD44780_Init+0xd4>)
 8000260:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */

  HAL_Delay(50);
 8000262:	2032      	movs	r0, #50	; 0x32
 8000264:	f000 fcd6 	bl	8000c14 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000268:	4b20      	ldr	r3, [pc, #128]	; (80002ec <HD44780_Init+0xd0>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	0018      	movs	r0, r3
 800026e:	f000 f9db 	bl	8000628 <ExpanderWrite>
  HAL_Delay(1000);
 8000272:	23fa      	movs	r3, #250	; 0xfa
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fccc 	bl	8000c14 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800027c:	2030      	movs	r0, #48	; 0x30
 800027e:	f000 f9bf 	bl	8000600 <Write4Bits>


  Write4Bits(0x03 << 4);
 8000282:	2030      	movs	r0, #48	; 0x30
 8000284:	f000 f9bc 	bl	8000600 <Write4Bits>


  Write4Bits(0x03 << 4);
 8000288:	2030      	movs	r0, #48	; 0x30
 800028a:	f000 f9b9 	bl	8000600 <Write4Bits>


  Write4Bits(0x02 << 4);
 800028e:	2020      	movs	r0, #32
 8000290:	f000 f9b6 	bl	8000600 <Write4Bits>


  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <HD44780_Init+0xd4>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2220      	movs	r2, #32
 800029a:	4313      	orrs	r3, r2
 800029c:	b2db      	uxtb	r3, r3
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 f962 	bl	8000568 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <HD44780_Init+0xd8>)
 80002a6:	2204      	movs	r2, #4
 80002a8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80002aa:	f000 f889 	bl	80003c0 <HD44780_Display>
  HD44780_Clear();
 80002ae:	f000 f829 	bl	8000304 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <HD44780_Init+0xdc>)
 80002b4:	2202      	movs	r2, #2
 80002b6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <HD44780_Init+0xdc>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2204      	movs	r2, #4
 80002be:	4313      	orrs	r3, r2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 f950 	bl	8000568 <SendCommand>

  HD44780_CreateSpecialChar(0, special1);
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <HD44780_Init+0xe0>)
 80002ca:	0019      	movs	r1, r3
 80002cc:	2000      	movs	r0, #0
 80002ce:	f000 f8ed 	bl	80004ac <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <HD44780_Init+0xe4>)
 80002d4:	0019      	movs	r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	f000 f8e8 	bl	80004ac <HD44780_CreateSpecialChar>

  HD44780_Home();
 80002dc:	f000 f81a 	bl	8000314 <HD44780_Home>
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b002      	add	sp, #8
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	2000003a 	.word	0x2000003a
 80002ec:	2000003c 	.word	0x2000003c
 80002f0:	20000038 	.word	0x20000038
 80002f4:	2000003b 	.word	0x2000003b
 80002f8:	20000039 	.word	0x20000039
 80002fc:	20000000 	.word	0x20000000
 8000300:	20000008 	.word	0x20000008

08000304 <HD44780_Clear>:

void HD44780_Clear()
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000308:	2001      	movs	r0, #1
 800030a:	f000 f92d 	bl	8000568 <SendCommand>

}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <HD44780_Home>:

void HD44780_Home()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000318:	2002      	movs	r0, #2
 800031a:	f000 f925 	bl	8000568 <SendCommand>
}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	0002      	movs	r2, r0
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	701a      	strb	r2, [r3, #0]
 8000330:	1dbb      	adds	r3, r7, #6
 8000332:	1c0a      	adds	r2, r1, #0
 8000334:	701a      	strb	r2, [r3, #0]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000336:	2308      	movs	r3, #8
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <HD44780_SetCursor+0x68>)
 800033c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800033e:	c313      	stmia	r3!, {r0, r1, r4}
 8000340:	6812      	ldr	r2, [r2, #0]
 8000342:	601a      	str	r2, [r3, #0]
  if (row >= dpRows)
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <HD44780_SetCursor+0x6c>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	1dba      	adds	r2, r7, #6
 800034a:	7812      	ldrb	r2, [r2, #0]
 800034c:	429a      	cmp	r2, r3
 800034e:	d304      	bcc.n	800035a <HD44780_SetCursor+0x36>
  {
    row = dpRows-1;
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <HD44780_SetCursor+0x6c>)
 8000352:	781a      	ldrb	r2, [r3, #0]
 8000354:	1dbb      	adds	r3, r7, #6
 8000356:	3a01      	subs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800035a:	1dbb      	adds	r3, r7, #6
 800035c:	781a      	ldrb	r2, [r3, #0]
 800035e:	2308      	movs	r3, #8
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	0092      	lsls	r2, r2, #2
 8000364:	58d3      	ldr	r3, [r2, r3]
 8000366:	b2da      	uxtb	r2, r3
 8000368:	1dfb      	adds	r3, r7, #7
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	18d3      	adds	r3, r2, r3
 800036e:	b2db      	uxtb	r3, r3
 8000370:	b25b      	sxtb	r3, r3
 8000372:	2280      	movs	r2, #128	; 0x80
 8000374:	4252      	negs	r2, r2
 8000376:	4313      	orrs	r3, r2
 8000378:	b25b      	sxtb	r3, r3
 800037a:	b2db      	uxtb	r3, r3
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f3 	bl	8000568 <SendCommand>
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b007      	add	sp, #28
 8000388:	bd90      	pop	{r4, r7, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	0800284c 	.word	0x0800284c
 8000390:	2000003a 	.word	0x2000003a

08000394 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <HD44780_NoDisplay+0x28>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2204      	movs	r2, #4
 800039e:	4393      	bics	r3, r2
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <HD44780_NoDisplay+0x28>)
 80003a4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <HD44780_NoDisplay+0x28>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2208      	movs	r2, #8
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 f8d9 	bl	8000568 <SendCommand>
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	2000003b 	.word	0x2000003b

080003c0 <HD44780_Display>:

void HD44780_Display()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <HD44780_Display+0x28>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2204      	movs	r2, #4
 80003ca:	4313      	orrs	r3, r2
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HD44780_Display+0x28>)
 80003d0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <HD44780_Display+0x28>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2208      	movs	r2, #8
 80003d8:	4313      	orrs	r3, r2
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 f8c3 	bl	8000568 <SendCommand>
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2000003b 	.word	0x2000003b

080003ec <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <HD44780_NoCursor+0x28>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2202      	movs	r2, #2
 80003f6:	4393      	bics	r3, r2
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <HD44780_NoCursor+0x28>)
 80003fc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <HD44780_NoCursor+0x28>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2208      	movs	r2, #8
 8000404:	4313      	orrs	r3, r2
 8000406:	b2db      	uxtb	r3, r3
 8000408:	0018      	movs	r0, r3
 800040a:	f000 f8ad 	bl	8000568 <SendCommand>
}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000003b 	.word	0x2000003b

08000418 <HD44780_Cursor>:

void HD44780_Cursor()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <HD44780_Cursor+0x28>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2202      	movs	r2, #2
 8000422:	4313      	orrs	r3, r2
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HD44780_Cursor+0x28>)
 8000428:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800042a:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HD44780_Cursor+0x28>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2208      	movs	r2, #8
 8000430:	4313      	orrs	r3, r2
 8000432:	b2db      	uxtb	r3, r3
 8000434:	0018      	movs	r0, r3
 8000436:	f000 f897 	bl	8000568 <SendCommand>
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	2000003b 	.word	0x2000003b

08000444 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <HD44780_NoBlink+0x28>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2201      	movs	r2, #1
 800044e:	4393      	bics	r3, r2
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <HD44780_NoBlink+0x28>)
 8000454:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <HD44780_NoBlink+0x28>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2208      	movs	r2, #8
 800045c:	4313      	orrs	r3, r2
 800045e:	b2db      	uxtb	r3, r3
 8000460:	0018      	movs	r0, r3
 8000462:	f000 f881 	bl	8000568 <SendCommand>
}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000003b 	.word	0x2000003b

08000470 <HD44780_Blink>:

void HD44780_Blink()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <HD44780_Blink+0x28>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2201      	movs	r2, #1
 800047a:	4313      	orrs	r3, r2
 800047c:	b2da      	uxtb	r2, r3
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <HD44780_Blink+0x28>)
 8000480:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <HD44780_Blink+0x28>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2208      	movs	r2, #8
 8000488:	4313      	orrs	r3, r2
 800048a:	b2db      	uxtb	r3, r3
 800048c:	0018      	movs	r0, r3
 800048e:	f000 f86b 	bl	8000568 <SendCommand>
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2000003b 	.word	0x2000003b

0800049c <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80004a0:	2018      	movs	r0, #24
 80004a2:	f000 f861 	bl	8000568 <SendCommand>
}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	0002      	movs	r2, r0
 80004b4:	6039      	str	r1, [r7, #0]
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	701a      	strb	r2, [r3, #0]
  location &= 0x7;
 80004ba:	1dfb      	adds	r3, r7, #7
 80004bc:	1dfa      	adds	r2, r7, #7
 80004be:	7812      	ldrb	r2, [r2, #0]
 80004c0:	2107      	movs	r1, #7
 80004c2:	400a      	ands	r2, r1
 80004c4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	2240      	movs	r2, #64	; 0x40
 80004d0:	4313      	orrs	r3, r2
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	0018      	movs	r0, r3
 80004d8:	f000 f846 	bl	8000568 <SendCommand>
  for (int i=0; i<8; i++)
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e009      	b.n	80004f6 <HD44780_CreateSpecialChar+0x4a>
  {
    SendChar(charmap[i]);
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	18d3      	adds	r3, r2, r3
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 f84c 	bl	8000588 <SendChar>
  for (int i=0; i<8; i++)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	ddf2      	ble.n	80004e2 <HD44780_CreateSpecialChar+0x36>
  }
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b004      	add	sp, #16
 8000504:	bd80      	pop	{r7, pc}

08000506 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800050e:	e006      	b.n	800051e <HD44780_PrintStr+0x18>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	0018      	movs	r0, r3
 800051a:	f000 f835 	bl	8000588 <SendChar>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1f4      	bne.n	8000510 <HD44780_PrintStr+0xa>
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}

08000530 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HD44780_NoBacklight+0x18>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800053a:	2000      	movs	r0, #0
 800053c:	f000 f874 	bl	8000628 <ExpanderWrite>
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	2000003c 	.word	0x2000003c

0800054c <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <HD44780_Backlight+0x18>)
 8000552:	2208      	movs	r2, #8
 8000554:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000556:	2000      	movs	r0, #0
 8000558:	f000 f866 	bl	8000628 <ExpanderWrite>
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	2000003c 	.word	0x2000003c

08000568 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
  Send(cmd, 0);
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2100      	movs	r1, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f814 	bl	80005a8 <Send>
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}

08000588 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	0002      	movs	r2, r0
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	701a      	strb	r2, [r3, #0]
  Send(ch, RS);
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2101      	movs	r1, #1
 800059a:	0018      	movs	r0, r3
 800059c:	f000 f804 	bl	80005a8 <Send>
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	0002      	movs	r2, r0
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	1dbb      	adds	r3, r7, #6
 80005b6:	1c0a      	adds	r2, r1, #0
 80005b8:	701a      	strb	r2, [r3, #0]
  uint8_t highnib = value & 0xF0;
 80005ba:	200f      	movs	r0, #15
 80005bc:	183b      	adds	r3, r7, r0
 80005be:	1dfa      	adds	r2, r7, #7
 80005c0:	7812      	ldrb	r2, [r2, #0]
 80005c2:	210f      	movs	r1, #15
 80005c4:	438a      	bics	r2, r1
 80005c6:	701a      	strb	r2, [r3, #0]
  uint8_t lownib = (value<<4) & 0xF0;
 80005c8:	1dfb      	adds	r3, r7, #7
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	011a      	lsls	r2, r3, #4
 80005ce:	240e      	movs	r4, #14
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	701a      	strb	r2, [r3, #0]
  Write4Bits((highnib)|mode);
 80005d4:	183a      	adds	r2, r7, r0
 80005d6:	1dbb      	adds	r3, r7, #6
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4313      	orrs	r3, r2
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 f80d 	bl	8000600 <Write4Bits>
  Write4Bits((lownib)|mode);
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	1dbb      	adds	r3, r7, #6
 80005ea:	7812      	ldrb	r2, [r2, #0]
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 f804 	bl	8000600 <Write4Bits>
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b005      	add	sp, #20
 80005fe:	bd90      	pop	{r4, r7, pc}

08000600 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	0002      	movs	r2, r0
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(value);
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	0018      	movs	r0, r3
 8000612:	f000 f809 	bl	8000628 <ExpanderWrite>
  PulseEnable(value);
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	0018      	movs	r0, r3
 800061c:	f000 f824 	bl	8000668 <PulseEnable>
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b002      	add	sp, #8
 8000626:	bd80      	pop	{r7, pc}

08000628 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af02      	add	r7, sp, #8
 800062e:	0002      	movs	r2, r0
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	701a      	strb	r2, [r3, #0]
  uint8_t data = _data | dpBacklight;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <ExpanderWrite+0x38>)
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4313      	orrs	r3, r2
 800063e:	b2da      	uxtb	r2, r3
 8000640:	210f      	movs	r1, #15
 8000642:	187b      	adds	r3, r7, r1
 8000644:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000646:	187a      	adds	r2, r7, r1
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <ExpanderWrite+0x3c>)
 800064a:	230a      	movs	r3, #10
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	214e      	movs	r1, #78	; 0x4e
 8000652:	f000 fdcf 	bl	80011f4 <HAL_I2C_Master_Transmit>
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b004      	add	sp, #16
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	2000003c 	.word	0x2000003c
 8000664:	20000044 	.word	0x20000044

08000668 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	0002      	movs	r2, r0
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(_data | ENABLE);
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2204      	movs	r2, #4
 800067a:	4313      	orrs	r3, r2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff ffd2 	bl	8000628 <ExpanderWrite>


  ExpanderWrite(_data & ~ENABLE);
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2204      	movs	r2, #4
 800068a:	4393      	bics	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff ffca 	bl	8000628 <ExpanderWrite>

}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 fa31 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f8a3 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f000 f929 	bl	8000900 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ae:	f000 f8e7 	bl	8000880 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f7ff fdb2 	bl	800021c <HD44780_Init>
    HD44780_Clear();
 80006b8:	f7ff fe24 	bl	8000304 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 80006bc:	2100      	movs	r1, #0
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff fe30 	bl	8000324 <HD44780_SetCursor>
    HD44780_PrintStr("teSte");
 80006c4:	4b45      	ldr	r3, [pc, #276]	; (80007dc <main+0x140>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff ff1d 	bl	8000506 <HD44780_PrintStr>
    HD44780_SetCursor(9,1);
 80006cc:	2101      	movs	r1, #1
 80006ce:	2009      	movs	r0, #9
 80006d0:	f7ff fe28 	bl	8000324 <HD44780_SetCursor>
    HD44780_PrintStr("TEsTe");
 80006d4:	4b42      	ldr	r3, [pc, #264]	; (80007e0 <main+0x144>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff ff15 	bl	8000506 <HD44780_PrintStr>
    HAL_Delay(2000);
 80006dc:	23fa      	movs	r3, #250	; 0xfa
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fa97 	bl	8000c14 <HAL_Delay>

    HD44780_Clear();
 80006e6:	f7ff fe0d 	bl	8000304 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 80006ea:	2100      	movs	r1, #0
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff fe19 	bl	8000324 <HD44780_SetCursor>
    HD44780_PrintStr("bao fi");
 80006f2:	4b3c      	ldr	r3, [pc, #240]	; (80007e4 <main+0x148>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f7ff ff06 	bl	8000506 <HD44780_PrintStr>
    HAL_Delay(2000);
 80006fa:	23fa      	movs	r3, #250	; 0xfa
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 fa88 	bl	8000c14 <HAL_Delay>
    HD44780_NoBacklight();
 8000704:	f7ff ff14 	bl	8000530 <HD44780_NoBacklight>
    HAL_Delay(2000);
 8000708:	23fa      	movs	r3, #250	; 0xfa
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	0018      	movs	r0, r3
 800070e:	f000 fa81 	bl	8000c14 <HAL_Delay>
    HD44780_Backlight();
 8000712:	f7ff ff1b 	bl	800054c <HD44780_Backlight>

    HAL_Delay(2000);
 8000716:	23fa      	movs	r3, #250	; 0xfa
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fa7a 	bl	8000c14 <HAL_Delay>
    HD44780_Cursor();
 8000720:	f7ff fe7a 	bl	8000418 <HD44780_Cursor>
    HAL_Delay(2000);
 8000724:	23fa      	movs	r3, #250	; 0xfa
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fa73 	bl	8000c14 <HAL_Delay>
    HD44780_Blink();
 800072e:	f7ff fe9f 	bl	8000470 <HD44780_Blink>
    HAL_Delay(5000);
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <main+0x14c>)
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fa6d 	bl	8000c14 <HAL_Delay>
    HD44780_NoBlink();
 800073a:	f7ff fe83 	bl	8000444 <HD44780_NoBlink>
    HAL_Delay(2000);
 800073e:	23fa      	movs	r3, #250	; 0xfa
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fa66 	bl	8000c14 <HAL_Delay>
    HD44780_NoCursor();
 8000748:	f7ff fe50 	bl	80003ec <HD44780_NoCursor>
    HAL_Delay(2000);
 800074c:	23fa      	movs	r3, #250	; 0xfa
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fa5f 	bl	8000c14 <HAL_Delay>

    HD44780_NoDisplay();
 8000756:	f7ff fe1d 	bl	8000394 <HD44780_NoDisplay>
    HAL_Delay(2000);
 800075a:	23fa      	movs	r3, #250	; 0xfa
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fa58 	bl	8000c14 <HAL_Delay>
    HD44780_Display();
 8000764:	f7ff fe2c 	bl	80003c0 <HD44780_Display>

    HD44780_Clear();
 8000768:	f7ff fdcc 	bl	8000304 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800076c:	2100      	movs	r1, #0
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff fdd8 	bl	8000324 <HD44780_SetCursor>
    HD44780_PrintStr("Opa eae vei blz?:-)");
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <main+0x150>)
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff fec5 	bl	8000506 <HD44780_PrintStr>

    for(int x=0; x<40; x=x+1)
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	e009      	b.n	8000796 <main+0xfa>
    {
      HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000782:	f7ff fe8b 	bl	800049c <HD44780_ScrollDisplayLeft>
      HAL_Delay(500);
 8000786:	23fa      	movs	r3, #250	; 0xfa
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fa42 	bl	8000c14 <HAL_Delay>
    for(int x=0; x<40; x=x+1)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3301      	adds	r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b27      	cmp	r3, #39	; 0x27
 800079a:	ddf2      	ble.n	8000782 <main+0xe6>
    }

    char snum[5];
    for ( int x = 1; x <= 200 ; x++ )
 800079c:	2301      	movs	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	e017      	b.n	80007d2 <main+0x136>

    {
      itoa(x, snum, 10);
 80007a2:	0039      	movs	r1, r7
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	220a      	movs	r2, #10
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 fff7 	bl	800279c <itoa>
      HD44780_Clear();
 80007ae:	f7ff fda9 	bl	8000304 <HD44780_Clear>
      HD44780_SetCursor(0,0);
 80007b2:	2100      	movs	r1, #0
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff fdb5 	bl	8000324 <HD44780_SetCursor>
      HD44780_PrintStr(snum);
 80007ba:	003b      	movs	r3, r7
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fea2 	bl	8000506 <HD44780_PrintStr>
      HAL_Delay (500);
 80007c2:	23fa      	movs	r3, #250	; 0xfa
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fa24 	bl	8000c14 <HAL_Delay>
    for ( int x = 1; x <= 200 ; x++ )
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	3301      	adds	r3, #1
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	2bc8      	cmp	r3, #200	; 0xc8
 80007d6:	dde4      	ble.n	80007a2 <main+0x106>
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <main+0x13c>
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	0800285c 	.word	0x0800285c
 80007e0:	08002864 	.word	0x08002864
 80007e4:	0800286c 	.word	0x0800286c
 80007e8:	00001388 	.word	0x00001388
 80007ec:	08002874 	.word	0x08002874

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b095      	sub	sp, #84	; 0x54
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	2414      	movs	r4, #20
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0018      	movs	r0, r3
 80007fc:	233c      	movs	r3, #60	; 0x3c
 80007fe:	001a      	movs	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	f001 ffcf 	bl	80027a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	0018      	movs	r0, r3
 800080a:	2310      	movs	r3, #16
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f001 ffc8 	bl	80027a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	0018      	movs	r0, r3
 800081a:	f001 f817 	bl	800184c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2202      	movs	r2, #2
 8000822:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	0052      	lsls	r2, r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2240      	movs	r2, #64	; 0x40
 8000836:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	193b      	adds	r3, r7, r4
 8000840:	0018      	movs	r0, r3
 8000842:	f001 f843 	bl	80018cc <HAL_RCC_OscConfig>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800084a:	f000 f887 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2207      	movs	r2, #7
 8000852:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2100      	movs	r1, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fb94 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000874:	f000 f872 	bl	800095c <Error_Handler>
  }
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b015      	add	sp, #84	; 0x54
 800087e:	bd90      	pop	{r4, r7, pc}

08000880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_I2C1_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_I2C1_Init+0x74>)
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <MX_I2C1_Init+0x7c>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000898:	2201      	movs	r2, #1
 800089a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fc03 	bl	80010c8 <HAL_I2C_Init>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008c6:	f000 f849 	bl	800095c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 ff24 	bl	800171c <HAL_I2CEx_ConfigAnalogFilter>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d8:	f000 f840 	bl	800095c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008de:	2100      	movs	r1, #0
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 ff67 	bl	80017b4 <HAL_I2CEx_ConfigDigitalFilter>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 f837 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000044 	.word	0x20000044
 80008f8:	40005400 	.word	0x40005400
 80008fc:	00303d5b 	.word	0x00303d5b

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_GPIO_Init+0x58>)
 8000908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_GPIO_Init+0x58>)
 800090c:	2104      	movs	r1, #4
 800090e:	430a      	orrs	r2, r1
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_GPIO_Init+0x58>)
 8000914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000916:	2204      	movs	r2, #4
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_GPIO_Init+0x58>)
 8000920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_GPIO_Init+0x58>)
 8000924:	2120      	movs	r1, #32
 8000926:	430a      	orrs	r2, r1
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_GPIO_Init+0x58>)
 800092c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092e:	2220      	movs	r2, #32
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_GPIO_Init+0x58>)
 8000938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_GPIO_Init+0x58>)
 800093c:	2101      	movs	r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <MX_GPIO_Init+0x58>)
 8000944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000946:	2201      	movs	r2, #1
 8000948:	4013      	ands	r3, r2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40021000 	.word	0x40021000

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_MspInit+0x4c>)
 8000970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	2101      	movs	r1, #1
 8000976:	430a      	orrs	r2, r1
 8000978:	641a      	str	r2, [r3, #64]	; 0x40
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	2201      	movs	r2, #1
 8000980:	4013      	ands	r3, r2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_MspInit+0x4c>)
 8000988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_MspInit+0x4c>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0549      	lsls	r1, r1, #21
 8000990:	430a      	orrs	r2, r1
 8000992:	63da      	str	r2, [r3, #60]	; 0x3c
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <HAL_MspInit+0x4c>)
 8000996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	055b      	lsls	r3, r3, #21
 800099c:	4013      	ands	r3, r2
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009a2:	23c0      	movs	r3, #192	; 0xc0
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f958 	bl	8000c5c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b09d      	sub	sp, #116	; 0x74
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	235c      	movs	r3, #92	; 0x5c
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f001 feea 	bl	80027a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	2410      	movs	r4, #16
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	0018      	movs	r0, r3
 80009d6:	234c      	movs	r3, #76	; 0x4c
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f001 fee2 	bl	80027a4 <memset>
  if(hi2c->Instance==I2C1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a23      	ldr	r2, [pc, #140]	; (8000a74 <HAL_I2C_MspInit+0xbc>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d13f      	bne.n	8000a6a <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2220      	movs	r2, #32
 80009ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	0018      	movs	r0, r3
 80009fa:	f001 fc57 	bl	80022ac <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a02:	f7ff ffab 	bl	800095c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_I2C_MspInit+0xc0>)
 8000a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_I2C_MspInit+0xc0>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	635a      	str	r2, [r3, #52]	; 0x34
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_I2C_MspInit+0xc0>)
 8000a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a16:	2201      	movs	r2, #1
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a1e:	215c      	movs	r1, #92	; 0x5c
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	22c0      	movs	r2, #192	; 0xc0
 8000a24:	00d2      	lsls	r2, r2, #3
 8000a26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2212      	movs	r2, #18
 8000a2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2206      	movs	r2, #6
 8000a3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	187a      	adds	r2, r7, r1
 8000a42:	23a0      	movs	r3, #160	; 0xa0
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 f9d1 	bl	8000df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_I2C_MspInit+0xc0>)
 8000a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_I2C_MspInit+0xc0>)
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	0389      	lsls	r1, r1, #14
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_I2C_MspInit+0xc0>)
 8000a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	039b      	lsls	r3, r3, #14
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b01d      	add	sp, #116	; 0x74
 8000a70:	bd90      	pop	{r4, r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f89c 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab8:	f7ff fff7 	bl	8000aaa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	; (8000af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <LoopForever+0xe>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	; (8000b00 <LoopForever+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae2:	f001 fe1f 	bl	8002724 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ae6:	f7ff fdd9 	bl	800069c <main>

08000aea <LoopForever>:

LoopForever:
  b LoopForever
 8000aea:	e7fe      	b.n	8000aea <LoopForever>
  ldr   r0, =_estack
 8000aec:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000af8:	080028f8 	.word	0x080028f8
  ldr r2, =_sbss
 8000afc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b00:	20000094 	.word	0x20000094

08000b04 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC1_COMP_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_Init+0x3c>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_Init+0x3c>)
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	0049      	lsls	r1, r1, #1
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b22:	2003      	movs	r0, #3
 8000b24:	f000 f810 	bl	8000b48 <HAL_InitTick>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	e001      	b.n	8000b38 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff ff18 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	230f      	movs	r3, #15
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_InitTick+0x88>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d02b      	beq.n	8000bb8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_InitTick+0x8c>)
 8000b62:	681c      	ldr	r4, [r3, #0]
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_InitTick+0x88>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	0019      	movs	r1, r3
 8000b6a:	23fa      	movs	r3, #250	; 0xfa
 8000b6c:	0098      	lsls	r0, r3, #2
 8000b6e:	f7ff fac9 	bl	8000104 <__udivsi3>
 8000b72:	0003      	movs	r3, r0
 8000b74:	0019      	movs	r1, r3
 8000b76:	0020      	movs	r0, r4
 8000b78:	f7ff fac4 	bl	8000104 <__udivsi3>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f929 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d112      	bne.n	8000bae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d80a      	bhi.n	8000ba4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 f908 	bl	8000dac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_InitTick+0x90>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	e00d      	b.n	8000bc0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e008      	b.n	8000bc0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bae:	230f      	movs	r3, #15
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e003      	b.n	8000bc0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb8:	230f      	movs	r3, #15
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	781b      	ldrb	r3, [r3, #0]
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b005      	add	sp, #20
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	20000018 	.word	0x20000018
 8000bd4:	20000010 	.word	0x20000010
 8000bd8:	20000014 	.word	0x20000014

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	001a      	movs	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	18d2      	adds	r2, r2, r3
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_IncTick+0x20>)
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	20000018 	.word	0x20000018
 8000bfc:	20000090 	.word	0x20000090

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	20000090 	.word	0x20000090

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff fff0 	bl	8000c00 <HAL_GetTick>
 8000c20:	0003      	movs	r3, r0
 8000c22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	001a      	movs	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	189b      	adds	r3, r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	f7ff ffe0 	bl	8000c00 <HAL_GetTick>
 8000c40:	0002      	movs	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	20000018 	.word	0x20000018

08000c5c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	40010000 	.word	0x40010000
 8000c84:	fffff9ff 	.word	0xfffff9ff

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	0002      	movs	r2, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c9c:	d828      	bhi.n	8000cf0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <__NVIC_SetPriority+0xd4>)
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	33c0      	adds	r3, #192	; 0xc0
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	589b      	ldr	r3, [r3, r2]
 8000cae:	1dfa      	adds	r2, r7, #7
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	00d2      	lsls	r2, r2, #3
 8000cba:	21ff      	movs	r1, #255	; 0xff
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	000a      	movs	r2, r1
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	019b      	lsls	r3, r3, #6
 8000cca:	22ff      	movs	r2, #255	; 0xff
 8000ccc:	401a      	ands	r2, r3
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	4003      	ands	r3, r0
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cdc:	481f      	ldr	r0, [pc, #124]	; (8000d5c <__NVIC_SetPriority+0xd4>)
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	33c0      	adds	r3, #192	; 0xc0
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cee:	e031      	b.n	8000d54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <__NVIC_SetPriority+0xd8>)
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	3b08      	subs	r3, #8
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	3306      	adds	r3, #6
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	3304      	adds	r3, #4
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1dfa      	adds	r2, r7, #7
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	0011      	movs	r1, r2
 8000d10:	2203      	movs	r2, #3
 8000d12:	400a      	ands	r2, r1
 8000d14:	00d2      	lsls	r2, r2, #3
 8000d16:	21ff      	movs	r1, #255	; 0xff
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	019b      	lsls	r3, r3, #6
 8000d26:	22ff      	movs	r2, #255	; 0xff
 8000d28:	401a      	ands	r2, r3
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	2303      	movs	r3, #3
 8000d32:	4003      	ands	r3, r0
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <__NVIC_SetPriority+0xd8>)
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	001c      	movs	r4, r3
 8000d40:	230f      	movs	r3, #15
 8000d42:	4023      	ands	r3, r4
 8000d44:	3b08      	subs	r3, #8
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	3306      	adds	r3, #6
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	18c3      	adds	r3, r0, r3
 8000d50:	3304      	adds	r3, #4
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b003      	add	sp, #12
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	1e5a      	subs	r2, r3, #1
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	045b      	lsls	r3, r3, #17
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d301      	bcc.n	8000d7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e010      	b.n	8000d9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <SysTick_Config+0x44>)
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	3a01      	subs	r2, #1
 8000d82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d84:	2301      	movs	r3, #1
 8000d86:	425b      	negs	r3, r3
 8000d88:	2103      	movs	r1, #3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff ff7c 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x44>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x44>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	210f      	movs	r1, #15
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	1c02      	adds	r2, r0, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b004      	add	sp, #16
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff ffbf 	bl	8000d64 <SysTick_Config>
 8000de6:	0003      	movs	r3, r0
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfe:	e14d      	b.n	800109c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d100      	bne.n	8000e18 <HAL_GPIO_Init+0x28>
 8000e16:	e13e      	b.n	8001096 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d005      	beq.n	8000e30 <HAL_GPIO_Init+0x40>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2203      	movs	r2, #3
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d130      	bne.n	8000e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	409a      	lsls	r2, r3
 8000e3e:	0013      	movs	r3, r2
 8000e40:	43da      	mvns	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	409a      	lsls	r2, r3
 8000e52:	0013      	movs	r3, r2
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e66:	2201      	movs	r2, #1
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	091b      	lsrs	r3, r3, #4
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2203      	movs	r2, #3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d017      	beq.n	8000ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d123      	bne.n	8000f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	08da      	lsrs	r2, r3, #3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3208      	adds	r2, #8
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	58d3      	ldr	r3, [r2, r3]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2207      	movs	r2, #7
 8000eec:	4013      	ands	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	691a      	ldr	r2, [r3, #16]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	2107      	movs	r1, #7
 8000f06:	400b      	ands	r3, r1
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	0092      	lsls	r2, r2, #2
 8000f1e:	6939      	ldr	r1, [r7, #16]
 8000f20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	43da      	mvns	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2203      	movs	r2, #3
 8000f40:	401a      	ands	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	23c0      	movs	r3, #192	; 0xc0
 8000f5c:	029b      	lsls	r3, r3, #10
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d100      	bne.n	8000f64 <HAL_GPIO_Init+0x174>
 8000f62:	e098      	b.n	8001096 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f64:	4a53      	ldr	r2, [pc, #332]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3318      	adds	r3, #24
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	589b      	ldr	r3, [r3, r2]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2203      	movs	r2, #3
 8000f76:	4013      	ands	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	43da      	mvns	r2, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	23a0      	movs	r3, #160	; 0xa0
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d019      	beq.n	8000fc6 <HAL_GPIO_Init+0x1d6>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <HAL_GPIO_Init+0x2c8>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x1d2>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a47      	ldr	r2, [pc, #284]	; (80010bc <HAL_GPIO_Init+0x2cc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x1ce>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x1ca>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a45      	ldr	r2, [pc, #276]	; (80010c4 <HAL_GPIO_Init+0x2d4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x1c6>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x1d8>
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x1d8>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x1d8>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x1d8>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x1d8>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	2103      	movs	r1, #3
 8000fcc:	400a      	ands	r2, r1
 8000fce:	00d2      	lsls	r2, r2, #3
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fd8:	4936      	ldr	r1, [pc, #216]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3318      	adds	r3, #24
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fe6:	4a33      	ldr	r2, [pc, #204]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	58d3      	ldr	r3, [r2, r3]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	025b      	lsls	r3, r3, #9
 8001000:	4013      	ands	r3, r2
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800100c:	4929      	ldr	r1, [pc, #164]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 8001016:	2384      	movs	r3, #132	; 0x84
 8001018:	58d3      	ldr	r3, [r2, r3]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	4013      	ands	r3, r2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800103a:	491e      	ldr	r1, [pc, #120]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 800103c:	2284      	movs	r2, #132	; 0x84
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43da      	mvns	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	035b      	lsls	r3, r3, #13
 800105a:	4013      	ands	r3, r2
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	039b      	lsls	r3, r3, #14
 8001084:	4013      	ands	r3, r2
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_GPIO_Init+0x2c4>)
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	40da      	lsrs	r2, r3
 80010a4:	1e13      	subs	r3, r2, #0
 80010a6:	d000      	beq.n	80010aa <HAL_GPIO_Init+0x2ba>
 80010a8:	e6aa      	b.n	8000e00 <HAL_GPIO_Init+0x10>
  }
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b006      	add	sp, #24
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021800 	.word	0x40021800
 80010b8:	50000400 	.word	0x50000400
 80010bc:	50000800 	.word	0x50000800
 80010c0:	50000c00 	.word	0x50000c00
 80010c4:	50001000 	.word	0x50001000

080010c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e082      	b.n	80011e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2241      	movs	r2, #65	; 0x41
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d107      	bne.n	80010f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	2100      	movs	r1, #0
 80010ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff fc61 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2241      	movs	r2, #65	; 0x41
 80010fa:	2124      	movs	r1, #36	; 0x24
 80010fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	438a      	bics	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4934      	ldr	r1, [pc, #208]	; (80011e8 <HAL_I2C_Init+0x120>)
 8001118:	400a      	ands	r2, r1
 800111a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4931      	ldr	r1, [pc, #196]	; (80011ec <HAL_I2C_Init+0x124>)
 8001128:	400a      	ands	r2, r1
 800112a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	0209      	lsls	r1, r1, #8
 8001140:	430a      	orrs	r2, r1
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	e007      	b.n	8001156 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2184      	movs	r1, #132	; 0x84
 8001150:	0209      	lsls	r1, r1, #8
 8001152:	430a      	orrs	r2, r1
 8001154:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2b02      	cmp	r3, #2
 800115c:	d104      	bne.n	8001168 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	491f      	ldr	r1, [pc, #124]	; (80011f0 <HAL_I2C_Init+0x128>)
 8001174:	430a      	orrs	r2, r1
 8001176:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	491a      	ldr	r1, [pc, #104]	; (80011ec <HAL_I2C_Init+0x124>)
 8001184:	400a      	ands	r2, r1
 8001186:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	431a      	orrs	r2, r3
 8001192:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69d9      	ldr	r1, [r3, #28]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a1a      	ldr	r2, [r3, #32]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2241      	movs	r2, #65	; 0x41
 80011cc:	2120      	movs	r1, #32
 80011ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2242      	movs	r2, #66	; 0x42
 80011da:	2100      	movs	r1, #0
 80011dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	f0ffffff 	.word	0xf0ffffff
 80011ec:	ffff7fff 	.word	0xffff7fff
 80011f0:	02008000 	.word	0x02008000

080011f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	0008      	movs	r0, r1
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	0019      	movs	r1, r3
 8001202:	230a      	movs	r3, #10
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	1c02      	adds	r2, r0, #0
 8001208:	801a      	strh	r2, [r3, #0]
 800120a:	2308      	movs	r3, #8
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	1c0a      	adds	r2, r1, #0
 8001210:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2241      	movs	r2, #65	; 0x41
 8001216:	5c9b      	ldrb	r3, [r3, r2]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b20      	cmp	r3, #32
 800121c:	d000      	beq.n	8001220 <HAL_I2C_Master_Transmit+0x2c>
 800121e:	e0e7      	b.n	80013f0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2240      	movs	r2, #64	; 0x40
 8001224:	5c9b      	ldrb	r3, [r3, r2]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_I2C_Master_Transmit+0x3a>
 800122a:	2302      	movs	r3, #2
 800122c:	e0e1      	b.n	80013f2 <HAL_I2C_Master_Transmit+0x1fe>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2240      	movs	r2, #64	; 0x40
 8001232:	2101      	movs	r1, #1
 8001234:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001236:	f7ff fce3 	bl	8000c00 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	0219      	lsls	r1, r3, #8
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2319      	movs	r3, #25
 800124a:	2201      	movs	r2, #1
 800124c:	f000 f8fc 	bl	8001448 <I2C_WaitOnFlagUntilTimeout>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0cc      	b.n	80013f2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2241      	movs	r2, #65	; 0x41
 800125c:	2121      	movs	r1, #33	; 0x21
 800125e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2242      	movs	r2, #66	; 0x42
 8001264:	2110      	movs	r1, #16
 8001266:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2208      	movs	r2, #8
 8001278:	18ba      	adds	r2, r7, r2
 800127a:	8812      	ldrh	r2, [r2, #0]
 800127c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001288:	b29b      	uxth	r3, r3
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d911      	bls.n	80012b2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	22ff      	movs	r2, #255	; 0xff
 8001292:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001298:	b2da      	uxtb	r2, r3
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	045c      	lsls	r4, r3, #17
 800129e:	230a      	movs	r3, #10
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	8819      	ldrh	r1, [r3, #0]
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	4b55      	ldr	r3, [pc, #340]	; (80013fc <HAL_I2C_Master_Transmit+0x208>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	0023      	movs	r3, r4
 80012ac:	f000 fa00 	bl	80016b0 <I2C_TransferConfig>
 80012b0:	e075      	b.n	800139e <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	049c      	lsls	r4, r3, #18
 80012c6:	230a      	movs	r3, #10
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	8819      	ldrh	r1, [r3, #0]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <HAL_I2C_Master_Transmit+0x208>)
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	0023      	movs	r3, r4
 80012d4:	f000 f9ec 	bl	80016b0 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80012d8:	e061      	b.n	800139e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	0018      	movs	r0, r3
 80012e2:	f000 f8f0 	bl	80014c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80012e6:	1e03      	subs	r3, r0, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e081      	b.n	80013f2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001316:	3b01      	subs	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001322:	b29b      	uxth	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d03a      	beq.n	800139e <HAL_I2C_Master_Transmit+0x1aa>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132c:	2b00      	cmp	r3, #0
 800132e:	d136      	bne.n	800139e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	0013      	movs	r3, r2
 800133a:	2200      	movs	r2, #0
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	f000 f883 	bl	8001448 <I2C_WaitOnFlagUntilTimeout>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e053      	b.n	80013f2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	2bff      	cmp	r3, #255	; 0xff
 8001352:	d911      	bls.n	8001378 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	22ff      	movs	r2, #255	; 0xff
 8001358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135e:	b2da      	uxtb	r2, r3
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	045c      	lsls	r4, r3, #17
 8001364:	230a      	movs	r3, #10
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	8819      	ldrh	r1, [r3, #0]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	2300      	movs	r3, #0
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	0023      	movs	r3, r4
 8001372:	f000 f99d 	bl	80016b0 <I2C_TransferConfig>
 8001376:	e012      	b.n	800139e <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137c:	b29a      	uxth	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001386:	b2da      	uxtb	r2, r3
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	049c      	lsls	r4, r3, #18
 800138c:	230a      	movs	r3, #10
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	8819      	ldrh	r1, [r3, #0]
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	2300      	movs	r3, #0
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	0023      	movs	r3, r4
 800139a:	f000 f989 	bl	80016b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d198      	bne.n	80012da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 f8c8 	bl	8001544 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e01a      	b.n	80013f2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2220      	movs	r2, #32
 80013c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	490c      	ldr	r1, [pc, #48]	; (8001400 <HAL_I2C_Master_Transmit+0x20c>)
 80013d0:	400a      	ands	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2241      	movs	r2, #65	; 0x41
 80013d8:	2120      	movs	r1, #32
 80013da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2242      	movs	r2, #66	; 0x42
 80013e0:	2100      	movs	r1, #0
 80013e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2240      	movs	r2, #64	; 0x40
 80013e8:	2100      	movs	r1, #0
 80013ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e000      	b.n	80013f2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80013f0:	2302      	movs	r3, #2
  }
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b007      	add	sp, #28
 80013f8:	bd90      	pop	{r4, r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	80002000 	.word	0x80002000
 8001400:	fe00e800 	.word	0xfe00e800

08001404 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	2b02      	cmp	r3, #2
 8001418:	d103      	bne.n	8001422 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	2201      	movs	r2, #1
 800142a:	4013      	ands	r3, r2
 800142c:	2b01      	cmp	r3, #1
 800142e:	d007      	beq.n	8001440 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	619a      	str	r2, [r3, #24]
  }
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}

08001448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001458:	e021      	b.n	800149e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	d01e      	beq.n	800149e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001460:	f7ff fbce 	bl	8000c00 <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d302      	bcc.n	8001476 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d113      	bne.n	800149e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	2220      	movs	r2, #32
 800147c:	431a      	orrs	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2241      	movs	r2, #65	; 0x41
 8001486:	2120      	movs	r1, #32
 8001488:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2242      	movs	r2, #66	; 0x42
 800148e:	2100      	movs	r1, #0
 8001490:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	2100      	movs	r1, #0
 8001498:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	4013      	ands	r3, r2
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	425a      	negs	r2, r3
 80014ae:	4153      	adcs	r3, r2
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	001a      	movs	r2, r3
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d0ce      	beq.n	800145a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b004      	add	sp, #16
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014d2:	e02b      	b.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 f86e 	bl	80015bc <I2C_IsAcknowledgeFailed>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d001      	beq.n	80014e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e029      	b.n	800153c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3301      	adds	r3, #1
 80014ec:	d01e      	beq.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ee:	f7ff fb87 	bl	8000c00 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d302      	bcc.n	8001504 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d113      	bne.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	2220      	movs	r2, #32
 800150a:	431a      	orrs	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2241      	movs	r2, #65	; 0x41
 8001514:	2120      	movs	r1, #32
 8001516:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2242      	movs	r2, #66	; 0x42
 800151c:	2100      	movs	r1, #0
 800151e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2240      	movs	r2, #64	; 0x40
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e007      	b.n	800153c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	2b02      	cmp	r3, #2
 8001538:	d1cc      	bne.n	80014d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b004      	add	sp, #16
 8001542:	bd80      	pop	{r7, pc}

08001544 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001550:	e028      	b.n	80015a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f82f 	bl	80015bc <I2C_IsAcknowledgeFailed>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d001      	beq.n	8001566 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e026      	b.n	80015b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001566:	f7ff fb4b 	bl	8000c00 <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	d302      	bcc.n	800157c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d113      	bne.n	80015a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	2220      	movs	r2, #32
 8001582:	431a      	orrs	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2241      	movs	r2, #65	; 0x41
 800158c:	2120      	movs	r1, #32
 800158e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2242      	movs	r2, #66	; 0x42
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2240      	movs	r2, #64	; 0x40
 800159c:	2100      	movs	r1, #0
 800159e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e007      	b.n	80015b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2220      	movs	r2, #32
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	d1cf      	bne.n	8001552 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b004      	add	sp, #16
 80015ba:	bd80      	pop	{r7, pc}

080015bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2210      	movs	r2, #16
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d164      	bne.n	80016a0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	049b      	lsls	r3, r3, #18
 80015e0:	401a      	ands	r2, r3
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	049b      	lsls	r3, r3, #18
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d02b      	beq.n	8001642 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	01c9      	lsls	r1, r1, #7
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015fc:	e021      	b.n	8001642 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3301      	adds	r3, #1
 8001602:	d01e      	beq.n	8001642 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001604:	f7ff fafc 	bl	8000c00 <HAL_GetTick>
 8001608:	0002      	movs	r2, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	429a      	cmp	r2, r3
 8001612:	d302      	bcc.n	800161a <I2C_IsAcknowledgeFailed+0x5e>
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d113      	bne.n	8001642 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	2220      	movs	r2, #32
 8001620:	431a      	orrs	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2241      	movs	r2, #65	; 0x41
 800162a:	2120      	movs	r1, #32
 800162c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2242      	movs	r2, #66	; 0x42
 8001632:	2100      	movs	r1, #0
 8001634:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	2100      	movs	r1, #0
 800163c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e02f      	b.n	80016a2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2220      	movs	r2, #32
 800164a:	4013      	ands	r3, r2
 800164c:	2b20      	cmp	r3, #32
 800164e:	d1d6      	bne.n	80015fe <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2210      	movs	r2, #16
 8001656:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2220      	movs	r2, #32
 800165e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	0018      	movs	r0, r3
 8001664:	f7ff fece 	bl	8001404 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <I2C_IsAcknowledgeFailed+0xf0>)
 8001674:	400a      	ands	r2, r1
 8001676:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	2204      	movs	r2, #4
 800167e:	431a      	orrs	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2241      	movs	r2, #65	; 0x41
 8001688:	2120      	movs	r1, #32
 800168a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2242      	movs	r2, #66	; 0x42
 8001690:	2100      	movs	r1, #0
 8001692:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2240      	movs	r2, #64	; 0x40
 8001698:	2100      	movs	r1, #0
 800169a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b004      	add	sp, #16
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	fe00e800 	.word	0xfe00e800

080016b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	0008      	movs	r0, r1
 80016ba:	0011      	movs	r1, r2
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	240a      	movs	r4, #10
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	1c02      	adds	r2, r0, #0
 80016c4:	801a      	strh	r2, [r3, #0]
 80016c6:	2009      	movs	r0, #9
 80016c8:	183b      	adds	r3, r7, r0
 80016ca:	1c0a      	adds	r2, r1, #0
 80016cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	0d51      	lsrs	r1, r2, #21
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	00d2      	lsls	r2, r2, #3
 80016dc:	400a      	ands	r2, r1
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <I2C_TransferConfig+0x68>)
 80016e0:	430a      	orrs	r2, r1
 80016e2:	43d2      	mvns	r2, r2
 80016e4:	401a      	ands	r2, r3
 80016e6:	0011      	movs	r1, r2
 80016e8:	193b      	adds	r3, r7, r4
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	059b      	lsls	r3, r3, #22
 80016ee:	0d9a      	lsrs	r2, r3, #22
 80016f0:	183b      	adds	r3, r7, r0
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	0418      	lsls	r0, r3, #16
 80016f6:	23ff      	movs	r3, #255	; 0xff
 80016f8:	041b      	lsls	r3, r3, #16
 80016fa:	4003      	ands	r3, r0
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	431a      	orrs	r2, r3
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	431a      	orrs	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b005      	add	sp, #20
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	03ff63ff 	.word	0x03ff63ff

0800171c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2241      	movs	r2, #65	; 0x41
 800172a:	5c9b      	ldrb	r3, [r3, r2]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b20      	cmp	r3, #32
 8001730:	d138      	bne.n	80017a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2240      	movs	r2, #64	; 0x40
 8001736:	5c9b      	ldrb	r3, [r3, r2]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800173c:	2302      	movs	r3, #2
 800173e:	e032      	b.n	80017a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2240      	movs	r2, #64	; 0x40
 8001744:	2101      	movs	r1, #1
 8001746:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2241      	movs	r2, #65	; 0x41
 800174c:	2124      	movs	r1, #36	; 0x24
 800174e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2101      	movs	r1, #1
 800175c:	438a      	bics	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4911      	ldr	r1, [pc, #68]	; (80017b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6819      	ldr	r1, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2241      	movs	r2, #65	; 0x41
 8001794:	2120      	movs	r1, #32
 8001796:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e000      	b.n	80017a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017a4:	2302      	movs	r3, #2
  }
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	ffffefff 	.word	0xffffefff

080017b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2241      	movs	r2, #65	; 0x41
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d139      	bne.n	800183e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2240      	movs	r2, #64	; 0x40
 80017ce:	5c9b      	ldrb	r3, [r3, r2]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e033      	b.n	8001840 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	2101      	movs	r1, #1
 80017de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2241      	movs	r2, #65	; 0x41
 80017e4:	2124      	movs	r1, #36	; 0x24
 80017e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2101      	movs	r1, #1
 80017f4:	438a      	bics	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2241      	movs	r2, #65	; 0x41
 800182e:	2120      	movs	r1, #32
 8001830:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2240      	movs	r2, #64	; 0x40
 8001836:	2100      	movs	r1, #0
 8001838:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e000      	b.n	8001840 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800183e:	2302      	movs	r3, #2
  }
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b004      	add	sp, #16
 8001846:	bd80      	pop	{r7, pc}
 8001848:	fffff0ff 	.word	0xfffff0ff

0800184c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800185a:	4013      	ands	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d11f      	bne.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	0013      	movs	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	189b      	adds	r3, r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4912      	ldr	r1, [pc, #72]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800187e:	0018      	movs	r0, r3
 8001880:	f7fe fc40 	bl	8000104 <__udivsi3>
 8001884:	0003      	movs	r3, r0
 8001886:	3301      	adds	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800188a:	e008      	b.n	800189e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3b01      	subs	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	e001      	b.n	800189e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e009      	b.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	401a      	ands	r2, r3
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d0ed      	beq.n	800188c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b004      	add	sp, #16
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	40007000 	.word	0x40007000
 80018c0:	fffff9ff 	.word	0xfffff9ff
 80018c4:	20000010 	.word	0x20000010
 80018c8:	000f4240 	.word	0x000f4240

080018cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	f000 fb56 	bl	8001f8c <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4013      	ands	r3, r2
 80018e8:	d100      	bne.n	80018ec <HAL_RCC_OscConfig+0x20>
 80018ea:	e07d      	b.n	80019e8 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ec:	4bc3      	ldr	r3, [pc, #780]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2238      	movs	r2, #56	; 0x38
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f6:	4bc1      	ldr	r3, [pc, #772]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2203      	movs	r2, #3
 80018fc:	4013      	ands	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d102      	bne.n	800190c <HAL_RCC_OscConfig+0x40>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d002      	beq.n	8001912 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b08      	cmp	r3, #8
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001912:	4bba      	ldr	r3, [pc, #744]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	029b      	lsls	r3, r3, #10
 800191a:	4013      	ands	r3, r2
 800191c:	d063      	beq.n	80019e6 <HAL_RCC_OscConfig+0x11a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d15f      	bne.n	80019e6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	f000 fb30 	bl	8001f8c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	025b      	lsls	r3, r3, #9
 8001934:	429a      	cmp	r2, r3
 8001936:	d107      	bne.n	8001948 <HAL_RCC_OscConfig+0x7c>
 8001938:	4bb0      	ldr	r3, [pc, #704]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4baf      	ldr	r3, [pc, #700]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	0249      	lsls	r1, r1, #9
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e020      	b.n	800198a <HAL_RCC_OscConfig+0xbe>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	23a0      	movs	r3, #160	; 0xa0
 800194e:	02db      	lsls	r3, r3, #11
 8001950:	429a      	cmp	r2, r3
 8001952:	d10e      	bne.n	8001972 <HAL_RCC_OscConfig+0xa6>
 8001954:	4ba9      	ldr	r3, [pc, #676]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4ba8      	ldr	r3, [pc, #672]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	02c9      	lsls	r1, r1, #11
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	4ba6      	ldr	r3, [pc, #664]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4ba5      	ldr	r3, [pc, #660]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0249      	lsls	r1, r1, #9
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e00b      	b.n	800198a <HAL_RCC_OscConfig+0xbe>
 8001972:	4ba2      	ldr	r3, [pc, #648]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4ba1      	ldr	r3, [pc, #644]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001978:	49a1      	ldr	r1, [pc, #644]	; (8001c00 <HAL_RCC_OscConfig+0x334>)
 800197a:	400a      	ands	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	4b9f      	ldr	r3, [pc, #636]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b9e      	ldr	r3, [pc, #632]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001984:	499f      	ldr	r1, [pc, #636]	; (8001c04 <HAL_RCC_OscConfig+0x338>)
 8001986:	400a      	ands	r2, r1
 8001988:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d014      	beq.n	80019bc <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff f935 	bl	8000c00 <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff f930 	bl	8000c00 <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e2ee      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ae:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	029b      	lsls	r3, r3, #10
 80019b6:	4013      	ands	r3, r2
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0xd0>
 80019ba:	e015      	b.n	80019e8 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f920 	bl	8000c00 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c6:	f7ff f91b 	bl	8000c00 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b64      	cmp	r3, #100	; 0x64
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e2d9      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d8:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	4013      	ands	r3, r2
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0xfa>
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2202      	movs	r2, #2
 80019ee:	4013      	ands	r3, r2
 80019f0:	d100      	bne.n	80019f4 <HAL_RCC_OscConfig+0x128>
 80019f2:	e099      	b.n	8001b28 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f4:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2238      	movs	r2, #56	; 0x38
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019fe:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2203      	movs	r2, #3
 8001a04:	4013      	ands	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d102      	bne.n	8001a14 <HAL_RCC_OscConfig+0x148>
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d002      	beq.n	8001a1a <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d135      	bne.n	8001a86 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a1a:	4b78      	ldr	r3, [pc, #480]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4013      	ands	r3, r2
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x166>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e2ac      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b72      	ldr	r3, [pc, #456]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a74      	ldr	r2, [pc, #464]	; (8001c08 <HAL_RCC_OscConfig+0x33c>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	021a      	lsls	r2, r3, #8
 8001a42:	4b6e      	ldr	r3, [pc, #440]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d112      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a4e:	4b6b      	ldr	r3, [pc, #428]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6e      	ldr	r2, [pc, #440]	; (8001c0c <HAL_RCC_OscConfig+0x340>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a62:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0adb      	lsrs	r3, r3, #11
 8001a68:	2207      	movs	r2, #7
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	4a68      	ldr	r2, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x344>)
 8001a6e:	40da      	lsrs	r2, r3
 8001a70:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x348>)
 8001a72:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x34c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff f865 	bl	8000b48 <HAL_InitTick>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d051      	beq.n	8001b26 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e282      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d030      	beq.n	8001af0 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a8e:	4b5b      	ldr	r3, [pc, #364]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a5e      	ldr	r2, [pc, #376]	; (8001c0c <HAL_RCC_OscConfig+0x340>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001aa2:	4b56      	ldr	r3, [pc, #344]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b55      	ldr	r3, [pc, #340]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	0049      	lsls	r1, r1, #1
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f8a6 	bl	8000c00 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff f8a1 	bl	8000c00 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e25f      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001acc:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b48      	ldr	r3, [pc, #288]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <HAL_RCC_OscConfig+0x33c>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	021a      	lsls	r2, r3, #8
 8001ae8:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	e01b      	b.n	8001b28 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001af0:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001af6:	4949      	ldr	r1, [pc, #292]	; (8001c1c <HAL_RCC_OscConfig+0x350>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f880 	bl	8000c00 <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff f87b 	bl	8000c00 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e239      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b18:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4013      	ands	r3, r2
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x23a>
 8001b24:	e000      	b.n	8001b28 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d047      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b32:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2238      	movs	r2, #56	; 0x38
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b18      	cmp	r3, #24
 8001b3c:	d10a      	bne.n	8001b54 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d03c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2f6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d138      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e21b      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d019      	beq.n	8001b90 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001b5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f84a 	bl	8000c00 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff f845 	bl	8000c00 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e203      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b88:	2202      	movs	r2, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d0f1      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2a6>
 8001b8e:	e018      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001b92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	438a      	bics	r2, r1
 8001b9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f830 	bl	8000c00 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f82b 	bl	8000c00 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1e9      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d1f1      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d100      	bne.n	8001bce <HAL_RCC_OscConfig+0x302>
 8001bcc:	e0c6      	b.n	8001d5c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bce:	231f      	movs	r3, #31
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2238      	movs	r2, #56	; 0x38
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d11e      	bne.n	8001c20 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d100      	bne.n	8001bee <HAL_RCC_OscConfig+0x322>
 8001bec:	e0b6      	b.n	8001d5c <HAL_RCC_OscConfig+0x490>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d000      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x32c>
 8001bf6:	e0b1      	b.n	8001d5c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e1c7      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	fffeffff 	.word	0xfffeffff
 8001c04:	fffbffff 	.word	0xfffbffff
 8001c08:	ffff80ff 	.word	0xffff80ff
 8001c0c:	ffffc7ff 	.word	0xffffc7ff
 8001c10:	00f42400 	.word	0x00f42400
 8001c14:	20000010 	.word	0x20000010
 8001c18:	20000014 	.word	0x20000014
 8001c1c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c20:	4bb8      	ldr	r3, [pc, #736]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	055b      	lsls	r3, r3, #21
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_OscConfig+0x364>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x366>
 8001c30:	2300      	movs	r3, #0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d011      	beq.n	8001c5a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4bb3      	ldr	r3, [pc, #716]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c3a:	4bb2      	ldr	r3, [pc, #712]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	430a      	orrs	r2, r1
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c44:	4baf      	ldr	r3, [pc, #700]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	055b      	lsls	r3, r3, #21
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c52:	231f      	movs	r3, #31
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5a:	4bab      	ldr	r3, [pc, #684]	; (8001f08 <HAL_RCC_OscConfig+0x63c>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	d11a      	bne.n	8001c9c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c66:	4ba8      	ldr	r3, [pc, #672]	; (8001f08 <HAL_RCC_OscConfig+0x63c>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4ba7      	ldr	r3, [pc, #668]	; (8001f08 <HAL_RCC_OscConfig+0x63c>)
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	0049      	lsls	r1, r1, #1
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c74:	f7fe ffc4 	bl	8000c00 <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7fe ffbf 	bl	8000c00 <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e17d      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	4b9d      	ldr	r3, [pc, #628]	; (8001f08 <HAL_RCC_OscConfig+0x63c>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x3e6>
 8001ca4:	4b97      	ldr	r3, [pc, #604]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001ca6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ca8:	4b96      	ldr	r3, [pc, #600]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	430a      	orrs	r2, r1
 8001cae:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x420>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x408>
 8001cba:	4b92      	ldr	r3, [pc, #584]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001cbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cbe:	4b91      	ldr	r3, [pc, #580]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001cc0:	2104      	movs	r1, #4
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cc6:	4b8f      	ldr	r3, [pc, #572]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cca:	4b8e      	ldr	r3, [pc, #568]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0x420>
 8001cd4:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cd8:	4b8a      	ldr	r3, [pc, #552]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001cda:	2101      	movs	r1, #1
 8001cdc:	438a      	bics	r2, r1
 8001cde:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ce0:	4b88      	ldr	r3, [pc, #544]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001ce2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce4:	4b87      	ldr	r3, [pc, #540]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	438a      	bics	r2, r1
 8001cea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d014      	beq.n	8001d1e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7fe ff84 	bl	8000c00 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7fe ff7f 	bl	8000c00 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	4a80      	ldr	r2, [pc, #512]	; (8001f0c <HAL_RCC_OscConfig+0x640>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e13c      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d12:	4b7c      	ldr	r3, [pc, #496]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2202      	movs	r2, #2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x432>
 8001d1c:	e013      	b.n	8001d46 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7fe ff6f 	bl	8000c00 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d26:	e009      	b.n	8001d3c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7fe ff6a 	bl	8000c00 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	4a76      	ldr	r2, [pc, #472]	; (8001f0c <HAL_RCC_OscConfig+0x640>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e127      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d3c:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d46:	231f      	movs	r3, #31
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d50:	4b6c      	ldr	r3, [pc, #432]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d54:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001d56:	496e      	ldr	r1, [pc, #440]	; (8001f10 <HAL_RCC_OscConfig+0x644>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2220      	movs	r2, #32
 8001d62:	4013      	ands	r3, r2
 8001d64:	d039      	beq.n	8001dda <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d01b      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d6e:	4b65      	ldr	r3, [pc, #404]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b64      	ldr	r3, [pc, #400]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	03c9      	lsls	r1, r1, #15
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7fe ff40 	bl	8000c00 <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d86:	f7fe ff3b 	bl	8000c00 <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0f9      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d98:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	041b      	lsls	r3, r3, #16
 8001da0:	4013      	ands	r3, r2
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x4ba>
 8001da4:	e019      	b.n	8001dda <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001da6:	4b57      	ldr	r3, [pc, #348]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4b56      	ldr	r3, [pc, #344]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001dac:	4959      	ldr	r1, [pc, #356]	; (8001f14 <HAL_RCC_OscConfig+0x648>)
 8001dae:	400a      	ands	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7fe ff25 	bl	8000c00 <HAL_GetTick>
 8001db6:	0003      	movs	r3, r0
 8001db8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dbc:	f7fe ff20 	bl	8000c00 <HAL_GetTick>
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e0de      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001dce:	4b4d      	ldr	r3, [pc, #308]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d100      	bne.n	8001de4 <HAL_RCC_OscConfig+0x518>
 8001de2:	e0d2      	b.n	8001f8a <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de4:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2238      	movs	r2, #56	; 0x38
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_OscConfig+0x526>
 8001df0:	e081      	b.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d156      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001e00:	4945      	ldr	r1, [pc, #276]	; (8001f18 <HAL_RCC_OscConfig+0x64c>)
 8001e02:	400a      	ands	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7fe fefb 	bl	8000c00 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe fef6 	bl	8000c00 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0b4      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	049b      	lsls	r3, r3, #18
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <HAL_RCC_OscConfig+0x650>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0449      	lsls	r1, r1, #17
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e70:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	0549      	lsls	r1, r1, #21
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7fe febf 	bl	8000c00 <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe feba 	bl	8000c00 <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e078      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	049b      	lsls	r3, r3, #18
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x5bc>
 8001ea6:	e070      	b.n	8001f8a <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001eae:	491a      	ldr	r1, [pc, #104]	; (8001f18 <HAL_RCC_OscConfig+0x64c>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001eba:	2103      	movs	r1, #3
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001ec6:	4916      	ldr	r1, [pc, #88]	; (8001f20 <HAL_RCC_OscConfig+0x654>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fe98 	bl	8000c00 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7fe fe93 	bl	8000c00 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e051      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	049b      	lsls	r3, r3, #18
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x60a>
 8001ef4:	e049      	b.n	8001f8a <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d112      	bne.n	8001f24 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e044      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	00001388 	.word	0x00001388
 8001f10:	efffffff 	.word	0xefffffff
 8001f14:	ffbfffff 	.word	0xffbfffff
 8001f18:	feffffff 	.word	0xfeffffff
 8001f1c:	11c1808c 	.word	0x11c1808c
 8001f20:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x6c8>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d126      	bne.n	8001f86 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2270      	movs	r2, #112	; 0x70
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d11f      	bne.n	8001f86 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	23fe      	movs	r3, #254	; 0xfe
 8001f4a:	01db      	lsls	r3, r3, #7
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d116      	bne.n	8001f86 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	23f8      	movs	r3, #248	; 0xf8
 8001f5c:	039b      	lsls	r3, r3, #14
 8001f5e:	401a      	ands	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d10e      	bne.n	8001f86 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	23e0      	movs	r3, #224	; 0xe0
 8001f6c:	051b      	lsls	r3, r3, #20
 8001f6e:	401a      	ands	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	0f5b      	lsrs	r3, r3, #29
 8001f7c:	075a      	lsls	r2, r3, #29
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b008      	add	sp, #32
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0e9      	b.n	8002180 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d91e      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b73      	ldr	r3, [pc, #460]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	4393      	bics	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	4b70      	ldr	r3, [pc, #448]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fcc:	f7fe fe18 	bl	8000c00 <HAL_GetTick>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fd4:	e009      	b.n	8001fea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd6:	f7fe fe13 	bl	8000c00 <HAL_GetTick>
 8001fda:	0002      	movs	r2, r0
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	4a6a      	ldr	r2, [pc, #424]	; (800218c <HAL_RCC_ClockConfig+0x1f4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0ca      	b.n	8002180 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2207      	movs	r2, #7
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1ee      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d015      	beq.n	800202e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2204      	movs	r2, #4
 8002008:	4013      	ands	r3, r2
 800200a:	d006      	beq.n	800201a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800200c:	4b60      	ldr	r3, [pc, #384]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 8002012:	21e0      	movs	r1, #224	; 0xe0
 8002014:	01c9      	lsls	r1, r1, #7
 8002016:	430a      	orrs	r2, r1
 8002018:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201a:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4a5d      	ldr	r2, [pc, #372]	; (8002194 <HAL_RCC_ClockConfig+0x1fc>)
 8002020:	4013      	ands	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 800202a:	430a      	orrs	r2, r1
 800202c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d057      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	4013      	ands	r3, r2
 800204a:	d12b      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e097      	b.n	8002180 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d107      	bne.n	8002068 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002058:	4b4d      	ldr	r3, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	049b      	lsls	r3, r3, #18
 8002060:	4013      	ands	r3, r2
 8002062:	d11f      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e08b      	b.n	8002180 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d107      	bne.n	8002080 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002070:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4013      	ands	r3, r2
 800207a:	d113      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e07f      	b.n	8002180 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d106      	bne.n	8002096 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002088:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 800208a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208c:	2202      	movs	r2, #2
 800208e:	4013      	ands	r3, r2
 8002090:	d108      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e074      	b.n	8002180 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002096:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e06d      	b.n	8002180 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020a4:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2207      	movs	r2, #7
 80020aa:	4393      	bics	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b8:	f7fe fda2 	bl	8000c00 <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c0:	e009      	b.n	80020d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c2:	f7fe fd9d 	bl	8000c00 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	4a2f      	ldr	r2, [pc, #188]	; (800218c <HAL_RCC_ClockConfig+0x1f4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e054      	b.n	8002180 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	4b2e      	ldr	r3, [pc, #184]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2238      	movs	r2, #56	; 0x38
 80020dc:	401a      	ands	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d1ec      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2207      	movs	r2, #7
 80020ee:	4013      	ands	r3, r2
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d21e      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2207      	movs	r2, #7
 80020fc:	4393      	bics	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002108:	f7fe fd7a 	bl	8000c00 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002110:	e009      	b.n	8002126 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002112:	f7fe fd75 	bl	8000c00 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_RCC_ClockConfig+0x1f4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e02c      	b.n	8002180 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2207      	movs	r2, #7
 800212c:	4013      	ands	r3, r2
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d1ee      	bne.n	8002112 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2204      	movs	r2, #4
 800213a:	4013      	ands	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4a15      	ldr	r2, [pc, #84]	; (8002198 <HAL_RCC_ClockConfig+0x200>)
 8002144:	4013      	ands	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 800214e:	430a      	orrs	r2, r1
 8002150:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002152:	f000 f829 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002156:	0001      	movs	r1, r0
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	220f      	movs	r2, #15
 8002160:	401a      	ands	r2, r3
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_RCC_ClockConfig+0x204>)
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	58d3      	ldr	r3, [r2, r3]
 8002168:	221f      	movs	r2, #31
 800216a:	4013      	ands	r3, r2
 800216c:	000a      	movs	r2, r1
 800216e:	40da      	lsrs	r2, r3
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_ClockConfig+0x208>)
 8002172:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_ClockConfig+0x20c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0018      	movs	r0, r3
 800217a:	f7fe fce5 	bl	8000b48 <HAL_InitTick>
 800217e:	0003      	movs	r3, r0
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b004      	add	sp, #16
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40022000 	.word	0x40022000
 800218c:	00001388 	.word	0x00001388
 8002190:	40021000 	.word	0x40021000
 8002194:	fffff0ff 	.word	0xfffff0ff
 8002198:	ffff8fff 	.word	0xffff8fff
 800219c:	08002888 	.word	0x08002888
 80021a0:	20000010 	.word	0x20000010
 80021a4:	20000014 	.word	0x20000014

080021a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2238      	movs	r2, #56	; 0x38
 80021b4:	4013      	ands	r3, r2
 80021b6:	d10f      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021b8:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0adb      	lsrs	r3, r3, #11
 80021be:	2207      	movs	r2, #7
 80021c0:	4013      	ands	r3, r2
 80021c2:	2201      	movs	r2, #1
 80021c4:	409a      	lsls	r2, r3
 80021c6:	0013      	movs	r3, r2
 80021c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	4835      	ldr	r0, [pc, #212]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021ce:	f7fd ff99 	bl	8000104 <__udivsi3>
 80021d2:	0003      	movs	r3, r0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	e05d      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d8:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2238      	movs	r2, #56	; 0x38
 80021de:	4013      	ands	r3, r2
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021e4:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x100>)
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	e054      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2238      	movs	r2, #56	; 0x38
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d138      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2203      	movs	r2, #3
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	2207      	movs	r2, #7
 8002208:	4013      	ands	r3, r2
 800220a:	3301      	adds	r3, #1
 800220c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d10d      	bne.n	8002230 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	4824      	ldr	r0, [pc, #144]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002218:	f7fd ff74 	bl	8000104 <__udivsi3>
 800221c:	0003      	movs	r3, r0
 800221e:	0019      	movs	r1, r3
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	227f      	movs	r2, #127	; 0x7f
 8002228:	4013      	ands	r3, r2
 800222a:	434b      	muls	r3, r1
 800222c:	617b      	str	r3, [r7, #20]
        break;
 800222e:	e00d      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	481c      	ldr	r0, [pc, #112]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002234:	f7fd ff66 	bl	8000104 <__udivsi3>
 8002238:	0003      	movs	r3, r0
 800223a:	0019      	movs	r1, r3
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	227f      	movs	r2, #127	; 0x7f
 8002244:	4013      	ands	r3, r2
 8002246:	434b      	muls	r3, r1
 8002248:	617b      	str	r3, [r7, #20]
        break;
 800224a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0f5b      	lsrs	r3, r3, #29
 8002252:	2207      	movs	r2, #7
 8002254:	4013      	ands	r3, r2
 8002256:	3301      	adds	r3, #1
 8002258:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	6978      	ldr	r0, [r7, #20]
 800225e:	f7fd ff51 	bl	8000104 <__udivsi3>
 8002262:	0003      	movs	r3, r0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	e015      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2238      	movs	r2, #56	; 0x38
 800226e:	4013      	ands	r3, r2
 8002270:	2b20      	cmp	r3, #32
 8002272:	d103      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	e00b      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2238      	movs	r2, #56	; 0x38
 8002282:	4013      	ands	r3, r2
 8002284:	2b18      	cmp	r3, #24
 8002286:	d103      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002288:	23fa      	movs	r3, #250	; 0xfa
 800228a:	01db      	lsls	r3, r3, #7
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	e001      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002294:	693b      	ldr	r3, [r7, #16]
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b006      	add	sp, #24
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	40021000 	.word	0x40021000
 80022a4:	00f42400 	.word	0x00f42400
 80022a8:	007a1200 	.word	0x007a1200

080022ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80022b4:	2313      	movs	r3, #19
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022bc:	2312      	movs	r3, #18
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	029b      	lsls	r3, r3, #10
 80022cc:	4013      	ands	r3, r2
 80022ce:	d100      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80022d0:	e0ad      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d2:	2011      	movs	r0, #17
 80022d4:	183b      	adds	r3, r7, r0
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	055b      	lsls	r3, r3, #21
 80022e2:	4013      	ands	r3, r2
 80022e4:	d110      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ea:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0549      	lsls	r1, r1, #21
 80022f0:	430a      	orrs	r2, r1
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80022f4:	4b40      	ldr	r3, [pc, #256]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	055b      	lsls	r3, r3, #21
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002302:	183b      	adds	r3, r7, r0
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002308:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0049      	lsls	r1, r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002316:	f7fe fc73 	bl	8000c00 <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800231e:	e00b      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002320:	f7fe fc6e 	bl	8000c00 <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d904      	bls.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800232e:	2313      	movs	r3, #19
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	2203      	movs	r2, #3
 8002334:	701a      	strb	r2, [r3, #0]
        break;
 8002336:	e005      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4013      	ands	r3, r2
 8002342:	d0ed      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002344:	2313      	movs	r3, #19
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d15e      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002352:	23c0      	movs	r3, #192	; 0xc0
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4013      	ands	r3, r2
 8002358:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d019      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	429a      	cmp	r2, r3
 8002368:	d014      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	4a24      	ldr	r2, [pc, #144]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002370:	4013      	ands	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002374:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	0249      	lsls	r1, r1, #9
 800237e:	430a      	orrs	r2, r1
 8002380:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002388:	491e      	ldr	r1, [pc, #120]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800238a:	400a      	ands	r2, r1
 800238c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800238e:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2201      	movs	r2, #1
 8002398:	4013      	ands	r3, r2
 800239a:	d016      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7fe fc30 	bl	8000c00 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a4:	e00c      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fc2b 	bl	8000c00 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	4a15      	ldr	r2, [pc, #84]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d904      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80023b6:	2313      	movs	r3, #19
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
            break;
 80023be:	e004      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	2202      	movs	r2, #2
 80023c6:	4013      	ands	r3, r2
 80023c8:	d0ed      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80023ca:	2313      	movs	r3, #19
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80023e8:	e016      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023ea:	2312      	movs	r3, #18
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2213      	movs	r2, #19
 80023f0:	18ba      	adds	r2, r7, r2
 80023f2:	7812      	ldrb	r2, [r2, #0]
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	e00f      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40007000 	.word	0x40007000
 8002400:	fffffcff 	.word	0xfffffcff
 8002404:	fffeffff 	.word	0xfffeffff
 8002408:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800240c:	2312      	movs	r3, #18
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2213      	movs	r2, #19
 8002412:	18ba      	adds	r2, r7, r2
 8002414:	7812      	ldrb	r2, [r2, #0]
 8002416:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002418:	2311      	movs	r3, #17
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4bb6      	ldr	r3, [pc, #728]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002426:	4bb5      	ldr	r3, [pc, #724]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002428:	49b5      	ldr	r1, [pc, #724]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800242a:	400a      	ands	r2, r1
 800242c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2201      	movs	r2, #1
 8002434:	4013      	ands	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002438:	4bb0      	ldr	r3, [pc, #704]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	2203      	movs	r2, #3
 800243e:	4393      	bics	r3, r2
 8002440:	0019      	movs	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4bad      	ldr	r3, [pc, #692]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002448:	430a      	orrs	r2, r1
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2202      	movs	r2, #2
 8002452:	4013      	ands	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002456:	4ba9      	ldr	r3, [pc, #676]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	220c      	movs	r2, #12
 800245c:	4393      	bics	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	4ba5      	ldr	r3, [pc, #660]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002466:	430a      	orrs	r2, r1
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2204      	movs	r2, #4
 8002470:	4013      	ands	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002474:	4ba1      	ldr	r3, [pc, #644]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	2230      	movs	r2, #48	; 0x30
 800247a:	4393      	bics	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	4b9e      	ldr	r3, [pc, #632]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002484:	430a      	orrs	r2, r1
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2210      	movs	r2, #16
 800248e:	4013      	ands	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002492:	4b9a      	ldr	r3, [pc, #616]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	4a9b      	ldr	r2, [pc, #620]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	4b96      	ldr	r3, [pc, #600]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	015b      	lsls	r3, r3, #5
 80024ae:	4013      	ands	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80024b2:	4b92      	ldr	r3, [pc, #584]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	4a94      	ldr	r2, [pc, #592]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	4b8e      	ldr	r3, [pc, #568]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024c2:	430a      	orrs	r2, r1
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	d009      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024d2:	4b8a      	ldr	r3, [pc, #552]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	4a8d      	ldr	r2, [pc, #564]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80024d8:	4013      	ands	r3, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e0:	4b86      	ldr	r3, [pc, #536]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024e2:	430a      	orrs	r2, r1
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4013      	ands	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	4a86      	ldr	r2, [pc, #536]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	4b7e      	ldr	r3, [pc, #504]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002502:	430a      	orrs	r2, r1
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2220      	movs	r2, #32
 800250c:	4013      	ands	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002510:	4b7a      	ldr	r3, [pc, #488]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	4a7f      	ldr	r2, [pc, #508]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002516:	4013      	ands	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	4b77      	ldr	r3, [pc, #476]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002520:	430a      	orrs	r2, r1
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2240      	movs	r2, #64	; 0x40
 800252a:	4013      	ands	r3, r2
 800252c:	d009      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800252e:	4b73      	ldr	r3, [pc, #460]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	4a79      	ldr	r2, [pc, #484]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002534:	4013      	ands	r3, r2
 8002536:	0019      	movs	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69da      	ldr	r2, [r3, #28]
 800253c:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253e:	430a      	orrs	r2, r1
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	01db      	lsls	r3, r3, #7
 800254a:	4013      	ands	r3, r2
 800254c:	d015      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800254e:	4b6b      	ldr	r3, [pc, #428]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	0899      	lsrs	r1, r3, #2
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255a:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800255c:	430a      	orrs	r2, r1
 800255e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	05db      	lsls	r3, r3, #23
 8002568:	429a      	cmp	r2, r3
 800256a:	d106      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800256c:	4b63      	ldr	r3, [pc, #396]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	4b62      	ldr	r3, [pc, #392]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	0249      	lsls	r1, r1, #9
 8002576:	430a      	orrs	r2, r1
 8002578:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	031b      	lsls	r3, r3, #12
 8002582:	4013      	ands	r3, r2
 8002584:	d009      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002586:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	4393      	bics	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002596:	430a      	orrs	r2, r1
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	039b      	lsls	r3, r3, #14
 80025a2:	4013      	ands	r3, r2
 80025a4:	d016      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025a6:	4b55      	ldr	r3, [pc, #340]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	4a5c      	ldr	r2, [pc, #368]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b4:	4b51      	ldr	r3, [pc, #324]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b6:	430a      	orrs	r2, r1
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	03db      	lsls	r3, r3, #15
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d106      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80025c6:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025cc:	2180      	movs	r1, #128	; 0x80
 80025ce:	0449      	lsls	r1, r1, #17
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	03db      	lsls	r3, r3, #15
 80025dc:	4013      	ands	r3, r2
 80025de:	d016      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	4a4e      	ldr	r2, [pc, #312]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ee:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	045b      	lsls	r3, r3, #17
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d106      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002600:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	0449      	lsls	r1, r1, #17
 800260a:	430a      	orrs	r2, r1
 800260c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	4013      	ands	r3, r2
 8002618:	d014      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	2203      	movs	r2, #3
 8002620:	4393      	bics	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1a      	ldr	r2, [r3, #32]
 8002628:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800262a:	430a      	orrs	r2, r1
 800262c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d106      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002636:	4b31      	ldr	r3, [pc, #196]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	0249      	lsls	r1, r1, #9
 8002640:	430a      	orrs	r2, r1
 8002642:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	019b      	lsls	r3, r3, #6
 800264c:	4013      	ands	r3, r2
 800264e:	d014      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002650:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	220c      	movs	r2, #12
 8002656:	4393      	bics	r3, r2
 8002658:	0019      	movs	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800265e:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002660:	430a      	orrs	r2, r1
 8002662:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	2b04      	cmp	r3, #4
 800266a:	d106      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002672:	2180      	movs	r1, #128	; 0x80
 8002674:	0249      	lsls	r1, r1, #9
 8002676:	430a      	orrs	r2, r1
 8002678:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	045b      	lsls	r3, r3, #17
 8002682:	4013      	ands	r3, r2
 8002684:	d016      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800268c:	4013      	ands	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002696:	430a      	orrs	r2, r1
 8002698:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	019b      	lsls	r3, r3, #6
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d106      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	0449      	lsls	r1, r1, #17
 80026b0:	430a      	orrs	r2, r1
 80026b2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	049b      	lsls	r3, r3, #18
 80026bc:	4013      	ands	r3, r2
 80026be:	d016      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	4a10      	ldr	r2, [pc, #64]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	429a      	cmp	r2, r3
 80026de:	d106      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	0449      	lsls	r1, r1, #17
 80026ea:	430a      	orrs	r2, r1
 80026ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80026ee:	2312      	movs	r3, #18
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	781b      	ldrb	r3, [r3, #0]
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b006      	add	sp, #24
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	efffffff 	.word	0xefffffff
 8002704:	fffff3ff 	.word	0xfffff3ff
 8002708:	fffffcff 	.word	0xfffffcff
 800270c:	fff3ffff 	.word	0xfff3ffff
 8002710:	ffcfffff 	.word	0xffcfffff
 8002714:	ffffcfff 	.word	0xffffcfff
 8002718:	ffff3fff 	.word	0xffff3fff
 800271c:	ffbfffff 	.word	0xffbfffff
 8002720:	feffffff 	.word	0xfeffffff

08002724 <__libc_init_array>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	2600      	movs	r6, #0
 8002728:	4d0c      	ldr	r5, [pc, #48]	; (800275c <__libc_init_array+0x38>)
 800272a:	4c0d      	ldr	r4, [pc, #52]	; (8002760 <__libc_init_array+0x3c>)
 800272c:	1b64      	subs	r4, r4, r5
 800272e:	10a4      	asrs	r4, r4, #2
 8002730:	42a6      	cmp	r6, r4
 8002732:	d109      	bne.n	8002748 <__libc_init_array+0x24>
 8002734:	2600      	movs	r6, #0
 8002736:	f000 f87d 	bl	8002834 <_init>
 800273a:	4d0a      	ldr	r5, [pc, #40]	; (8002764 <__libc_init_array+0x40>)
 800273c:	4c0a      	ldr	r4, [pc, #40]	; (8002768 <__libc_init_array+0x44>)
 800273e:	1b64      	subs	r4, r4, r5
 8002740:	10a4      	asrs	r4, r4, #2
 8002742:	42a6      	cmp	r6, r4
 8002744:	d105      	bne.n	8002752 <__libc_init_array+0x2e>
 8002746:	bd70      	pop	{r4, r5, r6, pc}
 8002748:	00b3      	lsls	r3, r6, #2
 800274a:	58eb      	ldr	r3, [r5, r3]
 800274c:	4798      	blx	r3
 800274e:	3601      	adds	r6, #1
 8002750:	e7ee      	b.n	8002730 <__libc_init_array+0xc>
 8002752:	00b3      	lsls	r3, r6, #2
 8002754:	58eb      	ldr	r3, [r5, r3]
 8002756:	4798      	blx	r3
 8002758:	3601      	adds	r6, #1
 800275a:	e7f2      	b.n	8002742 <__libc_init_array+0x1e>
 800275c:	080028f0 	.word	0x080028f0
 8002760:	080028f0 	.word	0x080028f0
 8002764:	080028f0 	.word	0x080028f0
 8002768:	080028f4 	.word	0x080028f4

0800276c <__itoa>:
 800276c:	1e93      	subs	r3, r2, #2
 800276e:	b510      	push	{r4, lr}
 8002770:	000c      	movs	r4, r1
 8002772:	2b22      	cmp	r3, #34	; 0x22
 8002774:	d904      	bls.n	8002780 <__itoa+0x14>
 8002776:	2300      	movs	r3, #0
 8002778:	001c      	movs	r4, r3
 800277a:	700b      	strb	r3, [r1, #0]
 800277c:	0020      	movs	r0, r4
 800277e:	bd10      	pop	{r4, pc}
 8002780:	2a0a      	cmp	r2, #10
 8002782:	d109      	bne.n	8002798 <__itoa+0x2c>
 8002784:	2800      	cmp	r0, #0
 8002786:	da07      	bge.n	8002798 <__itoa+0x2c>
 8002788:	232d      	movs	r3, #45	; 0x2d
 800278a:	700b      	strb	r3, [r1, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	4240      	negs	r0, r0
 8002790:	1861      	adds	r1, r4, r1
 8002792:	f000 f80f 	bl	80027b4 <__utoa>
 8002796:	e7f1      	b.n	800277c <__itoa+0x10>
 8002798:	2100      	movs	r1, #0
 800279a:	e7f9      	b.n	8002790 <__itoa+0x24>

0800279c <itoa>:
 800279c:	b510      	push	{r4, lr}
 800279e:	f7ff ffe5 	bl	800276c <__itoa>
 80027a2:	bd10      	pop	{r4, pc}

080027a4 <memset>:
 80027a4:	0003      	movs	r3, r0
 80027a6:	1882      	adds	r2, r0, r2
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d100      	bne.n	80027ae <memset+0xa>
 80027ac:	4770      	bx	lr
 80027ae:	7019      	strb	r1, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	e7f9      	b.n	80027a8 <memset+0x4>

080027b4 <__utoa>:
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	0016      	movs	r6, r2
 80027b8:	b08d      	sub	sp, #52	; 0x34
 80027ba:	0007      	movs	r7, r0
 80027bc:	000c      	movs	r4, r1
 80027be:	2225      	movs	r2, #37	; 0x25
 80027c0:	4916      	ldr	r1, [pc, #88]	; (800281c <__utoa+0x68>)
 80027c2:	a802      	add	r0, sp, #8
 80027c4:	f000 f82c 	bl	8002820 <memcpy>
 80027c8:	1eb3      	subs	r3, r6, #2
 80027ca:	2500      	movs	r5, #0
 80027cc:	2b22      	cmp	r3, #34	; 0x22
 80027ce:	d820      	bhi.n	8002812 <__utoa+0x5e>
 80027d0:	1e63      	subs	r3, r4, #1
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	ab02      	add	r3, sp, #8
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	0038      	movs	r0, r7
 80027da:	0031      	movs	r1, r6
 80027dc:	f7fd fd18 	bl	8000210 <__aeabi_uidivmod>
 80027e0:	000b      	movs	r3, r1
 80027e2:	9a01      	ldr	r2, [sp, #4]
 80027e4:	0029      	movs	r1, r5
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	9a00      	ldr	r2, [sp, #0]
 80027ea:	3501      	adds	r5, #1
 80027ec:	5553      	strb	r3, [r2, r5]
 80027ee:	003b      	movs	r3, r7
 80027f0:	0007      	movs	r7, r0
 80027f2:	429e      	cmp	r6, r3
 80027f4:	d9f0      	bls.n	80027d8 <__utoa+0x24>
 80027f6:	2300      	movs	r3, #0
 80027f8:	0022      	movs	r2, r4
 80027fa:	5563      	strb	r3, [r4, r5]
 80027fc:	000b      	movs	r3, r1
 80027fe:	1ac8      	subs	r0, r1, r3
 8002800:	4283      	cmp	r3, r0
 8002802:	dd08      	ble.n	8002816 <__utoa+0x62>
 8002804:	7810      	ldrb	r0, [r2, #0]
 8002806:	5ce5      	ldrb	r5, [r4, r3]
 8002808:	7015      	strb	r5, [r2, #0]
 800280a:	54e0      	strb	r0, [r4, r3]
 800280c:	3201      	adds	r2, #1
 800280e:	3b01      	subs	r3, #1
 8002810:	e7f5      	b.n	80027fe <__utoa+0x4a>
 8002812:	7025      	strb	r5, [r4, #0]
 8002814:	002c      	movs	r4, r5
 8002816:	0020      	movs	r0, r4
 8002818:	b00d      	add	sp, #52	; 0x34
 800281a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800281c:	080028c8 	.word	0x080028c8

08002820 <memcpy>:
 8002820:	2300      	movs	r3, #0
 8002822:	b510      	push	{r4, lr}
 8002824:	429a      	cmp	r2, r3
 8002826:	d100      	bne.n	800282a <memcpy+0xa>
 8002828:	bd10      	pop	{r4, pc}
 800282a:	5ccc      	ldrb	r4, [r1, r3]
 800282c:	54c4      	strb	r4, [r0, r3]
 800282e:	3301      	adds	r3, #1
 8002830:	e7f8      	b.n	8002824 <memcpy+0x4>
	...

08002834 <_init>:
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283a:	bc08      	pop	{r3}
 800283c:	469e      	mov	lr, r3
 800283e:	4770      	bx	lr

08002840 <_fini>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr
