
PROJETO_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002340  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080023fc  080023fc  000123fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002460  08002460  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002460  08002460  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002460  08002460  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002460  08002460  00012460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002464  08002464  00012464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002474  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002474  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aaa9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001956  00000000  00000000  0002aadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002c438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa06  00000000  00000000  0002d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0a6  00000000  00000000  000483e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b05b4  00000000  00000000  0005448c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104a40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f4  00000000  00000000  00104a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080023e4 	.word	0x080023e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080023e4 	.word	0x080023e4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <delay_us>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void  delay_us  ( uint16_t  us)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dbb      	adds	r3, r7, #6
 8000226:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER( & htim1, 0 );   // define o valor do contador como 0
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <delay_us+0x30>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2200      	movs	r2, #0
 800022e:	625a      	str	r2, [r3, #36]	; 0x24
	while  (__HAL_TIM_GET_COUNTER( & htim1)  <  us);   // espera o contador alcançar a entrada us no parâmetro
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <delay_us+0x30>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000238:	1dbb      	adds	r3, r7, #6
 800023a:	881b      	ldrh	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d3f8      	bcc.n	8000232 <delay_us+0x16>
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	b002      	add	sp, #8
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	20000034 	.word	0x20000034

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 fae0 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f910 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f000 f9d0 	bl	8000600 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000260:	f000 f96a 	bl	8000538 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim1);
 8000264:	4b80      	ldr	r3, [pc, #512]	; (8000468 <main+0x218>)
 8000266:	0018      	movs	r0, r3
 8000268:	f001 fd74 	bl	8001d54 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 	  delay_us(850);
 800026c:	4b7f      	ldr	r3, [pc, #508]	; (800046c <main+0x21c>)
 800026e:	0018      	movs	r0, r3
 8000270:	f7ff ffd4 	bl	800021c <delay_us>
/*
	  Delay_motor(0.99);*/

	Entrada ++;
 8000274:	4b7e      	ldr	r3, [pc, #504]	; (8000470 <main+0x220>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	b29a      	uxth	r2, r3
 800027c:	4b7c      	ldr	r3, [pc, #496]	; (8000470 <main+0x220>)
 800027e:	801a      	strh	r2, [r3, #0]
	 if (Entrada>8){
 8000280:	4b7b      	ldr	r3, [pc, #492]	; (8000470 <main+0x220>)
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	2b08      	cmp	r3, #8
 8000286:	d902      	bls.n	800028e <main+0x3e>
		 Entrada= 1;
 8000288:	4b79      	ldr	r3, [pc, #484]	; (8000470 <main+0x220>)
 800028a:	2201      	movs	r2, #1
 800028c:	801a      	strh	r2, [r3, #0]
	 }


	  switch(Entrada){
 800028e:	4b78      	ldr	r3, [pc, #480]	; (8000470 <main+0x220>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	2b08      	cmp	r3, #8
 8000294:	d900      	bls.n	8000298 <main+0x48>
 8000296:	e0e4      	b.n	8000462 <main+0x212>
 8000298:	009a      	lsls	r2, r3, #2
 800029a:	4b76      	ldr	r3, [pc, #472]	; (8000474 <main+0x224>)
 800029c:	18d3      	adds	r3, r2, r3
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	469f      	mov	pc, r3
	  case 1:
		  HAL_GPIO_WritePin(amarelo_GPIO_Port, amarelo_Pin, 1);
 80002a2:	2380      	movs	r3, #128	; 0x80
 80002a4:	0059      	lsls	r1, r3, #1
 80002a6:	23a0      	movs	r3, #160	; 0xa0
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2201      	movs	r2, #1
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fd6f 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom_GPIO_Port, marrom_Pin, 0);
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	01db      	lsls	r3, r3, #7
 80002b6:	4870      	ldr	r0, [pc, #448]	; (8000478 <main+0x228>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	0019      	movs	r1, r3
 80002bc:	f000 fd68 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(laranja_GPIO_Port, laranja_Pin, 0);
 80002c0:	4b6d      	ldr	r3, [pc, #436]	; (8000478 <main+0x228>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	2110      	movs	r1, #16
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fd62 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom2_GPIO_Port, marrom2_Pin, 0);
 80002cc:	4b6a      	ldr	r3, [pc, #424]	; (8000478 <main+0x228>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	2120      	movs	r1, #32
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fd5c 	bl	8000d90 <HAL_GPIO_WritePin>

		  break;
 80002d8:	e0c4      	b.n	8000464 <main+0x214>
	  case 2:
		  HAL_GPIO_WritePin(amarelo_GPIO_Port, amarelo_Pin, 1);
 80002da:	2380      	movs	r3, #128	; 0x80
 80002dc:	0059      	lsls	r1, r3, #1
 80002de:	23a0      	movs	r3, #160	; 0xa0
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	2201      	movs	r2, #1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fd53 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom_GPIO_Port, marrom_Pin, 1);
 80002ea:	2380      	movs	r3, #128	; 0x80
 80002ec:	01db      	lsls	r3, r3, #7
 80002ee:	4862      	ldr	r0, [pc, #392]	; (8000478 <main+0x228>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	0019      	movs	r1, r3
 80002f4:	f000 fd4c 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(laranja_GPIO_Port, laranja_Pin, 0);
 80002f8:	4b5f      	ldr	r3, [pc, #380]	; (8000478 <main+0x228>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	2110      	movs	r1, #16
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fd46 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom2_GPIO_Port, marrom2_Pin, 0);
 8000304:	4b5c      	ldr	r3, [pc, #368]	; (8000478 <main+0x228>)
 8000306:	2200      	movs	r2, #0
 8000308:	2120      	movs	r1, #32
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fd40 	bl	8000d90 <HAL_GPIO_WritePin>
		  break;
 8000310:	e0a8      	b.n	8000464 <main+0x214>
	  case 3:
		  HAL_GPIO_WritePin(amarelo_GPIO_Port, amarelo_Pin, 0);
 8000312:	2380      	movs	r3, #128	; 0x80
 8000314:	0059      	lsls	r1, r3, #1
 8000316:	23a0      	movs	r3, #160	; 0xa0
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	2200      	movs	r2, #0
 800031c:	0018      	movs	r0, r3
 800031e:	f000 fd37 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom_GPIO_Port, marrom_Pin, 1);
 8000322:	2380      	movs	r3, #128	; 0x80
 8000324:	01db      	lsls	r3, r3, #7
 8000326:	4854      	ldr	r0, [pc, #336]	; (8000478 <main+0x228>)
 8000328:	2201      	movs	r2, #1
 800032a:	0019      	movs	r1, r3
 800032c:	f000 fd30 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(laranja_GPIO_Port, laranja_Pin, 0);
 8000330:	4b51      	ldr	r3, [pc, #324]	; (8000478 <main+0x228>)
 8000332:	2200      	movs	r2, #0
 8000334:	2110      	movs	r1, #16
 8000336:	0018      	movs	r0, r3
 8000338:	f000 fd2a 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom2_GPIO_Port, marrom2_Pin, 0);
 800033c:	4b4e      	ldr	r3, [pc, #312]	; (8000478 <main+0x228>)
 800033e:	2200      	movs	r2, #0
 8000340:	2120      	movs	r1, #32
 8000342:	0018      	movs	r0, r3
 8000344:	f000 fd24 	bl	8000d90 <HAL_GPIO_WritePin>
		  break;
 8000348:	e08c      	b.n	8000464 <main+0x214>
	  case 4:
		  HAL_GPIO_WritePin(amarelo_GPIO_Port, amarelo_Pin, 0);
 800034a:	2380      	movs	r3, #128	; 0x80
 800034c:	0059      	lsls	r1, r3, #1
 800034e:	23a0      	movs	r3, #160	; 0xa0
 8000350:	05db      	lsls	r3, r3, #23
 8000352:	2200      	movs	r2, #0
 8000354:	0018      	movs	r0, r3
 8000356:	f000 fd1b 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom_GPIO_Port, marrom_Pin, 1);
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	01db      	lsls	r3, r3, #7
 800035e:	4846      	ldr	r0, [pc, #280]	; (8000478 <main+0x228>)
 8000360:	2201      	movs	r2, #1
 8000362:	0019      	movs	r1, r3
 8000364:	f000 fd14 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(laranja_GPIO_Port, laranja_Pin, 1);
 8000368:	4b43      	ldr	r3, [pc, #268]	; (8000478 <main+0x228>)
 800036a:	2201      	movs	r2, #1
 800036c:	2110      	movs	r1, #16
 800036e:	0018      	movs	r0, r3
 8000370:	f000 fd0e 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom2_GPIO_Port, marrom2_Pin, 0);
 8000374:	4b40      	ldr	r3, [pc, #256]	; (8000478 <main+0x228>)
 8000376:	2200      	movs	r2, #0
 8000378:	2120      	movs	r1, #32
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fd08 	bl	8000d90 <HAL_GPIO_WritePin>
		  break;
 8000380:	e070      	b.n	8000464 <main+0x214>
	  case 5:
		  HAL_GPIO_WritePin(amarelo_GPIO_Port, amarelo_Pin, 0);
 8000382:	2380      	movs	r3, #128	; 0x80
 8000384:	0059      	lsls	r1, r3, #1
 8000386:	23a0      	movs	r3, #160	; 0xa0
 8000388:	05db      	lsls	r3, r3, #23
 800038a:	2200      	movs	r2, #0
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fcff 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom_GPIO_Port, marrom_Pin, 0);
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	01db      	lsls	r3, r3, #7
 8000396:	4838      	ldr	r0, [pc, #224]	; (8000478 <main+0x228>)
 8000398:	2200      	movs	r2, #0
 800039a:	0019      	movs	r1, r3
 800039c:	f000 fcf8 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(laranja_GPIO_Port, laranja_Pin, 1);
 80003a0:	4b35      	ldr	r3, [pc, #212]	; (8000478 <main+0x228>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	2110      	movs	r1, #16
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 fcf2 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom2_GPIO_Port, marrom2_Pin, 0);
 80003ac:	4b32      	ldr	r3, [pc, #200]	; (8000478 <main+0x228>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	2120      	movs	r1, #32
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fcec 	bl	8000d90 <HAL_GPIO_WritePin>
		  break;
 80003b8:	e054      	b.n	8000464 <main+0x214>
	  case 6:
		  HAL_GPIO_WritePin(amarelo_GPIO_Port, amarelo_Pin, 0);
 80003ba:	2380      	movs	r3, #128	; 0x80
 80003bc:	0059      	lsls	r1, r3, #1
 80003be:	23a0      	movs	r3, #160	; 0xa0
 80003c0:	05db      	lsls	r3, r3, #23
 80003c2:	2200      	movs	r2, #0
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 fce3 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom_GPIO_Port, marrom_Pin, 0);
 80003ca:	2380      	movs	r3, #128	; 0x80
 80003cc:	01db      	lsls	r3, r3, #7
 80003ce:	482a      	ldr	r0, [pc, #168]	; (8000478 <main+0x228>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	0019      	movs	r1, r3
 80003d4:	f000 fcdc 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(laranja_GPIO_Port, laranja_Pin, 1);
 80003d8:	4b27      	ldr	r3, [pc, #156]	; (8000478 <main+0x228>)
 80003da:	2201      	movs	r2, #1
 80003dc:	2110      	movs	r1, #16
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 fcd6 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom2_GPIO_Port, marrom2_Pin, 1);
 80003e4:	4b24      	ldr	r3, [pc, #144]	; (8000478 <main+0x228>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	2120      	movs	r1, #32
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fcd0 	bl	8000d90 <HAL_GPIO_WritePin>
		  break;
 80003f0:	e038      	b.n	8000464 <main+0x214>
	  case 7:
		  HAL_GPIO_WritePin(amarelo_GPIO_Port, amarelo_Pin, 0);
 80003f2:	2380      	movs	r3, #128	; 0x80
 80003f4:	0059      	lsls	r1, r3, #1
 80003f6:	23a0      	movs	r3, #160	; 0xa0
 80003f8:	05db      	lsls	r3, r3, #23
 80003fa:	2200      	movs	r2, #0
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 fcc7 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom_GPIO_Port, marrom_Pin, 0);
 8000402:	2380      	movs	r3, #128	; 0x80
 8000404:	01db      	lsls	r3, r3, #7
 8000406:	481c      	ldr	r0, [pc, #112]	; (8000478 <main+0x228>)
 8000408:	2200      	movs	r2, #0
 800040a:	0019      	movs	r1, r3
 800040c:	f000 fcc0 	bl	8000d90 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(laranja_GPIO_Port, laranja_Pin, 0);
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <main+0x228>)
 8000412:	2200      	movs	r2, #0
 8000414:	2110      	movs	r1, #16
 8000416:	0018      	movs	r0, r3
 8000418:	f000 fcba 	bl	8000d90 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(marrom2_GPIO_Port, marrom2_Pin, 1);
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <main+0x228>)
 800041e:	2201      	movs	r2, #1
 8000420:	2120      	movs	r1, #32
 8000422:	0018      	movs	r0, r3
 8000424:	f000 fcb4 	bl	8000d90 <HAL_GPIO_WritePin>
 		  break;
 8000428:	e01c      	b.n	8000464 <main+0x214>
	  case 8:
		  HAL_GPIO_WritePin(amarelo_GPIO_Port, amarelo_Pin, 1);
 800042a:	2380      	movs	r3, #128	; 0x80
 800042c:	0059      	lsls	r1, r3, #1
 800042e:	23a0      	movs	r3, #160	; 0xa0
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	2201      	movs	r2, #1
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fcab 	bl	8000d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(marrom_GPIO_Port, marrom_Pin, 0);
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	01db      	lsls	r3, r3, #7
 800043e:	480e      	ldr	r0, [pc, #56]	; (8000478 <main+0x228>)
 8000440:	2200      	movs	r2, #0
 8000442:	0019      	movs	r1, r3
 8000444:	f000 fca4 	bl	8000d90 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(laranja_GPIO_Port, laranja_Pin, 0);
 8000448:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <main+0x228>)
 800044a:	2200      	movs	r2, #0
 800044c:	2110      	movs	r1, #16
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fc9e 	bl	8000d90 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(marrom2_GPIO_Port, marrom2_Pin, 1);
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <main+0x228>)
 8000456:	2201      	movs	r2, #1
 8000458:	2120      	movs	r1, #32
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fc98 	bl	8000d90 <HAL_GPIO_WritePin>
 		  break;
 8000460:	e000      	b.n	8000464 <main+0x214>
	  default:
	  	  break ;
 8000462:	46c0      	nop			; (mov r8, r8)
	 	  delay_us(850);
 8000464:	e702      	b.n	800026c <main+0x1c>
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	20000034 	.word	0x20000034
 800046c:	00000352 	.word	0x00000352
 8000470:	20000082 	.word	0x20000082
 8000474:	080023fc 	.word	0x080023fc
 8000478:	50000400 	.word	0x50000400

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b095      	sub	sp, #84	; 0x54
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	2414      	movs	r4, #20
 8000484:	193b      	adds	r3, r7, r4
 8000486:	0018      	movs	r0, r3
 8000488:	233c      	movs	r3, #60	; 0x3c
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f001 ffa1 	bl	80023d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	0018      	movs	r0, r3
 8000496:	2310      	movs	r3, #16
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f001 ff9a 	bl	80023d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fc91 	bl	8000dcc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2202      	movs	r2, #2
 80004ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	0052      	lsls	r2, r2, #1
 80004b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004b8:	0021      	movs	r1, r4
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2240      	movs	r2, #64	; 0x40
 80004c4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2202      	movs	r2, #2
 80004ca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2202      	movs	r2, #2
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2208      	movs	r2, #8
 80004dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	0292      	lsls	r2, r2, #10
 80004e4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	0492      	lsls	r2, r2, #18
 80004ec:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	0592      	lsls	r2, r2, #22
 80004f4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fca7 	bl	8000e4c <HAL_RCC_OscConfig>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000502:	f000 f8df 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2207      	movs	r2, #7
 800050a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2202      	movs	r2, #2
 8000510:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2102      	movs	r1, #2
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fff8 	bl	8001518 <HAL_RCC_ClockConfig>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800052c:	f000 f8ca 	bl	80006c4 <Error_Handler>
  }
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b015      	add	sp, #84	; 0x54
 8000536:	bd90      	pop	{r4, r7, pc}

08000538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053e:	2310      	movs	r3, #16
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	0018      	movs	r0, r3
 8000544:	2310      	movs	r3, #16
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f001 ff43 	bl	80023d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	0018      	movs	r0, r3
 8000552:	230c      	movs	r3, #12
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f001 ff3c 	bl	80023d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800055c:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <MX_TIM1_Init+0xc0>)
 800055e:	4a27      	ldr	r2, [pc, #156]	; (80005fc <MX_TIM1_Init+0xc4>)
 8000560:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000562:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <MX_TIM1_Init+0xc0>)
 8000564:	2240      	movs	r2, #64	; 0x40
 8000566:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <MX_TIM1_Init+0xc0>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6400;
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <MX_TIM1_Init+0xc0>)
 8000570:	22c8      	movs	r2, #200	; 0xc8
 8000572:	0152      	lsls	r2, r2, #5
 8000574:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <MX_TIM1_Init+0xc0>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_TIM1_Init+0xc0>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <MX_TIM1_Init+0xc0>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_TIM1_Init+0xc0>)
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fb8a 	bl	8001ca4 <HAL_TIM_Base_Init>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8000594:	f000 f896 	bl	80006c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000598:	2110      	movs	r1, #16
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	0152      	lsls	r2, r2, #5
 80005a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005a2:	187a      	adds	r2, r7, r1
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_TIM1_Init+0xc0>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fc87 	bl	8001ebc <HAL_TIM_ConfigClockSource>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80005b2:	f000 f887 	bl	80006c4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <MX_TIM1_Init+0xc0>)
 80005b8:	2108      	movs	r1, #8
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 fc24 	bl	8001e08 <HAL_TIM_OnePulse_Init>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005c4:	f000 f87e 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005da:	1d3a      	adds	r2, r7, #4
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_TIM1_Init+0xc0>)
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fe5d 	bl	80022a0 <HAL_TIMEx_MasterConfigSynchronization>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80005ea:	f000 f86b 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b008      	add	sp, #32
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	20000034 	.word	0x20000034
 80005fc:	40012c00 	.word	0x40012c00

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b089      	sub	sp, #36	; 0x24
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	240c      	movs	r4, #12
 8000608:	193b      	adds	r3, r7, r4
 800060a:	0018      	movs	r0, r3
 800060c:	2314      	movs	r3, #20
 800060e:	001a      	movs	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f001 fedf 	bl	80023d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_GPIO_Init+0xb8>)
 8000618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800061a:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <MX_GPIO_Init+0xb8>)
 800061c:	2102      	movs	r1, #2
 800061e:	430a      	orrs	r2, r1
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_GPIO_Init+0xb8>)
 8000624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000626:	2202      	movs	r2, #2
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_GPIO_Init+0xb8>)
 8000630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_GPIO_Init+0xb8>)
 8000634:	2101      	movs	r1, #1
 8000636:	430a      	orrs	r2, r1
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_GPIO_Init+0xb8>)
 800063c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800063e:	2201      	movs	r2, #1
 8000640:	4013      	ands	r3, r2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, marrom_Pin|laranja_Pin|marrom2_Pin, GPIO_PIN_RESET);
 8000646:	491d      	ldr	r1, [pc, #116]	; (80006bc <MX_GPIO_Init+0xbc>)
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_GPIO_Init+0xc0>)
 800064a:	2200      	movs	r2, #0
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fb9f 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(amarelo_GPIO_Port, amarelo_Pin, GPIO_PIN_RESET);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	0059      	lsls	r1, r3, #1
 8000656:	23a0      	movs	r3, #160	; 0xa0
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2200      	movs	r2, #0
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fb97 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : marrom_Pin laranja_Pin marrom2_Pin */
  GPIO_InitStruct.Pin = marrom_Pin|laranja_Pin|marrom2_Pin;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <MX_GPIO_Init+0xbc>)
 8000666:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2201      	movs	r2, #1
 800066c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	193b      	adds	r3, r7, r4
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	2203      	movs	r2, #3
 8000678:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	193b      	adds	r3, r7, r4
 800067c:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <MX_GPIO_Init+0xc0>)
 800067e:	0019      	movs	r1, r3
 8000680:	0010      	movs	r0, r2
 8000682:	f000 fa19 	bl	8000ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : amarelo_Pin */
  GPIO_InitStruct.Pin = amarelo_Pin;
 8000686:	0021      	movs	r1, r4
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	0052      	lsls	r2, r2, #1
 800068e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2201      	movs	r2, #1
 8000694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2203      	movs	r2, #3
 80006a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(amarelo_GPIO_Port, &GPIO_InitStruct);
 80006a2:	187a      	adds	r2, r7, r1
 80006a4:	23a0      	movs	r3, #160	; 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fa04 	bl	8000ab8 <HAL_GPIO_Init>

}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b009      	add	sp, #36	; 0x24
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	00004030 	.word	0x00004030
 80006c0:	50000400 	.word	0x50000400

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_MspInit+0x4c>)
 80006d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <HAL_MspInit+0x4c>)
 80006dc:	2101      	movs	r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	641a      	str	r2, [r3, #64]	; 0x40
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <HAL_MspInit+0x4c>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	2201      	movs	r2, #1
 80006e8:	4013      	ands	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <HAL_MspInit+0x4c>)
 80006f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_MspInit+0x4c>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	0549      	lsls	r1, r1, #21
 80006f8:	430a      	orrs	r2, r1
 80006fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <HAL_MspInit+0x4c>)
 80006fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	055b      	lsls	r3, r3, #21
 8000704:	4013      	ands	r3, r2
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800070a:	23c0      	movs	r3, #192	; 0xc0
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	0018      	movs	r0, r3
 8000710:	f000 f908 	bl	8000924 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b002      	add	sp, #8
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b097      	sub	sp, #92	; 0x5c
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000728:	240c      	movs	r4, #12
 800072a:	193b      	adds	r3, r7, r4
 800072c:	0018      	movs	r0, r3
 800072e:	234c      	movs	r3, #76	; 0x4c
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f001 fe4e 	bl	80023d4 <memset>
  if(htim_base->Instance==TIM1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <HAL_TIM_Base_MspInit+0x64>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d11c      	bne.n	800077c <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0392      	lsls	r2, r2, #14
 8000748:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000750:	193b      	adds	r3, r7, r4
 8000752:	0018      	movs	r0, r3
 8000754:	f001 f86a 	bl	800182c <HAL_RCCEx_PeriphCLKConfig>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800075c:	f7ff ffb2 	bl	80006c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_TIM_Base_MspInit+0x68>)
 8000762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_TIM_Base_MspInit+0x68>)
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0109      	lsls	r1, r1, #4
 800076a:	430a      	orrs	r2, r1
 800076c:	641a      	str	r2, [r3, #64]	; 0x40
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_TIM_Base_MspInit+0x68>)
 8000770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4013      	ands	r3, r2
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b017      	add	sp, #92	; 0x5c
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	40012c00 	.word	0x40012c00
 8000788:	40021000 	.word	0x40021000

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <NMI_Handler+0x4>

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b0:	f000 f89c 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c8:	f7ff fff7 	bl	80007ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ce:	490d      	ldr	r1, [pc, #52]	; (8000804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <LoopForever+0xe>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e4:	4c0a      	ldr	r4, [pc, #40]	; (8000810 <LoopForever+0x16>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007f2:	f001 fdcb 	bl	800238c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007f6:	f7ff fd2b 	bl	8000250 <main>

080007fa <LoopForever>:

LoopForever:
  b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
  ldr   r0, =_estack
 80007fc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000808:	08002468 	.word	0x08002468
  ldr r2, =_sbss
 800080c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000810:	20000088 	.word	0x20000088

08000814 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_COMP_IRQHandler>
	...

08000818 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_Init+0x3c>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_Init+0x3c>)
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	0049      	lsls	r1, r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000832:	2003      	movs	r0, #3
 8000834:	f000 f810 	bl	8000858 <HAL_InitTick>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d003      	beq.n	8000844 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	e001      	b.n	8000848 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000844:	f7ff ff44 	bl	80006d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
}
 800084c:	0018      	movs	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	230f      	movs	r3, #15
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <HAL_InitTick+0x88>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d02b      	beq.n	80008c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <HAL_InitTick+0x8c>)
 8000872:	681c      	ldr	r4, [r3, #0]
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <HAL_InitTick+0x88>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	0019      	movs	r1, r3
 800087a:	23fa      	movs	r3, #250	; 0xfa
 800087c:	0098      	lsls	r0, r3, #2
 800087e:	f7ff fc41 	bl	8000104 <__udivsi3>
 8000882:	0003      	movs	r3, r0
 8000884:	0019      	movs	r1, r3
 8000886:	0020      	movs	r0, r4
 8000888:	f7ff fc3c 	bl	8000104 <__udivsi3>
 800088c:	0003      	movs	r3, r0
 800088e:	0018      	movs	r0, r3
 8000890:	f000 f905 	bl	8000a9e <HAL_SYSTICK_Config>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d112      	bne.n	80008be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b03      	cmp	r3, #3
 800089c:	d80a      	bhi.n	80008b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	2301      	movs	r3, #1
 80008a2:	425b      	negs	r3, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 f8e4 	bl	8000a74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_InitTick+0x90>)
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	e00d      	b.n	80008d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008b4:	230f      	movs	r3, #15
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	e008      	b.n	80008d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008be:	230f      	movs	r3, #15
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e003      	b.n	80008d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c8:	230f      	movs	r3, #15
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008d0:	230f      	movs	r3, #15
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	781b      	ldrb	r3, [r3, #0]
}
 80008d6:	0018      	movs	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	b005      	add	sp, #20
 80008dc:	bd90      	pop	{r4, r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	001a      	movs	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	18d2      	adds	r2, r2, r3
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <HAL_IncTick+0x20>)
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	20000008 	.word	0x20000008
 800090c:	20000084 	.word	0x20000084

08000910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000084 	.word	0x20000084

08000924 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000932:	4013      	ands	r3, r2
 8000934:	0019      	movs	r1, r3
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	430a      	orrs	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40010000 	.word	0x40010000
 800094c:	fffff9ff 	.word	0xfffff9ff

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	0002      	movs	r2, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b7f      	cmp	r3, #127	; 0x7f
 8000964:	d828      	bhi.n	80009b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000966:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <__NVIC_SetPriority+0xd4>)
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b25b      	sxtb	r3, r3
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	33c0      	adds	r3, #192	; 0xc0
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	589b      	ldr	r3, [r3, r2]
 8000976:	1dfa      	adds	r2, r7, #7
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	0011      	movs	r1, r2
 800097c:	2203      	movs	r2, #3
 800097e:	400a      	ands	r2, r1
 8000980:	00d2      	lsls	r2, r2, #3
 8000982:	21ff      	movs	r1, #255	; 0xff
 8000984:	4091      	lsls	r1, r2
 8000986:	000a      	movs	r2, r1
 8000988:	43d2      	mvns	r2, r2
 800098a:	401a      	ands	r2, r3
 800098c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	401a      	ands	r2, r3
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	0018      	movs	r0, r3
 800099c:	2303      	movs	r3, #3
 800099e:	4003      	ands	r3, r0
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a4:	481f      	ldr	r0, [pc, #124]	; (8000a24 <__NVIC_SetPriority+0xd4>)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	430a      	orrs	r2, r1
 80009b0:	33c0      	adds	r3, #192	; 0xc0
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009b6:	e031      	b.n	8000a1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <__NVIC_SetPriority+0xd8>)
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	0019      	movs	r1, r3
 80009c0:	230f      	movs	r3, #15
 80009c2:	400b      	ands	r3, r1
 80009c4:	3b08      	subs	r3, #8
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	3306      	adds	r3, #6
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	18d3      	adds	r3, r2, r3
 80009ce:	3304      	adds	r3, #4
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1dfa      	adds	r2, r7, #7
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	0011      	movs	r1, r2
 80009d8:	2203      	movs	r2, #3
 80009da:	400a      	ands	r2, r1
 80009dc:	00d2      	lsls	r2, r2, #3
 80009de:	21ff      	movs	r1, #255	; 0xff
 80009e0:	4091      	lsls	r1, r2
 80009e2:	000a      	movs	r2, r1
 80009e4:	43d2      	mvns	r2, r2
 80009e6:	401a      	ands	r2, r3
 80009e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	019b      	lsls	r3, r3, #6
 80009ee:	22ff      	movs	r2, #255	; 0xff
 80009f0:	401a      	ands	r2, r3
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0018      	movs	r0, r3
 80009f8:	2303      	movs	r3, #3
 80009fa:	4003      	ands	r3, r0
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <__NVIC_SetPriority+0xd8>)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	001c      	movs	r4, r3
 8000a08:	230f      	movs	r3, #15
 8000a0a:	4023      	ands	r3, r4
 8000a0c:	3b08      	subs	r3, #8
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	430a      	orrs	r2, r1
 8000a12:	3306      	adds	r3, #6
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	18c3      	adds	r3, r0, r3
 8000a18:	3304      	adds	r3, #4
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b003      	add	sp, #12
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	045b      	lsls	r3, r3, #17
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d301      	bcc.n	8000a44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a40:	2301      	movs	r3, #1
 8000a42:	e010      	b.n	8000a66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <SysTick_Config+0x44>)
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	3a01      	subs	r2, #1
 8000a4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	425b      	negs	r3, r3
 8000a50:	2103      	movs	r1, #3
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff ff7c 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SysTick_Config+0x44>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SysTick_Config+0x44>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	0018      	movs	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b002      	add	sp, #8
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	210f      	movs	r1, #15
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	1c02      	adds	r2, r0, #0
 8000a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff ff5d 	bl	8000950 <__NVIC_SetPriority>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b004      	add	sp, #16
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ffbf 	bl	8000a2c <SysTick_Config>
 8000aae:	0003      	movs	r3, r0
}
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac6:	e14d      	b.n	8000d64 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2101      	movs	r1, #1
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d100      	bne.n	8000ae0 <HAL_GPIO_Init+0x28>
 8000ade:	e13e      	b.n	8000d5e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d005      	beq.n	8000af8 <HAL_GPIO_Init+0x40>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2203      	movs	r2, #3
 8000af2:	4013      	ands	r3, r2
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d130      	bne.n	8000b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	2203      	movs	r2, #3
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	43da      	mvns	r2, r3
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b2e:	2201      	movs	r2, #1
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	43da      	mvns	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	091b      	lsrs	r3, r3, #4
 8000b44:	2201      	movs	r2, #1
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2203      	movs	r2, #3
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d017      	beq.n	8000b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	43da      	mvns	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d123      	bne.n	8000bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	08da      	lsrs	r2, r3, #3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3208      	adds	r2, #8
 8000baa:	0092      	lsls	r2, r2, #2
 8000bac:	58d3      	ldr	r3, [r2, r3]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2207      	movs	r2, #7
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	220f      	movs	r2, #15
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	691a      	ldr	r2, [r3, #16]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	2107      	movs	r1, #7
 8000bce:	400b      	ands	r3, r1
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	08da      	lsrs	r2, r3, #3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3208      	adds	r2, #8
 8000be4:	0092      	lsls	r2, r2, #2
 8000be6:	6939      	ldr	r1, [r7, #16]
 8000be8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2203      	movs	r2, #3
 8000c08:	401a      	ands	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	23c0      	movs	r3, #192	; 0xc0
 8000c24:	029b      	lsls	r3, r3, #10
 8000c26:	4013      	ands	r3, r2
 8000c28:	d100      	bne.n	8000c2c <HAL_GPIO_Init+0x174>
 8000c2a:	e098      	b.n	8000d5e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c2c:	4a53      	ldr	r2, [pc, #332]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	3318      	adds	r3, #24
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	589b      	ldr	r3, [r3, r2]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	4013      	ands	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	220f      	movs	r2, #15
 8000c44:	409a      	lsls	r2, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	43da      	mvns	r2, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	23a0      	movs	r3, #160	; 0xa0
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d019      	beq.n	8000c8e <HAL_GPIO_Init+0x1d6>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a48      	ldr	r2, [pc, #288]	; (8000d80 <HAL_GPIO_Init+0x2c8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0x1d2>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a47      	ldr	r2, [pc, #284]	; (8000d84 <HAL_GPIO_Init+0x2cc>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d00d      	beq.n	8000c86 <HAL_GPIO_Init+0x1ce>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a46      	ldr	r2, [pc, #280]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d007      	beq.n	8000c82 <HAL_GPIO_Init+0x1ca>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a45      	ldr	r2, [pc, #276]	; (8000d8c <HAL_GPIO_Init+0x2d4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <HAL_GPIO_Init+0x1c6>
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	e008      	b.n	8000c90 <HAL_GPIO_Init+0x1d8>
 8000c7e:	2305      	movs	r3, #5
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x1d8>
 8000c82:	2303      	movs	r3, #3
 8000c84:	e004      	b.n	8000c90 <HAL_GPIO_Init+0x1d8>
 8000c86:	2302      	movs	r3, #2
 8000c88:	e002      	b.n	8000c90 <HAL_GPIO_Init+0x1d8>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <HAL_GPIO_Init+0x1d8>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	2103      	movs	r1, #3
 8000c94:	400a      	ands	r2, r1
 8000c96:	00d2      	lsls	r2, r2, #3
 8000c98:	4093      	lsls	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ca0:	4936      	ldr	r1, [pc, #216]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	3318      	adds	r3, #24
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cae:	4a33      	ldr	r2, [pc, #204]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	58d3      	ldr	r3, [r2, r3]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43da      	mvns	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	025b      	lsls	r3, r3, #9
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cd4:	4929      	ldr	r1, [pc, #164]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000cd6:	2280      	movs	r2, #128	; 0x80
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000cdc:	4a27      	ldr	r2, [pc, #156]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000cde:	2384      	movs	r3, #132	; 0x84
 8000ce0:	58d3      	ldr	r3, [r2, r3]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	029b      	lsls	r3, r3, #10
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d02:	491e      	ldr	r1, [pc, #120]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000d04:	2284      	movs	r2, #132	; 0x84
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	43da      	mvns	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	035b      	lsls	r3, r3, #13
 8000d22:	4013      	ands	r3, r2
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43da      	mvns	r2, r3
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	039b      	lsls	r3, r3, #14
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	40da      	lsrs	r2, r3
 8000d6c:	1e13      	subs	r3, r2, #0
 8000d6e:	d000      	beq.n	8000d72 <HAL_GPIO_Init+0x2ba>
 8000d70:	e6aa      	b.n	8000ac8 <HAL_GPIO_Init+0x10>
  }
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b006      	add	sp, #24
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021800 	.word	0x40021800
 8000d80:	50000400 	.word	0x50000400
 8000d84:	50000800 	.word	0x50000800
 8000d88:	50000c00 	.word	0x50000c00
 8000d8c:	50001000 	.word	0x50001000

08000d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	0008      	movs	r0, r1
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	1cbb      	adds	r3, r7, #2
 8000d9e:	1c02      	adds	r2, r0, #0
 8000da0:	801a      	strh	r2, [r3, #0]
 8000da2:	1c7b      	adds	r3, r7, #1
 8000da4:	1c0a      	adds	r2, r1, #0
 8000da6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da8:	1c7b      	adds	r3, r7, #1
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db0:	1cbb      	adds	r3, r7, #2
 8000db2:	881a      	ldrh	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db8:	e003      	b.n	8000dc2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dba:	1cbb      	adds	r3, r7, #2
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	0019      	movs	r1, r3
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d11f      	bne.n	8000e30 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	0013      	movs	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	189b      	adds	r3, r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4912      	ldr	r1, [pc, #72]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff f980 	bl	8000104 <__udivsi3>
 8000e04:	0003      	movs	r3, r0
 8000e06:	3301      	adds	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e0a:	e008      	b.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	e001      	b.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e009      	b.n	8000e32 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e20:	695a      	ldr	r2, [r3, #20]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	401a      	ands	r2, r3
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d0ed      	beq.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	0018      	movs	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b004      	add	sp, #16
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40007000 	.word	0x40007000
 8000e40:	fffff9ff 	.word	0xfffff9ff
 8000e44:	20000000 	.word	0x20000000
 8000e48:	000f4240 	.word	0x000f4240

08000e4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f000 fb56 	bl	800150c <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2201      	movs	r2, #1
 8000e66:	4013      	ands	r3, r2
 8000e68:	d100      	bne.n	8000e6c <HAL_RCC_OscConfig+0x20>
 8000e6a:	e07d      	b.n	8000f68 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e6c:	4bc3      	ldr	r3, [pc, #780]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2238      	movs	r2, #56	; 0x38
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e76:	4bc1      	ldr	r3, [pc, #772]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2b10      	cmp	r3, #16
 8000e84:	d102      	bne.n	8000e8c <HAL_RCC_OscConfig+0x40>
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d002      	beq.n	8000e92 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e92:	4bba      	ldr	r3, [pc, #744]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d063      	beq.n	8000f66 <HAL_RCC_OscConfig+0x11a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d15f      	bne.n	8000f66 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f000 fb30 	bl	800150c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	025b      	lsls	r3, r3, #9
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d107      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x7c>
 8000eb8:	4bb0      	ldr	r3, [pc, #704]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4baf      	ldr	r3, [pc, #700]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	0249      	lsls	r1, r1, #9
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e020      	b.n	8000f0a <HAL_RCC_OscConfig+0xbe>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	23a0      	movs	r3, #160	; 0xa0
 8000ece:	02db      	lsls	r3, r3, #11
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d10e      	bne.n	8000ef2 <HAL_RCC_OscConfig+0xa6>
 8000ed4:	4ba9      	ldr	r3, [pc, #676]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4ba8      	ldr	r3, [pc, #672]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	02c9      	lsls	r1, r1, #11
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	4ba6      	ldr	r3, [pc, #664]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4ba5      	ldr	r3, [pc, #660]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0249      	lsls	r1, r1, #9
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e00b      	b.n	8000f0a <HAL_RCC_OscConfig+0xbe>
 8000ef2:	4ba2      	ldr	r3, [pc, #648]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4ba1      	ldr	r3, [pc, #644]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000ef8:	49a1      	ldr	r1, [pc, #644]	; (8001180 <HAL_RCC_OscConfig+0x334>)
 8000efa:	400a      	ands	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	4b9f      	ldr	r3, [pc, #636]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b9e      	ldr	r3, [pc, #632]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000f04:	499f      	ldr	r1, [pc, #636]	; (8001184 <HAL_RCC_OscConfig+0x338>)
 8000f06:	400a      	ands	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d014      	beq.n	8000f3c <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f12:	f7ff fcfd 	bl	8000910 <HAL_GetTick>
 8000f16:	0003      	movs	r3, r0
 8000f18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fcf8 	bl	8000910 <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e2ee      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f2e:	4b93      	ldr	r3, [pc, #588]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	029b      	lsls	r3, r3, #10
 8000f36:	4013      	ands	r3, r2
 8000f38:	d0f0      	beq.n	8000f1c <HAL_RCC_OscConfig+0xd0>
 8000f3a:	e015      	b.n	8000f68 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fce8 	bl	8000910 <HAL_GetTick>
 8000f40:	0003      	movs	r3, r0
 8000f42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f46:	f7ff fce3 	bl	8000910 <HAL_GetTick>
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b64      	cmp	r3, #100	; 0x64
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e2d9      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f58:	4b88      	ldr	r3, [pc, #544]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	029b      	lsls	r3, r3, #10
 8000f60:	4013      	ands	r3, r2
 8000f62:	d1f0      	bne.n	8000f46 <HAL_RCC_OscConfig+0xfa>
 8000f64:	e000      	b.n	8000f68 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d100      	bne.n	8000f74 <HAL_RCC_OscConfig+0x128>
 8000f72:	e099      	b.n	80010a8 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f74:	4b81      	ldr	r3, [pc, #516]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2238      	movs	r2, #56	; 0x38
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f7e:	4b7f      	ldr	r3, [pc, #508]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2203      	movs	r2, #3
 8000f84:	4013      	ands	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b10      	cmp	r3, #16
 8000f8c:	d102      	bne.n	8000f94 <HAL_RCC_OscConfig+0x148>
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d002      	beq.n	8000f9a <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d135      	bne.n	8001006 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f9a:	4b78      	ldr	r3, [pc, #480]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d005      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x166>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e2ac      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	4b72      	ldr	r3, [pc, #456]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4a74      	ldr	r2, [pc, #464]	; (8001188 <HAL_RCC_OscConfig+0x33c>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	0019      	movs	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	4b6e      	ldr	r3, [pc, #440]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d112      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fce:	4b6b      	ldr	r3, [pc, #428]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a6e      	ldr	r2, [pc, #440]	; (800118c <HAL_RCC_OscConfig+0x340>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	4b67      	ldr	r3, [pc, #412]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fe2:	4b66      	ldr	r3, [pc, #408]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0adb      	lsrs	r3, r3, #11
 8000fe8:	2207      	movs	r2, #7
 8000fea:	4013      	ands	r3, r2
 8000fec:	4a68      	ldr	r2, [pc, #416]	; (8001190 <HAL_RCC_OscConfig+0x344>)
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	4b68      	ldr	r3, [pc, #416]	; (8001194 <HAL_RCC_OscConfig+0x348>)
 8000ff2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ff4:	4b68      	ldr	r3, [pc, #416]	; (8001198 <HAL_RCC_OscConfig+0x34c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff fc2d 	bl	8000858 <HAL_InitTick>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d051      	beq.n	80010a6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e282      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d030      	beq.n	8001070 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800100e:	4b5b      	ldr	r3, [pc, #364]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a5e      	ldr	r2, [pc, #376]	; (800118c <HAL_RCC_OscConfig+0x340>)
 8001014:	4013      	ands	r3, r2
 8001016:	0019      	movs	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	4b57      	ldr	r3, [pc, #348]	; (800117c <HAL_RCC_OscConfig+0x330>)
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001022:	4b56      	ldr	r3, [pc, #344]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b55      	ldr	r3, [pc, #340]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0049      	lsls	r1, r1, #1
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001030:	f7ff fc6e 	bl	8000910 <HAL_GetTick>
 8001034:	0003      	movs	r3, r0
 8001036:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fc69 	bl	8000910 <HAL_GetTick>
 800103e:	0002      	movs	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e25f      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800104c:	4b4b      	ldr	r3, [pc, #300]	; (800117c <HAL_RCC_OscConfig+0x330>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4013      	ands	r3, r2
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b48      	ldr	r3, [pc, #288]	; (800117c <HAL_RCC_OscConfig+0x330>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4a4a      	ldr	r2, [pc, #296]	; (8001188 <HAL_RCC_OscConfig+0x33c>)
 800105e:	4013      	ands	r3, r2
 8001060:	0019      	movs	r1, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	021a      	lsls	r2, r3, #8
 8001068:	4b44      	ldr	r3, [pc, #272]	; (800117c <HAL_RCC_OscConfig+0x330>)
 800106a:	430a      	orrs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	e01b      	b.n	80010a8 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001070:	4b42      	ldr	r3, [pc, #264]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b41      	ldr	r3, [pc, #260]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8001076:	4949      	ldr	r1, [pc, #292]	; (800119c <HAL_RCC_OscConfig+0x350>)
 8001078:	400a      	ands	r2, r1
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107c:	f7ff fc48 	bl	8000910 <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff fc43 	bl	8000910 <HAL_GetTick>
 800108a:	0002      	movs	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e239      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001098:	4b38      	ldr	r3, [pc, #224]	; (800117c <HAL_RCC_OscConfig+0x330>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4013      	ands	r3, r2
 80010a2:	d1f0      	bne.n	8001086 <HAL_RCC_OscConfig+0x23a>
 80010a4:	e000      	b.n	80010a8 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2208      	movs	r2, #8
 80010ae:	4013      	ands	r3, r2
 80010b0:	d047      	beq.n	8001142 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <HAL_RCC_OscConfig+0x330>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2238      	movs	r2, #56	; 0x38
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b18      	cmp	r3, #24
 80010bc:	d10a      	bne.n	80010d4 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_RCC_OscConfig+0x330>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	2202      	movs	r2, #2
 80010c4:	4013      	ands	r3, r2
 80010c6:	d03c      	beq.n	8001142 <HAL_RCC_OscConfig+0x2f6>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d138      	bne.n	8001142 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e21b      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d019      	beq.n	8001110 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_RCC_OscConfig+0x330>)
 80010de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <HAL_RCC_OscConfig+0x330>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	430a      	orrs	r2, r1
 80010e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc12 	bl	8000910 <HAL_GetTick>
 80010ec:	0003      	movs	r3, r0
 80010ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f2:	f7ff fc0d 	bl	8000910 <HAL_GetTick>
 80010f6:	0002      	movs	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e203      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8001106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001108:	2202      	movs	r2, #2
 800110a:	4013      	ands	r3, r2
 800110c:	d0f1      	beq.n	80010f2 <HAL_RCC_OscConfig+0x2a6>
 800110e:	e018      	b.n	8001142 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8001112:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8001116:	2101      	movs	r1, #1
 8001118:	438a      	bics	r2, r1
 800111a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111c:	f7ff fbf8 	bl	8000910 <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001126:	f7ff fbf3 	bl	8000910 <HAL_GetTick>
 800112a:	0002      	movs	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e1e9      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_RCC_OscConfig+0x330>)
 800113a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113c:	2202      	movs	r2, #2
 800113e:	4013      	ands	r3, r2
 8001140:	d1f1      	bne.n	8001126 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2204      	movs	r2, #4
 8001148:	4013      	ands	r3, r2
 800114a:	d100      	bne.n	800114e <HAL_RCC_OscConfig+0x302>
 800114c:	e0c6      	b.n	80012dc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114e:	231f      	movs	r3, #31
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2238      	movs	r2, #56	; 0x38
 800115c:	4013      	ands	r3, r2
 800115e:	2b20      	cmp	r3, #32
 8001160:	d11e      	bne.n	80011a0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_RCC_OscConfig+0x330>)
 8001164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001166:	2202      	movs	r2, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d100      	bne.n	800116e <HAL_RCC_OscConfig+0x322>
 800116c:	e0b6      	b.n	80012dc <HAL_RCC_OscConfig+0x490>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d000      	beq.n	8001178 <HAL_RCC_OscConfig+0x32c>
 8001176:	e0b1      	b.n	80012dc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e1c7      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
 800117c:	40021000 	.word	0x40021000
 8001180:	fffeffff 	.word	0xfffeffff
 8001184:	fffbffff 	.word	0xfffbffff
 8001188:	ffff80ff 	.word	0xffff80ff
 800118c:	ffffc7ff 	.word	0xffffc7ff
 8001190:	00f42400 	.word	0x00f42400
 8001194:	20000000 	.word	0x20000000
 8001198:	20000004 	.word	0x20000004
 800119c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011a0:	4bb8      	ldr	r3, [pc, #736]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80011a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	055b      	lsls	r3, r3, #21
 80011a8:	4013      	ands	r3, r2
 80011aa:	d101      	bne.n	80011b0 <HAL_RCC_OscConfig+0x364>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x366>
 80011b0:	2300      	movs	r3, #0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d011      	beq.n	80011da <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4bb3      	ldr	r3, [pc, #716]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80011b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011ba:	4bb2      	ldr	r3, [pc, #712]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	0549      	lsls	r1, r1, #21
 80011c0:	430a      	orrs	r2, r1
 80011c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80011c4:	4baf      	ldr	r3, [pc, #700]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80011c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	055b      	lsls	r3, r3, #21
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80011d2:	231f      	movs	r3, #31
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011da:	4bab      	ldr	r3, [pc, #684]	; (8001488 <HAL_RCC_OscConfig+0x63c>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4013      	ands	r3, r2
 80011e4:	d11a      	bne.n	800121c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e6:	4ba8      	ldr	r3, [pc, #672]	; (8001488 <HAL_RCC_OscConfig+0x63c>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4ba7      	ldr	r3, [pc, #668]	; (8001488 <HAL_RCC_OscConfig+0x63c>)
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	0049      	lsls	r1, r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fb8c 	bl	8000910 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fe:	f7ff fb87 	bl	8000910 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e17d      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001210:	4b9d      	ldr	r3, [pc, #628]	; (8001488 <HAL_RCC_OscConfig+0x63c>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4013      	ands	r3, r2
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d106      	bne.n	8001232 <HAL_RCC_OscConfig+0x3e6>
 8001224:	4b97      	ldr	r3, [pc, #604]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001226:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001228:	4b96      	ldr	r3, [pc, #600]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800122a:	2101      	movs	r1, #1
 800122c:	430a      	orrs	r2, r1
 800122e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001230:	e01c      	b.n	800126c <HAL_RCC_OscConfig+0x420>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b05      	cmp	r3, #5
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x408>
 800123a:	4b92      	ldr	r3, [pc, #584]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800123c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800123e:	4b91      	ldr	r3, [pc, #580]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001240:	2104      	movs	r1, #4
 8001242:	430a      	orrs	r2, r1
 8001244:	65da      	str	r2, [r3, #92]	; 0x5c
 8001246:	4b8f      	ldr	r3, [pc, #572]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001248:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800124a:	4b8e      	ldr	r3, [pc, #568]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800124c:	2101      	movs	r1, #1
 800124e:	430a      	orrs	r2, r1
 8001250:	65da      	str	r2, [r3, #92]	; 0x5c
 8001252:	e00b      	b.n	800126c <HAL_RCC_OscConfig+0x420>
 8001254:	4b8b      	ldr	r3, [pc, #556]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001258:	4b8a      	ldr	r3, [pc, #552]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800125a:	2101      	movs	r1, #1
 800125c:	438a      	bics	r2, r1
 800125e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001260:	4b88      	ldr	r3, [pc, #544]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001264:	4b87      	ldr	r3, [pc, #540]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001266:	2104      	movs	r1, #4
 8001268:	438a      	bics	r2, r1
 800126a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d014      	beq.n	800129e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fb4c 	bl	8000910 <HAL_GetTick>
 8001278:	0003      	movs	r3, r0
 800127a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800127c:	e009      	b.n	8001292 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7ff fb47 	bl	8000910 <HAL_GetTick>
 8001282:	0002      	movs	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	4a80      	ldr	r2, [pc, #512]	; (800148c <HAL_RCC_OscConfig+0x640>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e13c      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001292:	4b7c      	ldr	r3, [pc, #496]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001296:	2202      	movs	r2, #2
 8001298:	4013      	ands	r3, r2
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x432>
 800129c:	e013      	b.n	80012c6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fb37 	bl	8000910 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a6:	e009      	b.n	80012bc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a8:	f7ff fb32 	bl	8000910 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	4a76      	ldr	r2, [pc, #472]	; (800148c <HAL_RCC_OscConfig+0x640>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e127      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012bc:	4b71      	ldr	r3, [pc, #452]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	2202      	movs	r2, #2
 80012c2:	4013      	ands	r3, r2
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012c6:	231f      	movs	r3, #31
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d105      	bne.n	80012dc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80012d0:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80012d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012d4:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80012d6:	496e      	ldr	r1, [pc, #440]	; (8001490 <HAL_RCC_OscConfig+0x644>)
 80012d8:	400a      	ands	r2, r1
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2220      	movs	r2, #32
 80012e2:	4013      	ands	r3, r2
 80012e4:	d039      	beq.n	800135a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01b      	beq.n	8001326 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012ee:	4b65      	ldr	r3, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b64      	ldr	r3, [pc, #400]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	03c9      	lsls	r1, r1, #15
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff fb08 	bl	8000910 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001306:	f7ff fb03 	bl	8000910 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e0f9      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001318:	4b5a      	ldr	r3, [pc, #360]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	041b      	lsls	r3, r3, #16
 8001320:	4013      	ands	r3, r2
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x4ba>
 8001324:	e019      	b.n	800135a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001326:	4b57      	ldr	r3, [pc, #348]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b56      	ldr	r3, [pc, #344]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800132c:	4959      	ldr	r1, [pc, #356]	; (8001494 <HAL_RCC_OscConfig+0x648>)
 800132e:	400a      	ands	r2, r1
 8001330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001332:	f7ff faed 	bl	8000910 <HAL_GetTick>
 8001336:	0003      	movs	r3, r0
 8001338:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800133c:	f7ff fae8 	bl	8000910 <HAL_GetTick>
 8001340:	0002      	movs	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e0de      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800134e:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	041b      	lsls	r3, r3, #16
 8001356:	4013      	ands	r3, r2
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d100      	bne.n	8001364 <HAL_RCC_OscConfig+0x518>
 8001362:	e0d2      	b.n	800150a <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001364:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2238      	movs	r2, #56	; 0x38
 800136a:	4013      	ands	r3, r2
 800136c:	2b10      	cmp	r3, #16
 800136e:	d100      	bne.n	8001372 <HAL_RCC_OscConfig+0x526>
 8001370:	e081      	b.n	8001476 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d156      	bne.n	8001428 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137a:	4b42      	ldr	r3, [pc, #264]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001380:	4945      	ldr	r1, [pc, #276]	; (8001498 <HAL_RCC_OscConfig+0x64c>)
 8001382:	400a      	ands	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7ff fac3 	bl	8000910 <HAL_GetTick>
 800138a:	0003      	movs	r3, r0
 800138c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff fabe 	bl	8000910 <HAL_GetTick>
 8001394:	0002      	movs	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e0b4      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	049b      	lsls	r3, r3, #18
 80013aa:	4013      	ands	r3, r2
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ae:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	4a3a      	ldr	r2, [pc, #232]	; (800149c <HAL_RCC_OscConfig+0x650>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	431a      	orrs	r2, r3
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80013de:	430a      	orrs	r2, r1
 80013e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0449      	lsls	r1, r1, #17
 80013ec:	430a      	orrs	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	0549      	lsls	r1, r1, #21
 80013fa:	430a      	orrs	r2, r1
 80013fc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fa87 	bl	8000910 <HAL_GetTick>
 8001402:	0003      	movs	r3, r0
 8001404:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fa82 	bl	8000910 <HAL_GetTick>
 800140c:	0002      	movs	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e078      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	049b      	lsls	r3, r3, #18
 8001422:	4013      	ands	r3, r2
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x5bc>
 8001426:	e070      	b.n	800150a <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800142e:	491a      	ldr	r1, [pc, #104]	; (8001498 <HAL_RCC_OscConfig+0x64c>)
 8001430:	400a      	ands	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800143a:	2103      	movs	r1, #3
 800143c:	438a      	bics	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 8001446:	4916      	ldr	r1, [pc, #88]	; (80014a0 <HAL_RCC_OscConfig+0x654>)
 8001448:	400a      	ands	r2, r1
 800144a:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fa60 	bl	8000910 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001456:	f7ff fa5b 	bl	8000910 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e051      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_RCC_OscConfig+0x638>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	049b      	lsls	r3, r3, #18
 8001470:	4013      	ands	r3, r2
 8001472:	d1f0      	bne.n	8001456 <HAL_RCC_OscConfig+0x60a>
 8001474:	e049      	b.n	800150a <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d112      	bne.n	80014a4 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e044      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	40021000 	.word	0x40021000
 8001488:	40007000 	.word	0x40007000
 800148c:	00001388 	.word	0x00001388
 8001490:	efffffff 	.word	0xefffffff
 8001494:	ffbfffff 	.word	0xffbfffff
 8001498:	feffffff 	.word	0xfeffffff
 800149c:	11c1808c 	.word	0x11c1808c
 80014a0:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x6c8>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2203      	movs	r2, #3
 80014ae:	401a      	ands	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d126      	bne.n	8001506 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2270      	movs	r2, #112	; 0x70
 80014bc:	401a      	ands	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d11f      	bne.n	8001506 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	23fe      	movs	r3, #254	; 0xfe
 80014ca:	01db      	lsls	r3, r3, #7
 80014cc:	401a      	ands	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d116      	bne.n	8001506 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	23f8      	movs	r3, #248	; 0xf8
 80014dc:	039b      	lsls	r3, r3, #14
 80014de:	401a      	ands	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d10e      	bne.n	8001506 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	23e0      	movs	r3, #224	; 0xe0
 80014ec:	051b      	lsls	r3, r3, #20
 80014ee:	401a      	ands	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	0f5b      	lsrs	r3, r3, #29
 80014fc:	075a      	lsls	r2, r3, #29
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b008      	add	sp, #32
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0e9      	b.n	8001700 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800152c:	4b76      	ldr	r3, [pc, #472]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2207      	movs	r2, #7
 8001532:	4013      	ands	r3, r2
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d91e      	bls.n	8001578 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b73      	ldr	r3, [pc, #460]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2207      	movs	r2, #7
 8001540:	4393      	bics	r3, r2
 8001542:	0019      	movs	r1, r3
 8001544:	4b70      	ldr	r3, [pc, #448]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800154c:	f7ff f9e0 	bl	8000910 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001554:	e009      	b.n	800156a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001556:	f7ff f9db 	bl	8000910 <HAL_GetTick>
 800155a:	0002      	movs	r2, r0
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	4a6a      	ldr	r2, [pc, #424]	; (800170c <HAL_RCC_ClockConfig+0x1f4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0ca      	b.n	8001700 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800156a:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2207      	movs	r2, #7
 8001570:	4013      	ands	r3, r2
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d1ee      	bne.n	8001556 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2202      	movs	r2, #2
 800157e:	4013      	ands	r3, r2
 8001580:	d015      	beq.n	80015ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2204      	movs	r2, #4
 8001588:	4013      	ands	r3, r2
 800158a:	d006      	beq.n	800159a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800158c:	4b60      	ldr	r3, [pc, #384]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 8001592:	21e0      	movs	r1, #224	; 0xe0
 8001594:	01c9      	lsls	r1, r1, #7
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159a:	4b5d      	ldr	r3, [pc, #372]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4a5d      	ldr	r2, [pc, #372]	; (8001714 <HAL_RCC_ClockConfig+0x1fc>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	0019      	movs	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2201      	movs	r2, #1
 80015b4:	4013      	ands	r3, r2
 80015b6:	d057      	beq.n	8001668 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	029b      	lsls	r3, r3, #10
 80015c8:	4013      	ands	r3, r2
 80015ca:	d12b      	bne.n	8001624 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e097      	b.n	8001700 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d8:	4b4d      	ldr	r3, [pc, #308]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	049b      	lsls	r3, r3, #18
 80015e0:	4013      	ands	r3, r2
 80015e2:	d11f      	bne.n	8001624 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e08b      	b.n	8001700 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f0:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	d113      	bne.n	8001624 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e07f      	b.n	8001700 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d106      	bne.n	8001616 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001608:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 800160a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160c:	2202      	movs	r2, #2
 800160e:	4013      	ands	r3, r2
 8001610:	d108      	bne.n	8001624 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e074      	b.n	8001700 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001616:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 8001618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161a:	2202      	movs	r2, #2
 800161c:	4013      	ands	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e06d      	b.n	8001700 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001624:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2207      	movs	r2, #7
 800162a:	4393      	bics	r3, r2
 800162c:	0019      	movs	r1, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001638:	f7ff f96a 	bl	8000910 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001640:	e009      	b.n	8001656 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001642:	f7ff f965 	bl	8000910 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4a2f      	ldr	r2, [pc, #188]	; (800170c <HAL_RCC_ClockConfig+0x1f4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e054      	b.n	8001700 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2238      	movs	r2, #56	; 0x38
 800165c:	401a      	ands	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	429a      	cmp	r2, r3
 8001666:	d1ec      	bne.n	8001642 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2207      	movs	r2, #7
 800166e:	4013      	ands	r3, r2
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d21e      	bcs.n	80016b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2207      	movs	r2, #7
 800167c:	4393      	bics	r3, r2
 800167e:	0019      	movs	r1, r3
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001688:	f7ff f942 	bl	8000910 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001690:	e009      	b.n	80016a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001692:	f7ff f93d 	bl	8000910 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <HAL_RCC_ClockConfig+0x1f4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e02c      	b.n	8001700 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2207      	movs	r2, #7
 80016ac:	4013      	ands	r3, r2
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1ee      	bne.n	8001692 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2204      	movs	r2, #4
 80016ba:	4013      	ands	r3, r2
 80016bc:	d009      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4a15      	ldr	r2, [pc, #84]	; (8001718 <HAL_RCC_ClockConfig+0x200>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	0019      	movs	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 80016ce:	430a      	orrs	r2, r1
 80016d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016d2:	f000 f829 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80016d6:	0001      	movs	r1, r0
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	220f      	movs	r2, #15
 80016e0:	401a      	ands	r2, r3
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_RCC_ClockConfig+0x204>)
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	58d3      	ldr	r3, [r2, r3]
 80016e8:	221f      	movs	r2, #31
 80016ea:	4013      	ands	r3, r2
 80016ec:	000a      	movs	r2, r1
 80016ee:	40da      	lsrs	r2, r3
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_ClockConfig+0x208>)
 80016f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x20c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff f8ad 	bl	8000858 <HAL_InitTick>
 80016fe:	0003      	movs	r3, r0
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b004      	add	sp, #16
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40022000 	.word	0x40022000
 800170c:	00001388 	.word	0x00001388
 8001710:	40021000 	.word	0x40021000
 8001714:	fffff0ff 	.word	0xfffff0ff
 8001718:	ffff8fff 	.word	0xffff8fff
 800171c:	08002420 	.word	0x08002420
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2238      	movs	r2, #56	; 0x38
 8001734:	4013      	ands	r3, r2
 8001736:	d10f      	bne.n	8001758 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0adb      	lsrs	r3, r3, #11
 800173e:	2207      	movs	r2, #7
 8001740:	4013      	ands	r3, r2
 8001742:	2201      	movs	r2, #1
 8001744:	409a      	lsls	r2, r3
 8001746:	0013      	movs	r3, r2
 8001748:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	4835      	ldr	r0, [pc, #212]	; (8001824 <HAL_RCC_GetSysClockFreq+0xfc>)
 800174e:	f7fe fcd9 	bl	8000104 <__udivsi3>
 8001752:	0003      	movs	r3, r0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	e05d      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2238      	movs	r2, #56	; 0x38
 800175e:	4013      	ands	r3, r2
 8001760:	2b08      	cmp	r3, #8
 8001762:	d102      	bne.n	800176a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001764:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_RCC_GetSysClockFreq+0x100>)
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	e054      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2238      	movs	r2, #56	; 0x38
 8001770:	4013      	ands	r3, r2
 8001772:	2b10      	cmp	r3, #16
 8001774:	d138      	bne.n	80017e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2203      	movs	r2, #3
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	2207      	movs	r2, #7
 8001788:	4013      	ands	r3, r2
 800178a:	3301      	adds	r3, #1
 800178c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d10d      	bne.n	80017b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	4824      	ldr	r0, [pc, #144]	; (8001828 <HAL_RCC_GetSysClockFreq+0x100>)
 8001798:	f7fe fcb4 	bl	8000104 <__udivsi3>
 800179c:	0003      	movs	r3, r0
 800179e:	0019      	movs	r1, r3
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	227f      	movs	r2, #127	; 0x7f
 80017a8:	4013      	ands	r3, r2
 80017aa:	434b      	muls	r3, r1
 80017ac:	617b      	str	r3, [r7, #20]
        break;
 80017ae:	e00d      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	481c      	ldr	r0, [pc, #112]	; (8001824 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017b4:	f7fe fca6 	bl	8000104 <__udivsi3>
 80017b8:	0003      	movs	r3, r0
 80017ba:	0019      	movs	r1, r3
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	227f      	movs	r2, #127	; 0x7f
 80017c4:	4013      	ands	r3, r2
 80017c6:	434b      	muls	r3, r1
 80017c8:	617b      	str	r3, [r7, #20]
        break;
 80017ca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0f5b      	lsrs	r3, r3, #29
 80017d2:	2207      	movs	r2, #7
 80017d4:	4013      	ands	r3, r2
 80017d6:	3301      	adds	r3, #1
 80017d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	6978      	ldr	r0, [r7, #20]
 80017de:	f7fe fc91 	bl	8000104 <__udivsi3>
 80017e2:	0003      	movs	r3, r0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	e015      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2238      	movs	r2, #56	; 0x38
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	d103      	bne.n	80017fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2238      	movs	r2, #56	; 0x38
 8001802:	4013      	ands	r3, r2
 8001804:	2b18      	cmp	r3, #24
 8001806:	d103      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001808:	23fa      	movs	r3, #250	; 0xfa
 800180a:	01db      	lsls	r3, r3, #7
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e001      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001814:	693b      	ldr	r3, [r7, #16]
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b006      	add	sp, #24
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	40021000 	.word	0x40021000
 8001824:	00f42400 	.word	0x00f42400
 8001828:	007a1200 	.word	0x007a1200

0800182c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001834:	2313      	movs	r3, #19
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800183c:	2312      	movs	r3, #18
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	029b      	lsls	r3, r3, #10
 800184c:	4013      	ands	r3, r2
 800184e:	d100      	bne.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001850:	e0ad      	b.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001852:	2011      	movs	r0, #17
 8001854:	183b      	adds	r3, r7, r0
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800185c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	055b      	lsls	r3, r3, #21
 8001862:	4013      	ands	r3, r2
 8001864:	d110      	bne.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	4b44      	ldr	r3, [pc, #272]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	0549      	lsls	r1, r1, #21
 8001870:	430a      	orrs	r2, r1
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
 8001874:	4b40      	ldr	r3, [pc, #256]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	055b      	lsls	r3, r3, #21
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	183b      	adds	r3, r7, r0
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001888:	4b3c      	ldr	r3, [pc, #240]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	0049      	lsls	r1, r1, #1
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001896:	f7ff f83b 	bl	8000910 <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800189e:	e00b      	b.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a0:	f7ff f836 	bl	8000910 <HAL_GetTick>
 80018a4:	0002      	movs	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d904      	bls.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80018ae:	2313      	movs	r3, #19
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	2203      	movs	r2, #3
 80018b4:	701a      	strb	r2, [r3, #0]
        break;
 80018b6:	e005      	b.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0ed      	beq.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80018c4:	2313      	movs	r3, #19
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d15e      	bne.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80018d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018d2:	23c0      	movs	r3, #192	; 0xc0
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d019      	beq.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d014      	beq.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	4a24      	ldr	r2, [pc, #144]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80018f4:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80018f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0249      	lsls	r1, r1, #9
 80018fe:	430a      	orrs	r2, r1
 8001900:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001904:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001908:	491e      	ldr	r1, [pc, #120]	; (8001984 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800190a:	400a      	ands	r2, r1
 800190c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2201      	movs	r2, #1
 8001918:	4013      	ands	r3, r2
 800191a:	d016      	beq.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7fe fff8 	bl	8000910 <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001924:	e00c      	b.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7fe fff3 	bl	8000910 <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	4a15      	ldr	r2, [pc, #84]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d904      	bls.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001936:	2313      	movs	r3, #19
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	2203      	movs	r2, #3
 800193c:	701a      	strb	r2, [r3, #0]
            break;
 800193e:	e004      	b.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d0ed      	beq.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800194a:	2313      	movs	r3, #19
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001958:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800195a:	4013      	ands	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001964:	430a      	orrs	r2, r1
 8001966:	65da      	str	r2, [r3, #92]	; 0x5c
 8001968:	e016      	b.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800196a:	2312      	movs	r3, #18
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	2213      	movs	r2, #19
 8001970:	18ba      	adds	r2, r7, r2
 8001972:	7812      	ldrb	r2, [r2, #0]
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	e00f      	b.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001978:	40021000 	.word	0x40021000
 800197c:	40007000 	.word	0x40007000
 8001980:	fffffcff 	.word	0xfffffcff
 8001984:	fffeffff 	.word	0xfffeffff
 8001988:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800198c:	2312      	movs	r3, #18
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	2213      	movs	r2, #19
 8001992:	18ba      	adds	r2, r7, r2
 8001994:	7812      	ldrb	r2, [r2, #0]
 8001996:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001998:	2311      	movs	r3, #17
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d105      	bne.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a2:	4bb6      	ldr	r3, [pc, #728]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80019a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a6:	4bb5      	ldr	r3, [pc, #724]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80019a8:	49b5      	ldr	r1, [pc, #724]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	d009      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019b8:	4bb0      	ldr	r3, [pc, #704]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80019ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019bc:	2203      	movs	r2, #3
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4bad      	ldr	r3, [pc, #692]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d009      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019d6:	4ba9      	ldr	r3, [pc, #676]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80019d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019da:	220c      	movs	r2, #12
 80019dc:	4393      	bics	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	4ba5      	ldr	r3, [pc, #660]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2204      	movs	r2, #4
 80019f0:	4013      	ands	r3, r2
 80019f2:	d009      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019f4:	4ba1      	ldr	r3, [pc, #644]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80019f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f8:	2230      	movs	r2, #48	; 0x30
 80019fa:	4393      	bics	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	4b9e      	ldr	r3, [pc, #632]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d009      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a12:	4b9a      	ldr	r3, [pc, #616]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	4a9b      	ldr	r2, [pc, #620]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	4b96      	ldr	r3, [pc, #600]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	015b      	lsls	r3, r3, #5
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d009      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001a32:	4b92      	ldr	r3, [pc, #584]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	4a94      	ldr	r2, [pc, #592]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	4b8e      	ldr	r3, [pc, #568]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d009      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a52:	4b8a      	ldr	r3, [pc, #552]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	4a8d      	ldr	r2, [pc, #564]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a60:	4b86      	ldr	r3, [pc, #536]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001a62:	430a      	orrs	r2, r1
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d009      	beq.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a72:	4b82      	ldr	r3, [pc, #520]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a76:	4a86      	ldr	r2, [pc, #536]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a80:	4b7e      	ldr	r3, [pc, #504]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001a82:	430a      	orrs	r2, r1
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d009      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a90:	4b7a      	ldr	r3, [pc, #488]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a94:	4a7f      	ldr	r2, [pc, #508]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	4b77      	ldr	r3, [pc, #476]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2240      	movs	r2, #64	; 0x40
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001aae:	4b73      	ldr	r3, [pc, #460]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	4a79      	ldr	r2, [pc, #484]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69da      	ldr	r2, [r3, #28]
 8001abc:	4b6f      	ldr	r3, [pc, #444]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	01db      	lsls	r3, r3, #7
 8001aca:	4013      	ands	r3, r2
 8001acc:	d015      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ace:	4b6b      	ldr	r3, [pc, #428]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	0899      	lsrs	r1, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ada:	4b68      	ldr	r3, [pc, #416]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	05db      	lsls	r3, r3, #23
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d106      	bne.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001aec:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	4b62      	ldr	r3, [pc, #392]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	0249      	lsls	r1, r1, #9
 8001af6:	430a      	orrs	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	031b      	lsls	r3, r3, #12
 8001b02:	4013      	ands	r3, r2
 8001b04:	d009      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b06:	4b5d      	ldr	r3, [pc, #372]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	4393      	bics	r3, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b14:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b16:	430a      	orrs	r2, r1
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	039b      	lsls	r3, r3, #14
 8001b22:	4013      	ands	r3, r2
 8001b24:	d016      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001b26:	4b55      	ldr	r3, [pc, #340]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b34:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b36:	430a      	orrs	r2, r1
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	03db      	lsls	r3, r3, #15
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d106      	bne.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001b46:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	0449      	lsls	r1, r1, #17
 8001b50:	430a      	orrs	r2, r1
 8001b52:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	03db      	lsls	r3, r3, #15
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d016      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001b60:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b6e:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b70:	430a      	orrs	r2, r1
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	045b      	lsls	r3, r3, #17
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	0449      	lsls	r1, r1, #17
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4013      	ands	r3, r2
 8001b98:	d014      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001b9a:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	4393      	bics	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d106      	bne.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001bb6:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	0249      	lsls	r1, r1, #9
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	019b      	lsls	r3, r3, #6
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d014      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bde:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d106      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bf2:	2180      	movs	r1, #128	; 0x80
 8001bf4:	0249      	lsls	r1, r1, #9
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	045b      	lsls	r3, r3, #17
 8001c02:	4013      	ands	r3, r2
 8001c04:	d016      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d106      	bne.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0449      	lsls	r1, r1, #17
 8001c30:	430a      	orrs	r2, r1
 8001c32:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	049b      	lsls	r3, r3, #18
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d016      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	0449      	lsls	r1, r1, #17
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001c6e:	2312      	movs	r3, #18
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	781b      	ldrb	r3, [r3, #0]
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b006      	add	sp, #24
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	efffffff 	.word	0xefffffff
 8001c84:	fffff3ff 	.word	0xfffff3ff
 8001c88:	fffffcff 	.word	0xfffffcff
 8001c8c:	fff3ffff 	.word	0xfff3ffff
 8001c90:	ffcfffff 	.word	0xffcfffff
 8001c94:	ffffcfff 	.word	0xffffcfff
 8001c98:	ffff3fff 	.word	0xffff3fff
 8001c9c:	ffbfffff 	.word	0xffbfffff
 8001ca0:	feffffff 	.word	0xfeffffff

08001ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e04a      	b.n	8001d4c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223d      	movs	r2, #61	; 0x3d
 8001cba:	5c9b      	ldrb	r3, [r3, r2]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	223c      	movs	r2, #60	; 0x3c
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7fe fd27 	bl	8000720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	223d      	movs	r2, #61	; 0x3d
 8001cd6:	2102      	movs	r1, #2
 8001cd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	0010      	movs	r0, r2
 8001ce6:	f000 f9b5 	bl	8002054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2248      	movs	r2, #72	; 0x48
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	223e      	movs	r2, #62	; 0x3e
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	223f      	movs	r2, #63	; 0x3f
 8001cfe:	2101      	movs	r1, #1
 8001d00:	5499      	strb	r1, [r3, r2]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2240      	movs	r2, #64	; 0x40
 8001d06:	2101      	movs	r1, #1
 8001d08:	5499      	strb	r1, [r3, r2]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2241      	movs	r2, #65	; 0x41
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2242      	movs	r2, #66	; 0x42
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2243      	movs	r2, #67	; 0x43
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2244      	movs	r2, #68	; 0x44
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2245      	movs	r2, #69	; 0x45
 8001d2e:	2101      	movs	r1, #1
 8001d30:	5499      	strb	r1, [r3, r2]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2246      	movs	r2, #70	; 0x46
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2247      	movs	r2, #71	; 0x47
 8001d3e:	2101      	movs	r1, #1
 8001d40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	223d      	movs	r2, #61	; 0x3d
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	223d      	movs	r2, #61	; 0x3d
 8001d60:	5c9b      	ldrb	r3, [r3, r2]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d001      	beq.n	8001d6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e03f      	b.n	8001dec <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	223d      	movs	r2, #61	; 0x3d
 8001d70:	2102      	movs	r1, #2
 8001d72:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <HAL_TIM_Base_Start+0xa0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d014      	beq.n	8001da8 <HAL_TIM_Base_Start+0x54>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	05db      	lsls	r3, r3, #23
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d00e      	beq.n	8001da8 <HAL_TIM_Base_Start+0x54>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_TIM_Base_Start+0xa4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d009      	beq.n	8001da8 <HAL_TIM_Base_Start+0x54>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_TIM_Base_Start+0xa8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d004      	beq.n	8001da8 <HAL_TIM_Base_Start+0x54>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_TIM_Base_Start+0xac>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d116      	bne.n	8001dd6 <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <HAL_TIM_Base_Start+0xb0>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d016      	beq.n	8001de8 <HAL_TIM_Base_Start+0x94>
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	025b      	lsls	r3, r3, #9
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d011      	beq.n	8001de8 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2101      	movs	r1, #1
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd4:	e008      	b.n	8001de8 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	430a      	orrs	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	e000      	b.n	8001dea <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b004      	add	sp, #16
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40012c00 	.word	0x40012c00
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	40000800 	.word	0x40000800
 8001e00:	40014000 	.word	0x40014000
 8001e04:	00010007 	.word	0x00010007

08001e08 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e042      	b.n	8001ea2 <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	223d      	movs	r2, #61	; 0x3d
 8001e20:	5c9b      	ldrb	r3, [r3, r2]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	223c      	movs	r2, #60	; 0x3c
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 f839 	bl	8001eaa <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	223d      	movs	r2, #61	; 0x3d
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3304      	adds	r3, #4
 8001e48:	0019      	movs	r1, r3
 8001e4a:	0010      	movs	r0, r2
 8001e4c:	f000 f902 	bl	8002054 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2248      	movs	r2, #72	; 0x48
 8001e74:	2101      	movs	r1, #1
 8001e76:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	223e      	movs	r2, #62	; 0x3e
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	223f      	movs	r2, #63	; 0x3f
 8001e84:	2101      	movs	r1, #1
 8001e86:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2244      	movs	r2, #68	; 0x44
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2245      	movs	r2, #69	; 0x45
 8001e94:	2101      	movs	r1, #1
 8001e96:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	223d      	movs	r2, #61	; 0x3d
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	223c      	movs	r2, #60	; 0x3c
 8001eca:	5c9b      	ldrb	r3, [r3, r2]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_TIM_ConfigClockSource+0x18>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e0b7      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x188>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	223c      	movs	r2, #60	; 0x3c
 8001ed8:	2101      	movs	r1, #1
 8001eda:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	223d      	movs	r2, #61	; 0x3d
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_TIM_ConfigClockSource+0x190>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a56      	ldr	r2, [pc, #344]	; (8002050 <HAL_TIM_ConfigClockSource+0x194>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	0192      	lsls	r2, r2, #6
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d040      	beq.n	8001f92 <HAL_TIM_ConfigClockSource+0xd6>
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0192      	lsls	r2, r2, #6
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d900      	bls.n	8001f1a <HAL_TIM_ConfigClockSource+0x5e>
 8001f18:	e088      	b.n	800202c <HAL_TIM_ConfigClockSource+0x170>
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	0152      	lsls	r2, r2, #5
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d100      	bne.n	8001f24 <HAL_TIM_ConfigClockSource+0x68>
 8001f22:	e085      	b.n	8002030 <HAL_TIM_ConfigClockSource+0x174>
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	0152      	lsls	r2, r2, #5
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d900      	bls.n	8001f2e <HAL_TIM_ConfigClockSource+0x72>
 8001f2c:	e07e      	b.n	800202c <HAL_TIM_ConfigClockSource+0x170>
 8001f2e:	2b70      	cmp	r3, #112	; 0x70
 8001f30:	d018      	beq.n	8001f64 <HAL_TIM_ConfigClockSource+0xa8>
 8001f32:	d900      	bls.n	8001f36 <HAL_TIM_ConfigClockSource+0x7a>
 8001f34:	e07a      	b.n	800202c <HAL_TIM_ConfigClockSource+0x170>
 8001f36:	2b60      	cmp	r3, #96	; 0x60
 8001f38:	d04f      	beq.n	8001fda <HAL_TIM_ConfigClockSource+0x11e>
 8001f3a:	d900      	bls.n	8001f3e <HAL_TIM_ConfigClockSource+0x82>
 8001f3c:	e076      	b.n	800202c <HAL_TIM_ConfigClockSource+0x170>
 8001f3e:	2b50      	cmp	r3, #80	; 0x50
 8001f40:	d03b      	beq.n	8001fba <HAL_TIM_ConfigClockSource+0xfe>
 8001f42:	d900      	bls.n	8001f46 <HAL_TIM_ConfigClockSource+0x8a>
 8001f44:	e072      	b.n	800202c <HAL_TIM_ConfigClockSource+0x170>
 8001f46:	2b40      	cmp	r3, #64	; 0x40
 8001f48:	d057      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x13e>
 8001f4a:	d900      	bls.n	8001f4e <HAL_TIM_ConfigClockSource+0x92>
 8001f4c:	e06e      	b.n	800202c <HAL_TIM_ConfigClockSource+0x170>
 8001f4e:	2b30      	cmp	r3, #48	; 0x30
 8001f50:	d063      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x15e>
 8001f52:	d86b      	bhi.n	800202c <HAL_TIM_ConfigClockSource+0x170>
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d060      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x15e>
 8001f58:	d868      	bhi.n	800202c <HAL_TIM_ConfigClockSource+0x170>
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d05d      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x15e>
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d05b      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f62:	e063      	b.n	800202c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f000 f974 	bl	8002260 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2277      	movs	r2, #119	; 0x77
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	609a      	str	r2, [r3, #8]
      break;
 8001f90:	e04f      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6899      	ldr	r1, [r3, #8]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f000 f95d 	bl	8002260 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	01c9      	lsls	r1, r1, #7
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]
      break;
 8001fb8:	e03b      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6859      	ldr	r1, [r3, #4]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	f000 f8ce 	bl	8002168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2150      	movs	r1, #80	; 0x50
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f000 f928 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8001fd8:	e02b      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6859      	ldr	r1, [r3, #4]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	f000 f8ec 	bl	80021c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2160      	movs	r1, #96	; 0x60
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 f918 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8001ff8:	e01b      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	001a      	movs	r2, r3
 8002008:	f000 f8ae 	bl	8002168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2140      	movs	r1, #64	; 0x40
 8002012:	0018      	movs	r0, r3
 8002014:	f000 f908 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8002018:	e00b      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0019      	movs	r1, r3
 8002024:	0010      	movs	r0, r2
 8002026:	f000 f8ff 	bl	8002228 <TIM_ITRx_SetConfig>
        break;
 800202a:	e002      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	e000      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002030:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	223d      	movs	r2, #61	; 0x3d
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	223c      	movs	r2, #60	; 0x3c
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b004      	add	sp, #16
 800204a:	bd80      	pop	{r7, pc}
 800204c:	ffceff88 	.word	0xffceff88
 8002050:	ffff00ff 	.word	0xffff00ff

08002054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a38      	ldr	r2, [pc, #224]	; (8002148 <TIM_Base_SetConfig+0xf4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00c      	beq.n	8002086 <TIM_Base_SetConfig+0x32>
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	05db      	lsls	r3, r3, #23
 8002072:	429a      	cmp	r2, r3
 8002074:	d007      	beq.n	8002086 <TIM_Base_SetConfig+0x32>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a34      	ldr	r2, [pc, #208]	; (800214c <TIM_Base_SetConfig+0xf8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_Base_SetConfig+0x32>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a33      	ldr	r2, [pc, #204]	; (8002150 <TIM_Base_SetConfig+0xfc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d108      	bne.n	8002098 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2270      	movs	r2, #112	; 0x70
 800208a:	4393      	bics	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a2b      	ldr	r2, [pc, #172]	; (8002148 <TIM_Base_SetConfig+0xf4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d01c      	beq.n	80020da <TIM_Base_SetConfig+0x86>
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	05db      	lsls	r3, r3, #23
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d017      	beq.n	80020da <TIM_Base_SetConfig+0x86>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <TIM_Base_SetConfig+0xf8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <TIM_Base_SetConfig+0x86>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a26      	ldr	r2, [pc, #152]	; (8002150 <TIM_Base_SetConfig+0xfc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00f      	beq.n	80020da <TIM_Base_SetConfig+0x86>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a25      	ldr	r2, [pc, #148]	; (8002154 <TIM_Base_SetConfig+0x100>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00b      	beq.n	80020da <TIM_Base_SetConfig+0x86>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a24      	ldr	r2, [pc, #144]	; (8002158 <TIM_Base_SetConfig+0x104>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <TIM_Base_SetConfig+0x86>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a23      	ldr	r2, [pc, #140]	; (800215c <TIM_Base_SetConfig+0x108>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d003      	beq.n	80020da <TIM_Base_SetConfig+0x86>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <TIM_Base_SetConfig+0x10c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d108      	bne.n	80020ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4a21      	ldr	r2, [pc, #132]	; (8002164 <TIM_Base_SetConfig+0x110>)
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	4393      	bics	r3, r2
 80020f2:	001a      	movs	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <TIM_Base_SetConfig+0xf4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00b      	beq.n	8002132 <TIM_Base_SetConfig+0xde>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <TIM_Base_SetConfig+0x104>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <TIM_Base_SetConfig+0xde>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <TIM_Base_SetConfig+0x108>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <TIM_Base_SetConfig+0xde>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <TIM_Base_SetConfig+0x10c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d103      	bne.n	800213a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	615a      	str	r2, [r3, #20]
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b004      	add	sp, #16
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40000400 	.word	0x40000400
 8002150:	40000800 	.word	0x40000800
 8002154:	40002000 	.word	0x40002000
 8002158:	40014000 	.word	0x40014000
 800215c:	40014400 	.word	0x40014400
 8002160:	40014800 	.word	0x40014800
 8002164:	fffffcff 	.word	0xfffffcff

08002168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2201      	movs	r2, #1
 8002180:	4393      	bics	r3, r2
 8002182:	001a      	movs	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	22f0      	movs	r2, #240	; 0xf0
 8002192:	4393      	bics	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	220a      	movs	r2, #10
 80021a4:	4393      	bics	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	621a      	str	r2, [r3, #32]
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b006      	add	sp, #24
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	2210      	movs	r2, #16
 80021d6:	4393      	bics	r3, r2
 80021d8:	001a      	movs	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <TIM_TI2_ConfigInputStage+0x60>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	031b      	lsls	r3, r3, #12
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	22a0      	movs	r2, #160	; 0xa0
 8002200:	4393      	bics	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	621a      	str	r2, [r3, #32]
}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b006      	add	sp, #24
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	ffff0fff 	.word	0xffff0fff

08002228 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <TIM_ITRx_SetConfig+0x34>)
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	2207      	movs	r2, #7
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	609a      	str	r2, [r3, #8]
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	b004      	add	sp, #16
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	ffcfff8f 	.word	0xffcfff8f

08002260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <TIM_ETR_SetConfig+0x3c>)
 8002278:	4013      	ands	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	021a      	lsls	r2, r3, #8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	431a      	orrs	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b006      	add	sp, #24
 800229a:	bd80      	pop	{r7, pc}
 800229c:	ffff00ff 	.word	0xffff00ff

080022a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	223c      	movs	r2, #60	; 0x3c
 80022ae:	5c9b      	ldrb	r3, [r3, r2]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e05a      	b.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	223c      	movs	r2, #60	; 0x3c
 80022bc:	2101      	movs	r1, #1
 80022be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	223d      	movs	r2, #61	; 0x3d
 80022c4:	2102      	movs	r1, #2
 80022c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a26      	ldr	r2, [pc, #152]	; (8002378 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d108      	bne.n	80022f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4a25      	ldr	r2, [pc, #148]	; (800237c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2270      	movs	r2, #112	; 0x70
 80022f8:	4393      	bics	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a19      	ldr	r2, [pc, #100]	; (8002378 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d014      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	05db      	lsls	r3, r3, #23
 8002320:	429a      	cmp	r2, r3
 8002322:	d00e      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a15      	ldr	r2, [pc, #84]	; (8002380 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a12      	ldr	r2, [pc, #72]	; (8002388 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10c      	bne.n	800235c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	4393      	bics	r3, r2
 8002348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	4313      	orrs	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	223d      	movs	r2, #61	; 0x3d
 8002360:	2101      	movs	r1, #1
 8002362:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	223c      	movs	r2, #60	; 0x3c
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b004      	add	sp, #16
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	40012c00 	.word	0x40012c00
 800237c:	ff0fffff 	.word	0xff0fffff
 8002380:	40000400 	.word	0x40000400
 8002384:	40000800 	.word	0x40000800
 8002388:	40014000 	.word	0x40014000

0800238c <__libc_init_array>:
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	2600      	movs	r6, #0
 8002390:	4d0c      	ldr	r5, [pc, #48]	; (80023c4 <__libc_init_array+0x38>)
 8002392:	4c0d      	ldr	r4, [pc, #52]	; (80023c8 <__libc_init_array+0x3c>)
 8002394:	1b64      	subs	r4, r4, r5
 8002396:	10a4      	asrs	r4, r4, #2
 8002398:	42a6      	cmp	r6, r4
 800239a:	d109      	bne.n	80023b0 <__libc_init_array+0x24>
 800239c:	2600      	movs	r6, #0
 800239e:	f000 f821 	bl	80023e4 <_init>
 80023a2:	4d0a      	ldr	r5, [pc, #40]	; (80023cc <__libc_init_array+0x40>)
 80023a4:	4c0a      	ldr	r4, [pc, #40]	; (80023d0 <__libc_init_array+0x44>)
 80023a6:	1b64      	subs	r4, r4, r5
 80023a8:	10a4      	asrs	r4, r4, #2
 80023aa:	42a6      	cmp	r6, r4
 80023ac:	d105      	bne.n	80023ba <__libc_init_array+0x2e>
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
 80023b0:	00b3      	lsls	r3, r6, #2
 80023b2:	58eb      	ldr	r3, [r5, r3]
 80023b4:	4798      	blx	r3
 80023b6:	3601      	adds	r6, #1
 80023b8:	e7ee      	b.n	8002398 <__libc_init_array+0xc>
 80023ba:	00b3      	lsls	r3, r6, #2
 80023bc:	58eb      	ldr	r3, [r5, r3]
 80023be:	4798      	blx	r3
 80023c0:	3601      	adds	r6, #1
 80023c2:	e7f2      	b.n	80023aa <__libc_init_array+0x1e>
 80023c4:	08002460 	.word	0x08002460
 80023c8:	08002460 	.word	0x08002460
 80023cc:	08002460 	.word	0x08002460
 80023d0:	08002464 	.word	0x08002464

080023d4 <memset>:
 80023d4:	0003      	movs	r3, r0
 80023d6:	1882      	adds	r2, r0, r2
 80023d8:	4293      	cmp	r3, r2
 80023da:	d100      	bne.n	80023de <memset+0xa>
 80023dc:	4770      	bx	lr
 80023de:	7019      	strb	r1, [r3, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	e7f9      	b.n	80023d8 <memset+0x4>

080023e4 <_init>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr

080023f0 <_fini>:
 80023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f6:	bc08      	pop	{r3}
 80023f8:	469e      	mov	lr, r3
 80023fa:	4770      	bx	lr
