
Esp32_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007058  08007058  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  08007058  08007058  00017058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007060  08007060  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007064  08007064  00017064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08007068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000016c  080071d4  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  080071d4  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ab4  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002700  00000000  00000000  00035c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00038348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  000394c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d512  00000000  00000000  0003a560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f34  00000000  00000000  00057a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3dc7  00000000  00000000  0006b9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f76d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000408c  00000000  00000000  0012f7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000016c 	.word	0x2000016c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006f78 	.word	0x08006f78

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000170 	.word	0x20000170
 8000100:	08006f78 	.word	0x08006f78

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	1c08      	adds	r0, r1, #0
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 fbf2 	bl	8000c48 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 fbed 	bl	8000c48 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__aeabi_dmul>:
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	4657      	mov	r7, sl
 80005dc:	464e      	mov	r6, r9
 80005de:	4645      	mov	r5, r8
 80005e0:	46de      	mov	lr, fp
 80005e2:	b5e0      	push	{r5, r6, r7, lr}
 80005e4:	4698      	mov	r8, r3
 80005e6:	030c      	lsls	r4, r1, #12
 80005e8:	004b      	lsls	r3, r1, #1
 80005ea:	0006      	movs	r6, r0
 80005ec:	4692      	mov	sl, r2
 80005ee:	b087      	sub	sp, #28
 80005f0:	0b24      	lsrs	r4, r4, #12
 80005f2:	0d5b      	lsrs	r3, r3, #21
 80005f4:	0fcf      	lsrs	r7, r1, #31
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d06c      	beq.n	80006d4 <__aeabi_dmul+0xfc>
 80005fa:	4add      	ldr	r2, [pc, #884]	; (8000970 <__aeabi_dmul+0x398>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d100      	bne.n	8000602 <__aeabi_dmul+0x2a>
 8000600:	e086      	b.n	8000710 <__aeabi_dmul+0x138>
 8000602:	0f42      	lsrs	r2, r0, #29
 8000604:	00e4      	lsls	r4, r4, #3
 8000606:	4314      	orrs	r4, r2
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	0412      	lsls	r2, r2, #16
 800060c:	4314      	orrs	r4, r2
 800060e:	4ad9      	ldr	r2, [pc, #868]	; (8000974 <__aeabi_dmul+0x39c>)
 8000610:	00c5      	lsls	r5, r0, #3
 8000612:	4694      	mov	ip, r2
 8000614:	4463      	add	r3, ip
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	4699      	mov	r9, r3
 800061c:	469b      	mov	fp, r3
 800061e:	4643      	mov	r3, r8
 8000620:	4642      	mov	r2, r8
 8000622:	031e      	lsls	r6, r3, #12
 8000624:	0fd2      	lsrs	r2, r2, #31
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4650      	mov	r0, sl
 800062a:	4690      	mov	r8, r2
 800062c:	0b36      	lsrs	r6, r6, #12
 800062e:	0d5b      	lsrs	r3, r3, #21
 8000630:	d100      	bne.n	8000634 <__aeabi_dmul+0x5c>
 8000632:	e078      	b.n	8000726 <__aeabi_dmul+0x14e>
 8000634:	4ace      	ldr	r2, [pc, #824]	; (8000970 <__aeabi_dmul+0x398>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d01d      	beq.n	8000676 <__aeabi_dmul+0x9e>
 800063a:	49ce      	ldr	r1, [pc, #824]	; (8000974 <__aeabi_dmul+0x39c>)
 800063c:	0f42      	lsrs	r2, r0, #29
 800063e:	468c      	mov	ip, r1
 8000640:	9900      	ldr	r1, [sp, #0]
 8000642:	4463      	add	r3, ip
 8000644:	00f6      	lsls	r6, r6, #3
 8000646:	468c      	mov	ip, r1
 8000648:	4316      	orrs	r6, r2
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	449c      	add	ip, r3
 800064e:	0412      	lsls	r2, r2, #16
 8000650:	4663      	mov	r3, ip
 8000652:	4316      	orrs	r6, r2
 8000654:	00c2      	lsls	r2, r0, #3
 8000656:	2000      	movs	r0, #0
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	9900      	ldr	r1, [sp, #0]
 800065c:	4643      	mov	r3, r8
 800065e:	3101      	adds	r1, #1
 8000660:	468c      	mov	ip, r1
 8000662:	4649      	mov	r1, r9
 8000664:	407b      	eors	r3, r7
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	290f      	cmp	r1, #15
 800066a:	d900      	bls.n	800066e <__aeabi_dmul+0x96>
 800066c:	e07e      	b.n	800076c <__aeabi_dmul+0x194>
 800066e:	4bc2      	ldr	r3, [pc, #776]	; (8000978 <__aeabi_dmul+0x3a0>)
 8000670:	0089      	lsls	r1, r1, #2
 8000672:	5859      	ldr	r1, [r3, r1]
 8000674:	468f      	mov	pc, r1
 8000676:	4652      	mov	r2, sl
 8000678:	9b00      	ldr	r3, [sp, #0]
 800067a:	4332      	orrs	r2, r6
 800067c:	d000      	beq.n	8000680 <__aeabi_dmul+0xa8>
 800067e:	e156      	b.n	800092e <__aeabi_dmul+0x356>
 8000680:	49bb      	ldr	r1, [pc, #748]	; (8000970 <__aeabi_dmul+0x398>)
 8000682:	2600      	movs	r6, #0
 8000684:	468c      	mov	ip, r1
 8000686:	4463      	add	r3, ip
 8000688:	4649      	mov	r1, r9
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2302      	movs	r3, #2
 800068e:	4319      	orrs	r1, r3
 8000690:	4689      	mov	r9, r1
 8000692:	2002      	movs	r0, #2
 8000694:	e7e1      	b.n	800065a <__aeabi_dmul+0x82>
 8000696:	4643      	mov	r3, r8
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	0034      	movs	r4, r6
 800069c:	0015      	movs	r5, r2
 800069e:	4683      	mov	fp, r0
 80006a0:	465b      	mov	r3, fp
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d05e      	beq.n	8000764 <__aeabi_dmul+0x18c>
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d100      	bne.n	80006ac <__aeabi_dmul+0xd4>
 80006aa:	e1f3      	b.n	8000a94 <__aeabi_dmul+0x4bc>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d000      	beq.n	80006b2 <__aeabi_dmul+0xda>
 80006b0:	e118      	b.n	80008e4 <__aeabi_dmul+0x30c>
 80006b2:	2200      	movs	r2, #0
 80006b4:	2400      	movs	r4, #0
 80006b6:	2500      	movs	r5, #0
 80006b8:	9b01      	ldr	r3, [sp, #4]
 80006ba:	0512      	lsls	r2, r2, #20
 80006bc:	4322      	orrs	r2, r4
 80006be:	07db      	lsls	r3, r3, #31
 80006c0:	431a      	orrs	r2, r3
 80006c2:	0028      	movs	r0, r5
 80006c4:	0011      	movs	r1, r2
 80006c6:	b007      	add	sp, #28
 80006c8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ca:	46bb      	mov	fp, r7
 80006cc:	46b2      	mov	sl, r6
 80006ce:	46a9      	mov	r9, r5
 80006d0:	46a0      	mov	r8, r4
 80006d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d4:	0025      	movs	r5, r4
 80006d6:	4305      	orrs	r5, r0
 80006d8:	d100      	bne.n	80006dc <__aeabi_dmul+0x104>
 80006da:	e141      	b.n	8000960 <__aeabi_dmul+0x388>
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_dmul+0x10a>
 80006e0:	e1ad      	b.n	8000a3e <__aeabi_dmul+0x466>
 80006e2:	0020      	movs	r0, r4
 80006e4:	f000 fa92 	bl	8000c0c <__clzsi2>
 80006e8:	0001      	movs	r1, r0
 80006ea:	0002      	movs	r2, r0
 80006ec:	390b      	subs	r1, #11
 80006ee:	231d      	movs	r3, #29
 80006f0:	0010      	movs	r0, r2
 80006f2:	1a5b      	subs	r3, r3, r1
 80006f4:	0031      	movs	r1, r6
 80006f6:	0035      	movs	r5, r6
 80006f8:	3808      	subs	r0, #8
 80006fa:	4084      	lsls	r4, r0
 80006fc:	40d9      	lsrs	r1, r3
 80006fe:	4085      	lsls	r5, r0
 8000700:	430c      	orrs	r4, r1
 8000702:	489e      	ldr	r0, [pc, #632]	; (800097c <__aeabi_dmul+0x3a4>)
 8000704:	1a83      	subs	r3, r0, r2
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	4699      	mov	r9, r3
 800070c:	469b      	mov	fp, r3
 800070e:	e786      	b.n	800061e <__aeabi_dmul+0x46>
 8000710:	0005      	movs	r5, r0
 8000712:	4325      	orrs	r5, r4
 8000714:	d000      	beq.n	8000718 <__aeabi_dmul+0x140>
 8000716:	e11c      	b.n	8000952 <__aeabi_dmul+0x37a>
 8000718:	2208      	movs	r2, #8
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2302      	movs	r3, #2
 800071e:	2400      	movs	r4, #0
 8000720:	4691      	mov	r9, r2
 8000722:	469b      	mov	fp, r3
 8000724:	e77b      	b.n	800061e <__aeabi_dmul+0x46>
 8000726:	4652      	mov	r2, sl
 8000728:	4332      	orrs	r2, r6
 800072a:	d100      	bne.n	800072e <__aeabi_dmul+0x156>
 800072c:	e10a      	b.n	8000944 <__aeabi_dmul+0x36c>
 800072e:	2e00      	cmp	r6, #0
 8000730:	d100      	bne.n	8000734 <__aeabi_dmul+0x15c>
 8000732:	e176      	b.n	8000a22 <__aeabi_dmul+0x44a>
 8000734:	0030      	movs	r0, r6
 8000736:	f000 fa69 	bl	8000c0c <__clzsi2>
 800073a:	0002      	movs	r2, r0
 800073c:	3a0b      	subs	r2, #11
 800073e:	231d      	movs	r3, #29
 8000740:	0001      	movs	r1, r0
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	4652      	mov	r2, sl
 8000746:	3908      	subs	r1, #8
 8000748:	40da      	lsrs	r2, r3
 800074a:	408e      	lsls	r6, r1
 800074c:	4316      	orrs	r6, r2
 800074e:	4652      	mov	r2, sl
 8000750:	408a      	lsls	r2, r1
 8000752:	9b00      	ldr	r3, [sp, #0]
 8000754:	4989      	ldr	r1, [pc, #548]	; (800097c <__aeabi_dmul+0x3a4>)
 8000756:	1a18      	subs	r0, r3, r0
 8000758:	0003      	movs	r3, r0
 800075a:	468c      	mov	ip, r1
 800075c:	4463      	add	r3, ip
 800075e:	2000      	movs	r0, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	e77a      	b.n	800065a <__aeabi_dmul+0x82>
 8000764:	2400      	movs	r4, #0
 8000766:	2500      	movs	r5, #0
 8000768:	4a81      	ldr	r2, [pc, #516]	; (8000970 <__aeabi_dmul+0x398>)
 800076a:	e7a5      	b.n	80006b8 <__aeabi_dmul+0xe0>
 800076c:	0c2f      	lsrs	r7, r5, #16
 800076e:	042d      	lsls	r5, r5, #16
 8000770:	0c2d      	lsrs	r5, r5, #16
 8000772:	002b      	movs	r3, r5
 8000774:	0c11      	lsrs	r1, r2, #16
 8000776:	0412      	lsls	r2, r2, #16
 8000778:	0c12      	lsrs	r2, r2, #16
 800077a:	4353      	muls	r3, r2
 800077c:	4698      	mov	r8, r3
 800077e:	0013      	movs	r3, r2
 8000780:	0028      	movs	r0, r5
 8000782:	437b      	muls	r3, r7
 8000784:	4699      	mov	r9, r3
 8000786:	4348      	muls	r0, r1
 8000788:	4448      	add	r0, r9
 800078a:	4683      	mov	fp, r0
 800078c:	4640      	mov	r0, r8
 800078e:	000b      	movs	r3, r1
 8000790:	0c00      	lsrs	r0, r0, #16
 8000792:	4682      	mov	sl, r0
 8000794:	4658      	mov	r0, fp
 8000796:	437b      	muls	r3, r7
 8000798:	4450      	add	r0, sl
 800079a:	9302      	str	r3, [sp, #8]
 800079c:	4581      	cmp	r9, r0
 800079e:	d906      	bls.n	80007ae <__aeabi_dmul+0x1d6>
 80007a0:	469a      	mov	sl, r3
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	025b      	lsls	r3, r3, #9
 80007a6:	4699      	mov	r9, r3
 80007a8:	44ca      	add	sl, r9
 80007aa:	4653      	mov	r3, sl
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	0c03      	lsrs	r3, r0, #16
 80007b0:	469b      	mov	fp, r3
 80007b2:	4643      	mov	r3, r8
 80007b4:	041b      	lsls	r3, r3, #16
 80007b6:	0400      	lsls	r0, r0, #16
 80007b8:	0c1b      	lsrs	r3, r3, #16
 80007ba:	4698      	mov	r8, r3
 80007bc:	0003      	movs	r3, r0
 80007be:	4443      	add	r3, r8
 80007c0:	9304      	str	r3, [sp, #16]
 80007c2:	0c33      	lsrs	r3, r6, #16
 80007c4:	4699      	mov	r9, r3
 80007c6:	002b      	movs	r3, r5
 80007c8:	0436      	lsls	r6, r6, #16
 80007ca:	0c36      	lsrs	r6, r6, #16
 80007cc:	4373      	muls	r3, r6
 80007ce:	4698      	mov	r8, r3
 80007d0:	0033      	movs	r3, r6
 80007d2:	437b      	muls	r3, r7
 80007d4:	469a      	mov	sl, r3
 80007d6:	464b      	mov	r3, r9
 80007d8:	435d      	muls	r5, r3
 80007da:	435f      	muls	r7, r3
 80007dc:	4643      	mov	r3, r8
 80007de:	4455      	add	r5, sl
 80007e0:	0c18      	lsrs	r0, r3, #16
 80007e2:	1940      	adds	r0, r0, r5
 80007e4:	4582      	cmp	sl, r0
 80007e6:	d903      	bls.n	80007f0 <__aeabi_dmul+0x218>
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	025b      	lsls	r3, r3, #9
 80007ec:	469a      	mov	sl, r3
 80007ee:	4457      	add	r7, sl
 80007f0:	0c05      	lsrs	r5, r0, #16
 80007f2:	19eb      	adds	r3, r5, r7
 80007f4:	9305      	str	r3, [sp, #20]
 80007f6:	4643      	mov	r3, r8
 80007f8:	041d      	lsls	r5, r3, #16
 80007fa:	0c2d      	lsrs	r5, r5, #16
 80007fc:	0400      	lsls	r0, r0, #16
 80007fe:	1940      	adds	r0, r0, r5
 8000800:	0c25      	lsrs	r5, r4, #16
 8000802:	0424      	lsls	r4, r4, #16
 8000804:	0c24      	lsrs	r4, r4, #16
 8000806:	0027      	movs	r7, r4
 8000808:	4357      	muls	r7, r2
 800080a:	436a      	muls	r2, r5
 800080c:	4690      	mov	r8, r2
 800080e:	002a      	movs	r2, r5
 8000810:	0c3b      	lsrs	r3, r7, #16
 8000812:	469a      	mov	sl, r3
 8000814:	434a      	muls	r2, r1
 8000816:	4361      	muls	r1, r4
 8000818:	4441      	add	r1, r8
 800081a:	4451      	add	r1, sl
 800081c:	4483      	add	fp, r0
 800081e:	4588      	cmp	r8, r1
 8000820:	d903      	bls.n	800082a <__aeabi_dmul+0x252>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	025b      	lsls	r3, r3, #9
 8000826:	4698      	mov	r8, r3
 8000828:	4442      	add	r2, r8
 800082a:	043f      	lsls	r7, r7, #16
 800082c:	0c0b      	lsrs	r3, r1, #16
 800082e:	0c3f      	lsrs	r7, r7, #16
 8000830:	0409      	lsls	r1, r1, #16
 8000832:	19c9      	adds	r1, r1, r7
 8000834:	0027      	movs	r7, r4
 8000836:	4698      	mov	r8, r3
 8000838:	464b      	mov	r3, r9
 800083a:	4377      	muls	r7, r6
 800083c:	435c      	muls	r4, r3
 800083e:	436e      	muls	r6, r5
 8000840:	435d      	muls	r5, r3
 8000842:	0c3b      	lsrs	r3, r7, #16
 8000844:	4699      	mov	r9, r3
 8000846:	19a4      	adds	r4, r4, r6
 8000848:	444c      	add	r4, r9
 800084a:	4442      	add	r2, r8
 800084c:	9503      	str	r5, [sp, #12]
 800084e:	42a6      	cmp	r6, r4
 8000850:	d904      	bls.n	800085c <__aeabi_dmul+0x284>
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	025b      	lsls	r3, r3, #9
 8000856:	4698      	mov	r8, r3
 8000858:	4445      	add	r5, r8
 800085a:	9503      	str	r5, [sp, #12]
 800085c:	9b02      	ldr	r3, [sp, #8]
 800085e:	043f      	lsls	r7, r7, #16
 8000860:	445b      	add	r3, fp
 8000862:	001e      	movs	r6, r3
 8000864:	4283      	cmp	r3, r0
 8000866:	4180      	sbcs	r0, r0
 8000868:	0423      	lsls	r3, r4, #16
 800086a:	4698      	mov	r8, r3
 800086c:	9b05      	ldr	r3, [sp, #20]
 800086e:	0c3f      	lsrs	r7, r7, #16
 8000870:	4447      	add	r7, r8
 8000872:	4698      	mov	r8, r3
 8000874:	1876      	adds	r6, r6, r1
 8000876:	428e      	cmp	r6, r1
 8000878:	4189      	sbcs	r1, r1
 800087a:	4447      	add	r7, r8
 800087c:	4240      	negs	r0, r0
 800087e:	183d      	adds	r5, r7, r0
 8000880:	46a8      	mov	r8, r5
 8000882:	4693      	mov	fp, r2
 8000884:	4249      	negs	r1, r1
 8000886:	468a      	mov	sl, r1
 8000888:	44c3      	add	fp, r8
 800088a:	429f      	cmp	r7, r3
 800088c:	41bf      	sbcs	r7, r7
 800088e:	4580      	cmp	r8, r0
 8000890:	4180      	sbcs	r0, r0
 8000892:	9b03      	ldr	r3, [sp, #12]
 8000894:	44da      	add	sl, fp
 8000896:	4698      	mov	r8, r3
 8000898:	4653      	mov	r3, sl
 800089a:	4240      	negs	r0, r0
 800089c:	427f      	negs	r7, r7
 800089e:	4307      	orrs	r7, r0
 80008a0:	0c24      	lsrs	r4, r4, #16
 80008a2:	4593      	cmp	fp, r2
 80008a4:	4192      	sbcs	r2, r2
 80008a6:	458a      	cmp	sl, r1
 80008a8:	4189      	sbcs	r1, r1
 80008aa:	193f      	adds	r7, r7, r4
 80008ac:	0ddc      	lsrs	r4, r3, #23
 80008ae:	9b04      	ldr	r3, [sp, #16]
 80008b0:	0275      	lsls	r5, r6, #9
 80008b2:	431d      	orrs	r5, r3
 80008b4:	1e68      	subs	r0, r5, #1
 80008b6:	4185      	sbcs	r5, r0
 80008b8:	4653      	mov	r3, sl
 80008ba:	4252      	negs	r2, r2
 80008bc:	4249      	negs	r1, r1
 80008be:	430a      	orrs	r2, r1
 80008c0:	18bf      	adds	r7, r7, r2
 80008c2:	4447      	add	r7, r8
 80008c4:	0df6      	lsrs	r6, r6, #23
 80008c6:	027f      	lsls	r7, r7, #9
 80008c8:	4335      	orrs	r5, r6
 80008ca:	025a      	lsls	r2, r3, #9
 80008cc:	433c      	orrs	r4, r7
 80008ce:	4315      	orrs	r5, r2
 80008d0:	01fb      	lsls	r3, r7, #7
 80008d2:	d400      	bmi.n	80008d6 <__aeabi_dmul+0x2fe>
 80008d4:	e0c1      	b.n	8000a5a <__aeabi_dmul+0x482>
 80008d6:	2101      	movs	r1, #1
 80008d8:	086a      	lsrs	r2, r5, #1
 80008da:	400d      	ands	r5, r1
 80008dc:	4315      	orrs	r5, r2
 80008de:	07e2      	lsls	r2, r4, #31
 80008e0:	4315      	orrs	r5, r2
 80008e2:	0864      	lsrs	r4, r4, #1
 80008e4:	4926      	ldr	r1, [pc, #152]	; (8000980 <__aeabi_dmul+0x3a8>)
 80008e6:	4461      	add	r1, ip
 80008e8:	2900      	cmp	r1, #0
 80008ea:	dd56      	ble.n	800099a <__aeabi_dmul+0x3c2>
 80008ec:	076b      	lsls	r3, r5, #29
 80008ee:	d009      	beq.n	8000904 <__aeabi_dmul+0x32c>
 80008f0:	220f      	movs	r2, #15
 80008f2:	402a      	ands	r2, r5
 80008f4:	2a04      	cmp	r2, #4
 80008f6:	d005      	beq.n	8000904 <__aeabi_dmul+0x32c>
 80008f8:	1d2a      	adds	r2, r5, #4
 80008fa:	42aa      	cmp	r2, r5
 80008fc:	41ad      	sbcs	r5, r5
 80008fe:	426d      	negs	r5, r5
 8000900:	1964      	adds	r4, r4, r5
 8000902:	0015      	movs	r5, r2
 8000904:	01e3      	lsls	r3, r4, #7
 8000906:	d504      	bpl.n	8000912 <__aeabi_dmul+0x33a>
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <__aeabi_dmul+0x3ac>)
 800090c:	00c9      	lsls	r1, r1, #3
 800090e:	4014      	ands	r4, r2
 8000910:	4461      	add	r1, ip
 8000912:	4a1d      	ldr	r2, [pc, #116]	; (8000988 <__aeabi_dmul+0x3b0>)
 8000914:	4291      	cmp	r1, r2
 8000916:	dd00      	ble.n	800091a <__aeabi_dmul+0x342>
 8000918:	e724      	b.n	8000764 <__aeabi_dmul+0x18c>
 800091a:	0762      	lsls	r2, r4, #29
 800091c:	08ed      	lsrs	r5, r5, #3
 800091e:	0264      	lsls	r4, r4, #9
 8000920:	0549      	lsls	r1, r1, #21
 8000922:	4315      	orrs	r5, r2
 8000924:	0b24      	lsrs	r4, r4, #12
 8000926:	0d4a      	lsrs	r2, r1, #21
 8000928:	e6c6      	b.n	80006b8 <__aeabi_dmul+0xe0>
 800092a:	9701      	str	r7, [sp, #4]
 800092c:	e6b8      	b.n	80006a0 <__aeabi_dmul+0xc8>
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <__aeabi_dmul+0x398>)
 8000930:	2003      	movs	r0, #3
 8000932:	4694      	mov	ip, r2
 8000934:	4463      	add	r3, ip
 8000936:	464a      	mov	r2, r9
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2303      	movs	r3, #3
 800093c:	431a      	orrs	r2, r3
 800093e:	4691      	mov	r9, r2
 8000940:	4652      	mov	r2, sl
 8000942:	e68a      	b.n	800065a <__aeabi_dmul+0x82>
 8000944:	4649      	mov	r1, r9
 8000946:	2301      	movs	r3, #1
 8000948:	4319      	orrs	r1, r3
 800094a:	4689      	mov	r9, r1
 800094c:	2600      	movs	r6, #0
 800094e:	2001      	movs	r0, #1
 8000950:	e683      	b.n	800065a <__aeabi_dmul+0x82>
 8000952:	220c      	movs	r2, #12
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2303      	movs	r3, #3
 8000958:	0005      	movs	r5, r0
 800095a:	4691      	mov	r9, r2
 800095c:	469b      	mov	fp, r3
 800095e:	e65e      	b.n	800061e <__aeabi_dmul+0x46>
 8000960:	2304      	movs	r3, #4
 8000962:	4699      	mov	r9, r3
 8000964:	2300      	movs	r3, #0
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	2400      	movs	r4, #0
 800096c:	469b      	mov	fp, r3
 800096e:	e656      	b.n	800061e <__aeabi_dmul+0x46>
 8000970:	000007ff 	.word	0x000007ff
 8000974:	fffffc01 	.word	0xfffffc01
 8000978:	08006f90 	.word	0x08006f90
 800097c:	fffffc0d 	.word	0xfffffc0d
 8000980:	000003ff 	.word	0x000003ff
 8000984:	feffffff 	.word	0xfeffffff
 8000988:	000007fe 	.word	0x000007fe
 800098c:	2300      	movs	r3, #0
 800098e:	2480      	movs	r4, #128	; 0x80
 8000990:	2500      	movs	r5, #0
 8000992:	4a44      	ldr	r2, [pc, #272]	; (8000aa4 <__aeabi_dmul+0x4cc>)
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	0324      	lsls	r4, r4, #12
 8000998:	e68e      	b.n	80006b8 <__aeabi_dmul+0xe0>
 800099a:	2001      	movs	r0, #1
 800099c:	1a40      	subs	r0, r0, r1
 800099e:	2838      	cmp	r0, #56	; 0x38
 80009a0:	dd00      	ble.n	80009a4 <__aeabi_dmul+0x3cc>
 80009a2:	e686      	b.n	80006b2 <__aeabi_dmul+0xda>
 80009a4:	281f      	cmp	r0, #31
 80009a6:	dd5b      	ble.n	8000a60 <__aeabi_dmul+0x488>
 80009a8:	221f      	movs	r2, #31
 80009aa:	0023      	movs	r3, r4
 80009ac:	4252      	negs	r2, r2
 80009ae:	1a51      	subs	r1, r2, r1
 80009b0:	40cb      	lsrs	r3, r1
 80009b2:	0019      	movs	r1, r3
 80009b4:	2820      	cmp	r0, #32
 80009b6:	d003      	beq.n	80009c0 <__aeabi_dmul+0x3e8>
 80009b8:	4a3b      	ldr	r2, [pc, #236]	; (8000aa8 <__aeabi_dmul+0x4d0>)
 80009ba:	4462      	add	r2, ip
 80009bc:	4094      	lsls	r4, r2
 80009be:	4325      	orrs	r5, r4
 80009c0:	1e6a      	subs	r2, r5, #1
 80009c2:	4195      	sbcs	r5, r2
 80009c4:	002a      	movs	r2, r5
 80009c6:	430a      	orrs	r2, r1
 80009c8:	2107      	movs	r1, #7
 80009ca:	000d      	movs	r5, r1
 80009cc:	2400      	movs	r4, #0
 80009ce:	4015      	ands	r5, r2
 80009d0:	4211      	tst	r1, r2
 80009d2:	d05b      	beq.n	8000a8c <__aeabi_dmul+0x4b4>
 80009d4:	210f      	movs	r1, #15
 80009d6:	2400      	movs	r4, #0
 80009d8:	4011      	ands	r1, r2
 80009da:	2904      	cmp	r1, #4
 80009dc:	d053      	beq.n	8000a86 <__aeabi_dmul+0x4ae>
 80009de:	1d11      	adds	r1, r2, #4
 80009e0:	4291      	cmp	r1, r2
 80009e2:	4192      	sbcs	r2, r2
 80009e4:	4252      	negs	r2, r2
 80009e6:	18a4      	adds	r4, r4, r2
 80009e8:	000a      	movs	r2, r1
 80009ea:	0223      	lsls	r3, r4, #8
 80009ec:	d54b      	bpl.n	8000a86 <__aeabi_dmul+0x4ae>
 80009ee:	2201      	movs	r2, #1
 80009f0:	2400      	movs	r4, #0
 80009f2:	2500      	movs	r5, #0
 80009f4:	e660      	b.n	80006b8 <__aeabi_dmul+0xe0>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	031b      	lsls	r3, r3, #12
 80009fa:	421c      	tst	r4, r3
 80009fc:	d009      	beq.n	8000a12 <__aeabi_dmul+0x43a>
 80009fe:	421e      	tst	r6, r3
 8000a00:	d107      	bne.n	8000a12 <__aeabi_dmul+0x43a>
 8000a02:	4333      	orrs	r3, r6
 8000a04:	031c      	lsls	r4, r3, #12
 8000a06:	4643      	mov	r3, r8
 8000a08:	0015      	movs	r5, r2
 8000a0a:	0b24      	lsrs	r4, r4, #12
 8000a0c:	4a25      	ldr	r2, [pc, #148]	; (8000aa4 <__aeabi_dmul+0x4cc>)
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	e652      	b.n	80006b8 <__aeabi_dmul+0xe0>
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	0312      	lsls	r2, r2, #12
 8000a16:	4314      	orrs	r4, r2
 8000a18:	0324      	lsls	r4, r4, #12
 8000a1a:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <__aeabi_dmul+0x4cc>)
 8000a1c:	0b24      	lsrs	r4, r4, #12
 8000a1e:	9701      	str	r7, [sp, #4]
 8000a20:	e64a      	b.n	80006b8 <__aeabi_dmul+0xe0>
 8000a22:	f000 f8f3 	bl	8000c0c <__clzsi2>
 8000a26:	0003      	movs	r3, r0
 8000a28:	001a      	movs	r2, r3
 8000a2a:	3215      	adds	r2, #21
 8000a2c:	3020      	adds	r0, #32
 8000a2e:	2a1c      	cmp	r2, #28
 8000a30:	dc00      	bgt.n	8000a34 <__aeabi_dmul+0x45c>
 8000a32:	e684      	b.n	800073e <__aeabi_dmul+0x166>
 8000a34:	4656      	mov	r6, sl
 8000a36:	3b08      	subs	r3, #8
 8000a38:	2200      	movs	r2, #0
 8000a3a:	409e      	lsls	r6, r3
 8000a3c:	e689      	b.n	8000752 <__aeabi_dmul+0x17a>
 8000a3e:	f000 f8e5 	bl	8000c0c <__clzsi2>
 8000a42:	0001      	movs	r1, r0
 8000a44:	0002      	movs	r2, r0
 8000a46:	3115      	adds	r1, #21
 8000a48:	3220      	adds	r2, #32
 8000a4a:	291c      	cmp	r1, #28
 8000a4c:	dc00      	bgt.n	8000a50 <__aeabi_dmul+0x478>
 8000a4e:	e64e      	b.n	80006ee <__aeabi_dmul+0x116>
 8000a50:	0034      	movs	r4, r6
 8000a52:	3808      	subs	r0, #8
 8000a54:	2500      	movs	r5, #0
 8000a56:	4084      	lsls	r4, r0
 8000a58:	e653      	b.n	8000702 <__aeabi_dmul+0x12a>
 8000a5a:	9b00      	ldr	r3, [sp, #0]
 8000a5c:	469c      	mov	ip, r3
 8000a5e:	e741      	b.n	80008e4 <__aeabi_dmul+0x30c>
 8000a60:	4912      	ldr	r1, [pc, #72]	; (8000aac <__aeabi_dmul+0x4d4>)
 8000a62:	0022      	movs	r2, r4
 8000a64:	4461      	add	r1, ip
 8000a66:	002e      	movs	r6, r5
 8000a68:	408d      	lsls	r5, r1
 8000a6a:	408a      	lsls	r2, r1
 8000a6c:	40c6      	lsrs	r6, r0
 8000a6e:	1e69      	subs	r1, r5, #1
 8000a70:	418d      	sbcs	r5, r1
 8000a72:	4332      	orrs	r2, r6
 8000a74:	432a      	orrs	r2, r5
 8000a76:	40c4      	lsrs	r4, r0
 8000a78:	0753      	lsls	r3, r2, #29
 8000a7a:	d0b6      	beq.n	80009ea <__aeabi_dmul+0x412>
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	4011      	ands	r1, r2
 8000a80:	2904      	cmp	r1, #4
 8000a82:	d1ac      	bne.n	80009de <__aeabi_dmul+0x406>
 8000a84:	e7b1      	b.n	80009ea <__aeabi_dmul+0x412>
 8000a86:	0765      	lsls	r5, r4, #29
 8000a88:	0264      	lsls	r4, r4, #9
 8000a8a:	0b24      	lsrs	r4, r4, #12
 8000a8c:	08d2      	lsrs	r2, r2, #3
 8000a8e:	4315      	orrs	r5, r2
 8000a90:	2200      	movs	r2, #0
 8000a92:	e611      	b.n	80006b8 <__aeabi_dmul+0xe0>
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	0312      	lsls	r2, r2, #12
 8000a98:	4314      	orrs	r4, r2
 8000a9a:	0324      	lsls	r4, r4, #12
 8000a9c:	4a01      	ldr	r2, [pc, #4]	; (8000aa4 <__aeabi_dmul+0x4cc>)
 8000a9e:	0b24      	lsrs	r4, r4, #12
 8000aa0:	e60a      	b.n	80006b8 <__aeabi_dmul+0xe0>
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	000007ff 	.word	0x000007ff
 8000aa8:	0000043e 	.word	0x0000043e
 8000aac:	0000041e 	.word	0x0000041e

08000ab0 <__aeabi_ui2d>:
 8000ab0:	b510      	push	{r4, lr}
 8000ab2:	1e04      	subs	r4, r0, #0
 8000ab4:	d010      	beq.n	8000ad8 <__aeabi_ui2d+0x28>
 8000ab6:	f000 f8a9 	bl	8000c0c <__clzsi2>
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <__aeabi_ui2d+0x48>)
 8000abc:	1a1b      	subs	r3, r3, r0
 8000abe:	280a      	cmp	r0, #10
 8000ac0:	dc11      	bgt.n	8000ae6 <__aeabi_ui2d+0x36>
 8000ac2:	220b      	movs	r2, #11
 8000ac4:	0021      	movs	r1, r4
 8000ac6:	1a12      	subs	r2, r2, r0
 8000ac8:	40d1      	lsrs	r1, r2
 8000aca:	3015      	adds	r0, #21
 8000acc:	030a      	lsls	r2, r1, #12
 8000ace:	055b      	lsls	r3, r3, #21
 8000ad0:	4084      	lsls	r4, r0
 8000ad2:	0b12      	lsrs	r2, r2, #12
 8000ad4:	0d5b      	lsrs	r3, r3, #21
 8000ad6:	e001      	b.n	8000adc <__aeabi_ui2d+0x2c>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2200      	movs	r2, #0
 8000adc:	051b      	lsls	r3, r3, #20
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	0020      	movs	r0, r4
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	bd10      	pop	{r4, pc}
 8000ae6:	0022      	movs	r2, r4
 8000ae8:	380b      	subs	r0, #11
 8000aea:	4082      	lsls	r2, r0
 8000aec:	055b      	lsls	r3, r3, #21
 8000aee:	0312      	lsls	r2, r2, #12
 8000af0:	2400      	movs	r4, #0
 8000af2:	0b12      	lsrs	r2, r2, #12
 8000af4:	0d5b      	lsrs	r3, r3, #21
 8000af6:	e7f1      	b.n	8000adc <__aeabi_ui2d+0x2c>
 8000af8:	0000041e 	.word	0x0000041e

08000afc <__aeabi_d2f>:
 8000afc:	0002      	movs	r2, r0
 8000afe:	004b      	lsls	r3, r1, #1
 8000b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b02:	0308      	lsls	r0, r1, #12
 8000b04:	0d5b      	lsrs	r3, r3, #21
 8000b06:	4e3d      	ldr	r6, [pc, #244]	; (8000bfc <__aeabi_d2f+0x100>)
 8000b08:	0fcc      	lsrs	r4, r1, #31
 8000b0a:	0a40      	lsrs	r0, r0, #9
 8000b0c:	0f51      	lsrs	r1, r2, #29
 8000b0e:	1c5f      	adds	r7, r3, #1
 8000b10:	4308      	orrs	r0, r1
 8000b12:	00d5      	lsls	r5, r2, #3
 8000b14:	4237      	tst	r7, r6
 8000b16:	d00a      	beq.n	8000b2e <__aeabi_d2f+0x32>
 8000b18:	4939      	ldr	r1, [pc, #228]	; (8000c00 <__aeabi_d2f+0x104>)
 8000b1a:	185e      	adds	r6, r3, r1
 8000b1c:	2efe      	cmp	r6, #254	; 0xfe
 8000b1e:	dd16      	ble.n	8000b4e <__aeabi_d2f+0x52>
 8000b20:	23ff      	movs	r3, #255	; 0xff
 8000b22:	2100      	movs	r1, #0
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	430b      	orrs	r3, r1
 8000b28:	07e0      	lsls	r0, r4, #31
 8000b2a:	4318      	orrs	r0, r3
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d106      	bne.n	8000b40 <__aeabi_d2f+0x44>
 8000b32:	4328      	orrs	r0, r5
 8000b34:	d027      	beq.n	8000b86 <__aeabi_d2f+0x8a>
 8000b36:	2105      	movs	r1, #5
 8000b38:	0189      	lsls	r1, r1, #6
 8000b3a:	0a49      	lsrs	r1, r1, #9
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	e7f1      	b.n	8000b24 <__aeabi_d2f+0x28>
 8000b40:	4305      	orrs	r5, r0
 8000b42:	d0ed      	beq.n	8000b20 <__aeabi_d2f+0x24>
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	03c9      	lsls	r1, r1, #15
 8000b48:	23ff      	movs	r3, #255	; 0xff
 8000b4a:	4301      	orrs	r1, r0
 8000b4c:	e7ea      	b.n	8000b24 <__aeabi_d2f+0x28>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	dd1c      	ble.n	8000b8c <__aeabi_d2f+0x90>
 8000b52:	0192      	lsls	r2, r2, #6
 8000b54:	0011      	movs	r1, r2
 8000b56:	1e4a      	subs	r2, r1, #1
 8000b58:	4191      	sbcs	r1, r2
 8000b5a:	00c0      	lsls	r0, r0, #3
 8000b5c:	0f6d      	lsrs	r5, r5, #29
 8000b5e:	4301      	orrs	r1, r0
 8000b60:	4329      	orrs	r1, r5
 8000b62:	074b      	lsls	r3, r1, #29
 8000b64:	d048      	beq.n	8000bf8 <__aeabi_d2f+0xfc>
 8000b66:	230f      	movs	r3, #15
 8000b68:	400b      	ands	r3, r1
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d000      	beq.n	8000b70 <__aeabi_d2f+0x74>
 8000b6e:	3104      	adds	r1, #4
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	04db      	lsls	r3, r3, #19
 8000b74:	400b      	ands	r3, r1
 8000b76:	d03f      	beq.n	8000bf8 <__aeabi_d2f+0xfc>
 8000b78:	1c72      	adds	r2, r6, #1
 8000b7a:	2efe      	cmp	r6, #254	; 0xfe
 8000b7c:	d0d0      	beq.n	8000b20 <__aeabi_d2f+0x24>
 8000b7e:	0189      	lsls	r1, r1, #6
 8000b80:	0a49      	lsrs	r1, r1, #9
 8000b82:	b2d3      	uxtb	r3, r2
 8000b84:	e7ce      	b.n	8000b24 <__aeabi_d2f+0x28>
 8000b86:	2300      	movs	r3, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	e7cb      	b.n	8000b24 <__aeabi_d2f+0x28>
 8000b8c:	0032      	movs	r2, r6
 8000b8e:	3217      	adds	r2, #23
 8000b90:	db22      	blt.n	8000bd8 <__aeabi_d2f+0xdc>
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	221e      	movs	r2, #30
 8000b96:	0409      	lsls	r1, r1, #16
 8000b98:	4308      	orrs	r0, r1
 8000b9a:	1b92      	subs	r2, r2, r6
 8000b9c:	2a1f      	cmp	r2, #31
 8000b9e:	dd1d      	ble.n	8000bdc <__aeabi_d2f+0xe0>
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	1b8e      	subs	r6, r1, r6
 8000ba6:	0001      	movs	r1, r0
 8000ba8:	40f1      	lsrs	r1, r6
 8000baa:	000e      	movs	r6, r1
 8000bac:	2a20      	cmp	r2, #32
 8000bae:	d004      	beq.n	8000bba <__aeabi_d2f+0xbe>
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <__aeabi_d2f+0x108>)
 8000bb2:	4694      	mov	ip, r2
 8000bb4:	4463      	add	r3, ip
 8000bb6:	4098      	lsls	r0, r3
 8000bb8:	4305      	orrs	r5, r0
 8000bba:	0029      	movs	r1, r5
 8000bbc:	1e4d      	subs	r5, r1, #1
 8000bbe:	41a9      	sbcs	r1, r5
 8000bc0:	4331      	orrs	r1, r6
 8000bc2:	2600      	movs	r6, #0
 8000bc4:	074b      	lsls	r3, r1, #29
 8000bc6:	d1ce      	bne.n	8000b66 <__aeabi_d2f+0x6a>
 8000bc8:	2080      	movs	r0, #128	; 0x80
 8000bca:	000b      	movs	r3, r1
 8000bcc:	04c0      	lsls	r0, r0, #19
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4003      	ands	r3, r0
 8000bd2:	4201      	tst	r1, r0
 8000bd4:	d1d3      	bne.n	8000b7e <__aeabi_d2f+0x82>
 8000bd6:	e7af      	b.n	8000b38 <__aeabi_d2f+0x3c>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e7ac      	b.n	8000b36 <__aeabi_d2f+0x3a>
 8000bdc:	490a      	ldr	r1, [pc, #40]	; (8000c08 <__aeabi_d2f+0x10c>)
 8000bde:	468c      	mov	ip, r1
 8000be0:	0029      	movs	r1, r5
 8000be2:	4463      	add	r3, ip
 8000be4:	40d1      	lsrs	r1, r2
 8000be6:	409d      	lsls	r5, r3
 8000be8:	000a      	movs	r2, r1
 8000bea:	0029      	movs	r1, r5
 8000bec:	4098      	lsls	r0, r3
 8000bee:	1e4d      	subs	r5, r1, #1
 8000bf0:	41a9      	sbcs	r1, r5
 8000bf2:	4301      	orrs	r1, r0
 8000bf4:	4311      	orrs	r1, r2
 8000bf6:	e7e4      	b.n	8000bc2 <__aeabi_d2f+0xc6>
 8000bf8:	0033      	movs	r3, r6
 8000bfa:	e79d      	b.n	8000b38 <__aeabi_d2f+0x3c>
 8000bfc:	000007fe 	.word	0x000007fe
 8000c00:	fffffc80 	.word	0xfffffc80
 8000c04:	fffffca2 	.word	0xfffffca2
 8000c08:	fffffc82 	.word	0xfffffc82

08000c0c <__clzsi2>:
 8000c0c:	211c      	movs	r1, #28
 8000c0e:	2301      	movs	r3, #1
 8000c10:	041b      	lsls	r3, r3, #16
 8000c12:	4298      	cmp	r0, r3
 8000c14:	d301      	bcc.n	8000c1a <__clzsi2+0xe>
 8000c16:	0c00      	lsrs	r0, r0, #16
 8000c18:	3910      	subs	r1, #16
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	4298      	cmp	r0, r3
 8000c1e:	d301      	bcc.n	8000c24 <__clzsi2+0x18>
 8000c20:	0a00      	lsrs	r0, r0, #8
 8000c22:	3908      	subs	r1, #8
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	4298      	cmp	r0, r3
 8000c28:	d301      	bcc.n	8000c2e <__clzsi2+0x22>
 8000c2a:	0900      	lsrs	r0, r0, #4
 8000c2c:	3904      	subs	r1, #4
 8000c2e:	a202      	add	r2, pc, #8	; (adr r2, 8000c38 <__clzsi2+0x2c>)
 8000c30:	5c10      	ldrb	r0, [r2, r0]
 8000c32:	1840      	adds	r0, r0, r1
 8000c34:	4770      	bx	lr
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	02020304 	.word	0x02020304
 8000c3c:	01010101 	.word	0x01010101
	...

08000c48 <__clzdi2>:
 8000c48:	b510      	push	{r4, lr}
 8000c4a:	2900      	cmp	r1, #0
 8000c4c:	d103      	bne.n	8000c56 <__clzdi2+0xe>
 8000c4e:	f7ff ffdd 	bl	8000c0c <__clzsi2>
 8000c52:	3020      	adds	r0, #32
 8000c54:	e002      	b.n	8000c5c <__clzdi2+0x14>
 8000c56:	1c08      	adds	r0, r1, #0
 8000c58:	f7ff ffd8 	bl	8000c0c <__clzsi2>
 8000c5c:	bd10      	pop	{r4, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)

08000c60 <HAL_UART_TxCpltCallback>:
//	HAL_GPIO_TogglePin(motor_GPIO_Port, motor_Pin);
//}

//esp
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
        flag_transmit = 0;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_UART_TxCpltCallback+0x18>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	200002b0 	.word	0x200002b0

08000c7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
           HAL_UART_Transmit(&huart2, &Rec[conta], 1, 10);
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_UART_RxCpltCallback+0x70>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_UART_RxCpltCallback+0x74>)
 8000c8c:	18d1      	adds	r1, r2, r3
 8000c8e:	4819      	ldr	r0, [pc, #100]	; (8000cf4 <HAL_UART_RxCpltCallback+0x78>)
 8000c90:	230a      	movs	r3, #10
 8000c92:	2201      	movs	r2, #1
 8000c94:	f003 fe18 	bl	80048c8 <HAL_UART_Transmit>
        // se a ultima coisa tranferida for (>)
        if(Rec[conta]== '>'){
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_UART_RxCpltCallback+0x70>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_UART_RxCpltCallback+0x74>)
 8000ca0:	5c9b      	ldrb	r3, [r3, r2]
 8000ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8000ca4:	d106      	bne.n	8000cb4 <HAL_UART_RxCpltCallback+0x38>
        	    // pronto para redeber alguma coisa de 5 bytes
                HAL_UART_Receive_IT(&huart4, &Dado, 1);
 8000ca6:	4914      	ldr	r1, [pc, #80]	; (8000cf8 <HAL_UART_RxCpltCallback+0x7c>)
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_UART_RxCpltCallback+0x80>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	0018      	movs	r0, r3
 8000cae:	f003 ff73 	bl	8004b98 <HAL_UART_Receive_IT>
                HAL_UART_Receive_IT(&huart4, &Rec[conta], 1);
        }



}
 8000cb2:	e016      	b.n	8000ce2 <HAL_UART_RxCpltCallback+0x66>
                conta++;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_UART_RxCpltCallback+0x70>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_UART_RxCpltCallback+0x70>)
 8000cbe:	701a      	strb	r2, [r3, #0]
                if(conta>=buffer)
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_UART_RxCpltCallback+0x70>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b63      	cmp	r3, #99	; 0x63
 8000cc6:	d902      	bls.n	8000cce <HAL_UART_RxCpltCallback+0x52>
                                conta=0;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_UART_RxCpltCallback+0x70>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart4, &Rec[conta], 1);
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_UART_RxCpltCallback+0x70>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_UART_RxCpltCallback+0x74>)
 8000cd6:	18d1      	adds	r1, r2, r3
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_UART_RxCpltCallback+0x80>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f003 ff5b 	bl	8004b98 <HAL_UART_Receive_IT>
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	20000188 	.word	0x20000188
 8000cf0:	200002b4 	.word	0x200002b4
 8000cf4:	200003ac 	.word	0x200003ac
 8000cf8:	200003a8 	.word	0x200003a8
 8000cfc:	20000318 	.word	0x20000318

08000d00 <Esp_Comandos>:


// Retorna o valor do ultimo byte recebido: se for '>' quer dizer que a comunicação está estabelecida
uint8_t Esp_Comandos(void){
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
	//contador para controlar os comandos AT que são 7
	for(int i=0; i<7;i++){
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	e064      	b.n	8000dd6 <Esp_Comandos+0xd6>


		flag_transmit = 1;
 8000d0c:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <Esp_Comandos+0xe8>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart4, Data_AT[i], strlen((const char *)Data_AT[i]));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2232      	movs	r2, #50	; 0x32
 8000d16:	435a      	muls	r2, r3
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <Esp_Comandos+0xec>)
 8000d1a:	18d4      	adds	r4, r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2232      	movs	r2, #50	; 0x32
 8000d20:	435a      	muls	r2, r3
 8000d22:	4b32      	ldr	r3, [pc, #200]	; (8000dec <Esp_Comandos+0xec>)
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff f9ec 	bl	8000104 <strlen>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <Esp_Comandos+0xf0>)
 8000d32:	0021      	movs	r1, r4
 8000d34:	0018      	movs	r0, r3
 8000d36:	f003 fe73 	bl	8004a20 <HAL_UART_Transmit_IT>
		while(flag_transmit);
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <Esp_Comandos+0xe8>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1fb      	bne.n	8000d3c <Esp_Comandos+0x3c>

		conta=0;
 8000d44:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <Esp_Comandos+0xf4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
		flag_receive = 1;
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <Esp_Comandos+0xf8>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, Rec, 1);
 8000d50:	492a      	ldr	r1, [pc, #168]	; (8000dfc <Esp_Comandos+0xfc>)
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <Esp_Comandos+0xf0>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	0018      	movs	r0, r3
 8000d58:	f003 ff1e 	bl	8004b98 <HAL_UART_Receive_IT>
		while(flag_receive)
 8000d5c:	e02f      	b.n	8000dbe <Esp_Comandos+0xbe>
		{
			HAL_Delay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 fdc0 	bl	80018e4 <HAL_Delay>
			if(Rec[conta-1]=='\n')
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <Esp_Comandos+0xf4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	4a24      	ldr	r2, [pc, #144]	; (8000dfc <Esp_Comandos+0xfc>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	2b0a      	cmp	r3, #10
 8000d70:	d125      	bne.n	8000dbe <Esp_Comandos+0xbe>
			{
				if(Rec[conta-3]=='K')
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <Esp_Comandos+0xf4>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	3b03      	subs	r3, #3
 8000d78:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <Esp_Comandos+0xfc>)
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	2b4b      	cmp	r3, #75	; 0x4b
 8000d7e:	d103      	bne.n	8000d88 <Esp_Comandos+0x88>
					flag_receive = 0;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <Esp_Comandos+0xf8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e01a      	b.n	8000dbe <Esp_Comandos+0xbe>
				else if(Rec[conta-3]=='R')
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <Esp_Comandos+0xf4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <Esp_Comandos+0xfc>)
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	2b52      	cmp	r3, #82	; 0x52
 8000d94:	d106      	bne.n	8000da4 <Esp_Comandos+0xa4>
				{
					i--;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
					flag_receive = 0;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <Esp_Comandos+0xf8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e00c      	b.n	8000dbe <Esp_Comandos+0xbe>
				}
				else if (Rec[conta]== '>')
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <Esp_Comandos+0xf4>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	001a      	movs	r2, r3
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <Esp_Comandos+0xfc>)
 8000dac:	5c9b      	ldrb	r3, [r3, r2]
 8000dae:	2b3e      	cmp	r3, #62	; 0x3e
 8000db0:	d105      	bne.n	8000dbe <Esp_Comandos+0xbe>
				{
					return Rec[conta];
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <Esp_Comandos+0xf4>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	001a      	movs	r2, r3
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <Esp_Comandos+0xfc>)
 8000dba:	5c9b      	ldrb	r3, [r3, r2]
 8000dbc:	e00f      	b.n	8000dde <Esp_Comandos+0xde>
		while(flag_receive)
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <Esp_Comandos+0xf8>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1cb      	bne.n	8000d5e <Esp_Comandos+0x5e>
				}
			}
		}
		HAL_Delay(2000);
 8000dc6:	23fa      	movs	r3, #250	; 0xfa
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fd8a 	bl	80018e4 <HAL_Delay>
	for(int i=0; i<7;i++){
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b06      	cmp	r3, #6
 8000dda:	dd97      	ble.n	8000d0c <Esp_Comandos+0xc>
	}

	return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b003      	add	sp, #12
 8000de4:	bd90      	pop	{r4, r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	200002b0 	.word	0x200002b0
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000318 	.word	0x20000318
 8000df4:	20000188 	.word	0x20000188
 8000df8:	2000018c 	.word	0x2000018c
 8000dfc:	200002b4 	.word	0x200002b4

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f000 fce7 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f895 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f000 fa3b 	bl	8001288 <MX_GPIO_Init>
  MX_USART4_UART_Init();
 8000e12:	f000 fa05 	bl	8001220 <MX_USART4_UART_Init>
  MX_USART2_UART_Init();
 8000e16:	f000 f9b5 	bl	8001184 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e1a:	f000 f8eb 	bl	8000ff4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e1e:	f000 f955 	bl	80010cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //remove_Busy();

    HAL_Delay(5000);
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <main+0x110>)
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 fd5d 	bl	80018e4 <HAL_Delay>

    if(Esp_Comandos()=='>') // Se estiver conectado com o outro módulo, liga o LED
 8000e2a:	f7ff ff69 	bl	8000d00 <Esp_Comandos>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	2b3e      	cmp	r3, #62	; 0x3e
 8000e32:	d107      	bne.n	8000e44 <main+0x44>
    {
  	  HAL_GPIO_WritePin(LED_PLACA_GPIO_Port, LED_PLACA_Pin, 1);
 8000e34:	23a0      	movs	r3, #160	; 0xa0
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f002 fa1f 	bl	8003280 <HAL_GPIO_WritePin>
 8000e42:	e009      	b.n	8000e58 <main+0x58>
    }else					// Se houve algum erro na conexão, o programa fica travado e o LED fica piscando
    {
  	  while(1)
  	  {
  		  HAL_GPIO_TogglePin(LED_PLACA_GPIO_Port, LED_PLACA_Pin);
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	2120      	movs	r1, #32
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 fa35 	bl	80032ba <HAL_GPIO_TogglePin>
  		  HAL_Delay (250);
 8000e50:	20fa      	movs	r0, #250	; 0xfa
 8000e52:	f000 fd47 	bl	80018e4 <HAL_Delay>
  		  HAL_GPIO_TogglePin(LED_PLACA_GPIO_Port, LED_PLACA_Pin);
 8000e56:	e7f5      	b.n	8000e44 <main+0x44>
  /* USER CODE BEGIN WHILE */
  while (1){



	  HAL_ADC_Start(&hadc1);
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <main+0x114>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f001 f884 	bl	8001f68 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <main+0x114>)
 8000e62:	2164      	movs	r1, #100	; 0x64
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 f8cd 	bl	8002004 <HAL_ADC_PollForConversion>
	  entrada = HAL_ADC_GetValue(&hadc1);
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <main+0x114>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f001 f95d 	bl	800212c <HAL_ADC_GetValue>
 8000e72:	0002      	movs	r2, r0
 8000e74:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <main+0x118>)
 8000e76:	601a      	str	r2, [r3, #0]

	   tensao = entrada * (5/4095.0);
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <main+0x118>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff fe17 	bl	8000ab0 <__aeabi_ui2d>
 8000e82:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <main+0x11c>)
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <main+0x120>)
 8000e86:	f7ff fba7 	bl	80005d8 <__aeabi_dmul>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	000b      	movs	r3, r1
 8000e8e:	0010      	movs	r0, r2
 8000e90:	0019      	movs	r1, r3
 8000e92:	f7ff fe33 	bl	8000afc <__aeabi_d2f>
 8000e96:	1c02      	adds	r2, r0, #0
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <main+0x124>)
 8000e9a:	601a      	str	r2, [r3, #0]

	  if (send)
 8000e9c:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <main+0x128>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00d      	beq.n	8000ec0 <main+0xc0>
	  {
		  HAL_UART_Transmit_IT(&huart4, &Mensagem, 1);
 8000ea4:	1df9      	adds	r1, r7, #7
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <main+0x12c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f003 fdb8 	bl	8004a20 <HAL_UART_Transmit_IT>
		  HAL_Delay(1000);
 8000eb0:	23fa      	movs	r3, #250	; 0xfa
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 fd15 	bl	80018e4 <HAL_Delay>
		  send=0;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <main+0x128>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
	  }

	  switch(Dado){
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <main+0x130>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d002      	beq.n	8000ece <main+0xce>
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d015      	beq.n	8000ef8 <main+0xf8>
 8000ecc:	e01e      	b.n	8000f0c <main+0x10c>

	  case 1:
		  HAL_GPIO_WritePin(motor_GPIO_Port, motor_Pin, 1);
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <main+0x134>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f002 f9d3 	bl	8003280 <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 8000eda:	23fa      	movs	r3, #250	; 0xfa
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 fd00 	bl	80018e4 <HAL_Delay>
		  HAL_GPIO_WritePin(motor_GPIO_Port, motor_Pin, 0);
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <main+0x134>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	0018      	movs	r0, r3
 8000eec:	f002 f9c8 	bl	8003280 <HAL_GPIO_WritePin>
		  Dado=0;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <main+0x130>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
		 break;
 8000ef6:	e009      	b.n	8000f0c <main+0x10c>
	  case 2:
		  HAL_GPIO_WritePin(motor_GPIO_Port, motor_Pin, 0);
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <main+0x134>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	2140      	movs	r1, #64	; 0x40
 8000efe:	0018      	movs	r0, r3
 8000f00:	f002 f9be 	bl	8003280 <HAL_GPIO_WritePin>
		  Dado=0;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <main+0x130>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
		 break;
 8000f0a:	46c0      	nop			; (mov r8, r8)
	  HAL_ADC_Start(&hadc1);
 8000f0c:	e7a4      	b.n	8000e58 <main+0x58>
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	00001388 	.word	0x00001388
 8000f14:	2000019c 	.word	0x2000019c
 8000f18:	20000190 	.word	0x20000190
 8000f1c:	14014014 	.word	0x14014014
 8000f20:	3f540140 	.word	0x3f540140
 8000f24:	20000198 	.word	0x20000198
 8000f28:	20000194 	.word	0x20000194
 8000f2c:	20000318 	.word	0x20000318
 8000f30:	200003a8 	.word	0x200003a8
 8000f34:	50000400 	.word	0x50000400

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b095      	sub	sp, #84	; 0x54
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	2414      	movs	r4, #20
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	0018      	movs	r0, r3
 8000f44:	233c      	movs	r3, #60	; 0x3c
 8000f46:	001a      	movs	r2, r3
 8000f48:	2100      	movs	r1, #0
 8000f4a:	f006 f80d 	bl	8006f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	0018      	movs	r0, r3
 8000f52:	2310      	movs	r3, #16
 8000f54:	001a      	movs	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	f006 f806 	bl	8006f68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f002 fa03 	bl	800336c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2202      	movs	r2, #2
 8000f6a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	0052      	lsls	r2, r2, #1
 8000f72:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f74:	0021      	movs	r1, r4
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2240      	movs	r2, #64	; 0x40
 8000f80:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2202      	movs	r2, #2
 8000f86:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2208      	movs	r2, #8
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	0292      	lsls	r2, r2, #10
 8000fa0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	0492      	lsls	r2, r2, #18
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	0592      	lsls	r2, r2, #22
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f002 fa25 	bl	8003404 <HAL_RCC_OscConfig>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fbe:	f000 f9e9 	bl	8001394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2202      	movs	r2, #2
 8000fcc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2102      	movs	r1, #2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f002 fd76 	bl	8003ad0 <HAL_RCC_ClockConfig>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fe8:	f000 f9d4 	bl	8001394 <Error_Handler>
  }
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b015      	add	sp, #84	; 0x54
 8000ff2:	bd90      	pop	{r4, r7, pc}

08000ff4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	230c      	movs	r3, #12
 8001000:	001a      	movs	r2, r3
 8001002:	2100      	movs	r1, #0
 8001004:	f005 ffb0 	bl	8006f68 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <MX_ADC1_Init+0xcc>)
 800100a:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <MX_ADC1_Init+0xd0>)
 800100c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	05d2      	lsls	r2, r2, #23
 8001014:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <MX_ADC1_Init+0xcc>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001022:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <MX_ADC1_Init+0xcc>)
 800102a:	2204      	movs	r2, #4
 800102c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001030:	2200      	movs	r2, #0
 8001032:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001036:	2200      	movs	r2, #0
 8001038:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_ADC1_Init+0xcc>)
 800103c:	2201      	movs	r2, #1
 800103e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001042:	2201      	movs	r2, #1
 8001044:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001056:	2200      	movs	r2, #0
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_ADC1_Init+0xcc>)
 800105c:	222c      	movs	r2, #44	; 0x2c
 800105e:	2101      	movs	r1, #1
 8001060:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001064:	2200      	movs	r2, #0
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_ADC1_Init+0xcc>)
 800106a:	2200      	movs	r2, #0
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001070:	2200      	movs	r2, #0
 8001072:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001076:	223c      	movs	r2, #60	; 0x3c
 8001078:	2100      	movs	r1, #0
 800107a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_ADC1_Init+0xcc>)
 800107e:	2200      	movs	r2, #0
 8001080:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_ADC1_Init+0xcc>)
 8001084:	0018      	movs	r0, r3
 8001086:	f000 fd91 	bl	8001bac <HAL_ADC_Init>
 800108a:	1e03      	subs	r3, r0, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800108e:	f000 f981 	bl	8001394 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <MX_ADC1_Init+0xd4>)
 8001096:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a4:	1d3a      	adds	r2, r7, #4
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_ADC1_Init+0xcc>)
 80010a8:	0011      	movs	r1, r2
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 f97a 	bl	80023a4 <HAL_ADC_ConfigChannel>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80010b4:	f000 f96e 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b004      	add	sp, #16
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000019c 	.word	0x2000019c
 80010c4:	40012400 	.word	0x40012400
 80010c8:	10000010 	.word	0x10000010

080010cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	2310      	movs	r3, #16
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	0018      	movs	r0, r3
 80010d8:	2310      	movs	r3, #16
 80010da:	001a      	movs	r2, r3
 80010dc:	2100      	movs	r1, #0
 80010de:	f005 ff43 	bl	8006f68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	0018      	movs	r0, r3
 80010e6:	230c      	movs	r3, #12
 80010e8:	001a      	movs	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	f005 ff3c 	bl	8006f68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_TIM1_Init+0xac>)
 80010f2:	4a22      	ldr	r2, [pc, #136]	; (800117c <MX_TIM1_Init+0xb0>)
 80010f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_TIM1_Init+0xac>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <MX_TIM1_Init+0xac>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_TIM1_Init+0xac>)
 8001104:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <MX_TIM1_Init+0xb4>)
 8001106:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_TIM1_Init+0xac>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_TIM1_Init+0xac>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_TIM1_Init+0xac>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_TIM1_Init+0xac>)
 800111c:	0018      	movs	r0, r3
 800111e:	f003 f8bd 	bl	800429c <HAL_TIM_Base_Init>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d001      	beq.n	800112a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001126:	f000 f935 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112a:	2110      	movs	r1, #16
 800112c:	187b      	adds	r3, r7, r1
 800112e:	2280      	movs	r2, #128	; 0x80
 8001130:	0152      	lsls	r2, r2, #5
 8001132:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001134:	187a      	adds	r2, r7, r1
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_TIM1_Init+0xac>)
 8001138:	0011      	movs	r1, r2
 800113a:	0018      	movs	r0, r3
 800113c:	f003 f906 	bl	800434c <HAL_TIM_ConfigClockSource>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001144:	f000 f926 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115a:	1d3a      	adds	r2, r7, #4
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_TIM1_Init+0xac>)
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f003 fae5 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8001166:	1e03      	subs	r3, r0, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800116a:	f000 f913 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b008      	add	sp, #32
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	20000264 	.word	0x20000264
 800117c:	40012c00 	.word	0x40012c00
 8001180:	0000ffff 	.word	0x0000ffff

08001184 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <MX_USART2_UART_Init+0x94>)
 800118a:	4a24      	ldr	r2, [pc, #144]	; (800121c <MX_USART2_UART_Init+0x98>)
 800118c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <MX_USART2_UART_Init+0x94>)
 8001190:	22e1      	movs	r2, #225	; 0xe1
 8001192:	02d2      	lsls	r2, r2, #11
 8001194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <MX_USART2_UART_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_USART2_UART_Init+0x94>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f003 fb24 	bl	800481c <HAL_UART_Init>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d001      	beq.n	80011dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011d8:	f000 f8dc 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011de:	2100      	movs	r1, #0
 80011e0:	0018      	movs	r0, r3
 80011e2:	f005 fdbd 	bl	8006d60 <HAL_UARTEx_SetTxFifoThreshold>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011ea:	f000 f8d3 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011f0:	2100      	movs	r1, #0
 80011f2:	0018      	movs	r0, r3
 80011f4:	f005 fdf4 	bl	8006de0 <HAL_UARTEx_SetRxFifoThreshold>
 80011f8:	1e03      	subs	r3, r0, #0
 80011fa:	d001      	beq.n	8001200 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011fc:	f000 f8ca 	bl	8001394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <MX_USART2_UART_Init+0x94>)
 8001202:	0018      	movs	r0, r3
 8001204:	f005 fd72 	bl	8006cec <HAL_UARTEx_DisableFifoMode>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800120c:	f000 f8c2 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	200003ac 	.word	0x200003ac
 800121c:	40004400 	.word	0x40004400

08001220 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_USART4_UART_Init+0x60>)
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <MX_USART4_UART_Init+0x64>)
 8001228:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_USART4_UART_Init+0x60>)
 800122c:	22e1      	movs	r2, #225	; 0xe1
 800122e:	0252      	lsls	r2, r2, #9
 8001230:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART4_UART_Init+0x60>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART4_UART_Init+0x60>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USART4_UART_Init+0x60>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART4_UART_Init+0x60>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_USART4_UART_Init+0x60>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART4_UART_Init+0x60>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_USART4_UART_Init+0x60>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART4_UART_Init+0x60>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_USART4_UART_Init+0x60>)
 8001264:	2200      	movs	r2, #0
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <MX_USART4_UART_Init+0x60>)
 800126a:	0018      	movs	r0, r3
 800126c:	f003 fad6 	bl	800481c <HAL_UART_Init>
 8001270:	1e03      	subs	r3, r0, #0
 8001272:	d001      	beq.n	8001278 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8001274:	f000 f88e 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	20000318 	.word	0x20000318
 8001284:	40004c00 	.word	0x40004c00

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	240c      	movs	r4, #12
 8001290:	193b      	adds	r3, r7, r4
 8001292:	0018      	movs	r0, r3
 8001294:	2314      	movs	r3, #20
 8001296:	001a      	movs	r2, r3
 8001298:	2100      	movs	r1, #0
 800129a:	f005 fe65 	bl	8006f68 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <MX_GPIO_Init+0x100>)
 80012a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a2:	4b39      	ldr	r3, [pc, #228]	; (8001388 <MX_GPIO_Init+0x100>)
 80012a4:	2104      	movs	r1, #4
 80012a6:	430a      	orrs	r2, r1
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <MX_GPIO_Init+0x100>)
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	2204      	movs	r2, #4
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b34      	ldr	r3, [pc, #208]	; (8001388 <MX_GPIO_Init+0x100>)
 80012b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ba:	4b33      	ldr	r3, [pc, #204]	; (8001388 <MX_GPIO_Init+0x100>)
 80012bc:	2101      	movs	r1, #1
 80012be:	430a      	orrs	r2, r1
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <MX_GPIO_Init+0x100>)
 80012c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c6:	2201      	movs	r2, #1
 80012c8:	4013      	ands	r3, r2
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <MX_GPIO_Init+0x100>)
 80012d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <MX_GPIO_Init+0x100>)
 80012d4:	2102      	movs	r1, #2
 80012d6:	430a      	orrs	r2, r1
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <MX_GPIO_Init+0x100>)
 80012dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012de:	2202      	movs	r2, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PLACA_GPIO_Port, LED_PLACA_Pin, GPIO_PIN_RESET);
 80012e6:	23a0      	movs	r3, #160	; 0xa0
 80012e8:	05db      	lsls	r3, r3, #23
 80012ea:	2200      	movs	r2, #0
 80012ec:	2120      	movs	r1, #32
 80012ee:	0018      	movs	r0, r3
 80012f0:	f001 ffc6 	bl	8003280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor_GPIO_Port, motor_Pin, GPIO_PIN_RESET);
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_GPIO_Init+0x104>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	2140      	movs	r1, #64	; 0x40
 80012fa:	0018      	movs	r0, r3
 80012fc:	f001 ffc0 	bl	8003280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001300:	193b      	adds	r3, r7, r4
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	0192      	lsls	r2, r2, #6
 8001306:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001308:	193b      	adds	r3, r7, r4
 800130a:	22c4      	movs	r2, #196	; 0xc4
 800130c:	0392      	lsls	r2, r2, #14
 800130e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	193b      	adds	r3, r7, r4
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001316:	193b      	adds	r3, r7, r4
 8001318:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <MX_GPIO_Init+0x108>)
 800131a:	0019      	movs	r1, r3
 800131c:	0010      	movs	r0, r2
 800131e:	f001 fe43 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PLACA_Pin */
  GPIO_InitStruct.Pin = LED_PLACA_Pin;
 8001322:	193b      	adds	r3, r7, r4
 8001324:	2220      	movs	r2, #32
 8001326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	193b      	adds	r3, r7, r4
 800132a:	2201      	movs	r2, #1
 800132c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	193b      	adds	r3, r7, r4
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	193b      	adds	r3, r7, r4
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PLACA_GPIO_Port, &GPIO_InitStruct);
 800133a:	193a      	adds	r2, r7, r4
 800133c:	23a0      	movs	r3, #160	; 0xa0
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	0011      	movs	r1, r2
 8001342:	0018      	movs	r0, r3
 8001344:	f001 fe30 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : motor_Pin */
  GPIO_InitStruct.Pin = motor_Pin;
 8001348:	0021      	movs	r1, r4
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2240      	movs	r2, #64	; 0x40
 800134e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2201      	movs	r2, #1
 8001354:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(motor_GPIO_Port, &GPIO_InitStruct);
 8001362:	187b      	adds	r3, r7, r1
 8001364:	4a09      	ldr	r2, [pc, #36]	; (800138c <MX_GPIO_Init+0x104>)
 8001366:	0019      	movs	r1, r3
 8001368:	0010      	movs	r0, r2
 800136a:	f001 fe1d 	bl	8002fa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2007      	movs	r0, #7
 8001374:	f001 fb40 	bl	80029f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001378:	2007      	movs	r0, #7
 800137a:	f001 fb52 	bl	8002a22 <HAL_NVIC_EnableIRQ>

}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b009      	add	sp, #36	; 0x24
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	40021000 	.word	0x40021000
 800138c:	50000400 	.word	0x50000400
 8001390:	50000800 	.word	0x50000800

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>
	...

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_MspInit+0x4c>)
 80013a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_MspInit+0x4c>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	430a      	orrs	r2, r1
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	2201      	movs	r2, #1
 80013b8:	4013      	ands	r3, r2
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_MspInit+0x4c>)
 80013c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_MspInit+0x4c>)
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	0549      	lsls	r1, r1, #21
 80013c8:	430a      	orrs	r2, r1
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_MspInit+0x4c>)
 80013ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	055b      	lsls	r3, r3, #21
 80013d4:	4013      	ands	r3, r2
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80013da:	23c0      	movs	r3, #192	; 0xc0
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	0018      	movs	r0, r3
 80013e0:	f000 faa4 	bl	800192c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000

080013f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b09d      	sub	sp, #116	; 0x74
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	235c      	movs	r3, #92	; 0x5c
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	0018      	movs	r0, r3
 80013fe:	2314      	movs	r3, #20
 8001400:	001a      	movs	r2, r3
 8001402:	2100      	movs	r1, #0
 8001404:	f005 fdb0 	bl	8006f68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001408:	2410      	movs	r4, #16
 800140a:	193b      	adds	r3, r7, r4
 800140c:	0018      	movs	r0, r3
 800140e:	234c      	movs	r3, #76	; 0x4c
 8001410:	001a      	movs	r2, r3
 8001412:	2100      	movs	r1, #0
 8001414:	f005 fda8 	bl	8006f68 <memset>
  if(hadc->Instance==ADC1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a39      	ldr	r2, [pc, #228]	; (8001504 <HAL_ADC_MspInit+0x114>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d16c      	bne.n	80014fc <HAL_ADC_MspInit+0x10c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001422:	193b      	adds	r3, r7, r4
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	01d2      	lsls	r2, r2, #7
 8001428:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800142a:	193b      	adds	r3, r7, r4
 800142c:	2200      	movs	r2, #0
 800142e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001430:	193b      	adds	r3, r7, r4
 8001432:	0018      	movs	r0, r3
 8001434:	f002 fcf6 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 8001438:	1e03      	subs	r3, r0, #0
 800143a:	d001      	beq.n	8001440 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800143c:	f7ff ffaa 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001440:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_ADC_MspInit+0x118>)
 8001442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_ADC_MspInit+0x118>)
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	0349      	lsls	r1, r1, #13
 800144a:	430a      	orrs	r2, r1
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_ADC_MspInit+0x118>)
 8001450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	035b      	lsls	r3, r3, #13
 8001456:	4013      	ands	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <HAL_ADC_MspInit+0x118>)
 800145e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_ADC_MspInit+0x118>)
 8001462:	2101      	movs	r1, #1
 8001464:	430a      	orrs	r2, r1
 8001466:	635a      	str	r2, [r3, #52]	; 0x34
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <HAL_ADC_MspInit+0x118>)
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146c:	2201      	movs	r2, #1
 800146e:	4013      	ands	r3, r2
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001474:	215c      	movs	r1, #92	; 0x5c
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2210      	movs	r2, #16
 800147a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2203      	movs	r2, #3
 8001480:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	187a      	adds	r2, r7, r1
 800148a:	23a0      	movs	r3, #160	; 0xa0
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	0011      	movs	r1, r2
 8001490:	0018      	movs	r0, r3
 8001492:	f001 fd89 	bl	8002fa8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_ADC_MspInit+0x11c>)
 8001498:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_ADC_MspInit+0x120>)
 800149a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_ADC_MspInit+0x11c>)
 800149e:	2205      	movs	r2, #5
 80014a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_ADC_MspInit+0x11c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_ADC_MspInit+0x11c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_ADC_MspInit+0x11c>)
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_ADC_MspInit+0x11c>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	0092      	lsls	r2, r2, #2
 80014ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_ADC_MspInit+0x11c>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_ADC_MspInit+0x11c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_ADC_MspInit+0x11c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_ADC_MspInit+0x11c>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f001 fac2 	bl	8002a5c <HAL_DMA_Init>
 80014d8:	1e03      	subs	r3, r0, #0
 80014da:	d001      	beq.n	80014e0 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 80014dc:	f7ff ff5a 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_ADC_MspInit+0x11c>)
 80014e4:	651a      	str	r2, [r3, #80]	; 0x50
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_ADC_MspInit+0x11c>)
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	200c      	movs	r0, #12
 80014f2:	f001 fa81 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80014f6:	200c      	movs	r0, #12
 80014f8:	f001 fa93 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b01d      	add	sp, #116	; 0x74
 8001502:	bd90      	pop	{r4, r7, pc}
 8001504:	40012400 	.word	0x40012400
 8001508:	40021000 	.word	0x40021000
 800150c:	20000200 	.word	0x20000200
 8001510:	40020008 	.word	0x40020008

08001514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b097      	sub	sp, #92	; 0x5c
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800151c:	240c      	movs	r4, #12
 800151e:	193b      	adds	r3, r7, r4
 8001520:	0018      	movs	r0, r3
 8001522:	234c      	movs	r3, #76	; 0x4c
 8001524:	001a      	movs	r2, r3
 8001526:	2100      	movs	r1, #0
 8001528:	f005 fd1e 	bl	8006f68 <memset>
  if(htim_base->Instance==TIM1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_TIM_Base_MspInit+0x64>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d11c      	bne.n	8001570 <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001536:	193b      	adds	r3, r7, r4
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	0392      	lsls	r2, r2, #14
 800153c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800153e:	193b      	adds	r3, r7, r4
 8001540:	2200      	movs	r2, #0
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001544:	193b      	adds	r3, r7, r4
 8001546:	0018      	movs	r0, r3
 8001548:	f002 fc6c 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 800154c:	1e03      	subs	r3, r0, #0
 800154e:	d001      	beq.n	8001554 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001550:	f7ff ff20 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_TIM_Base_MspInit+0x68>)
 8001556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_TIM_Base_MspInit+0x68>)
 800155a:	2180      	movs	r1, #128	; 0x80
 800155c:	0109      	lsls	r1, r1, #4
 800155e:	430a      	orrs	r2, r1
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_TIM_Base_MspInit+0x68>)
 8001564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4013      	ands	r3, r2
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b017      	add	sp, #92	; 0x5c
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	40012c00 	.word	0x40012c00
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b09f      	sub	sp, #124	; 0x7c
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	0018      	movs	r0, r3
 800158e:	2314      	movs	r3, #20
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f005 fce8 	bl	8006f68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	2418      	movs	r4, #24
 800159a:	193b      	adds	r3, r7, r4
 800159c:	0018      	movs	r0, r3
 800159e:	234c      	movs	r3, #76	; 0x4c
 80015a0:	001a      	movs	r2, r3
 80015a2:	2100      	movs	r1, #0
 80015a4:	f005 fce0 	bl	8006f68 <memset>
  if(huart->Instance==USART2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a46      	ldr	r2, [pc, #280]	; (80016c8 <HAL_UART_MspInit+0x148>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d147      	bne.n	8001642 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	2202      	movs	r2, #2
 80015b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015b8:	193b      	adds	r3, r7, r4
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	0018      	movs	r0, r3
 80015c2:	f002 fc2f 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015ca:	f7ff fee3 	bl	8001394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_UART_MspInit+0x14c>)
 80015d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015d2:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <HAL_UART_MspInit+0x14c>)
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	0289      	lsls	r1, r1, #10
 80015d8:	430a      	orrs	r2, r1
 80015da:	63da      	str	r2, [r3, #60]	; 0x3c
 80015dc:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_UART_MspInit+0x14c>)
 80015de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	029b      	lsls	r3, r3, #10
 80015e4:	4013      	ands	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b38      	ldr	r3, [pc, #224]	; (80016cc <HAL_UART_MspInit+0x14c>)
 80015ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ee:	4b37      	ldr	r3, [pc, #220]	; (80016cc <HAL_UART_MspInit+0x14c>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	635a      	str	r2, [r3, #52]	; 0x34
 80015f6:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_UART_MspInit+0x14c>)
 80015f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fa:	2201      	movs	r2, #1
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001602:	2164      	movs	r1, #100	; 0x64
 8001604:	187b      	adds	r3, r7, r1
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	187b      	adds	r3, r7, r1
 800160c:	2202      	movs	r2, #2
 800160e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	187b      	adds	r3, r7, r1
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2201      	movs	r2, #1
 8001620:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	187a      	adds	r2, r7, r1
 8001624:	23a0      	movs	r3, #160	; 0xa0
 8001626:	05db      	lsls	r3, r3, #23
 8001628:	0011      	movs	r1, r2
 800162a:	0018      	movs	r0, r3
 800162c:	f001 fcbc 	bl	8002fa8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	201c      	movs	r0, #28
 8001636:	f001 f9df 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800163a:	201c      	movs	r0, #28
 800163c:	f001 f9f1 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8001640:	e03d      	b.n	80016be <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART4)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_UART_MspInit+0x150>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d138      	bne.n	80016be <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART4_CLK_ENABLE();
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_UART_MspInit+0x14c>)
 800164e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_UART_MspInit+0x14c>)
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	0309      	lsls	r1, r1, #12
 8001656:	430a      	orrs	r2, r1
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_UART_MspInit+0x14c>)
 800165c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	031b      	lsls	r3, r3, #12
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_UART_MspInit+0x14c>)
 800166a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_UART_MspInit+0x14c>)
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	635a      	str	r2, [r3, #52]	; 0x34
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_UART_MspInit+0x14c>)
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	2201      	movs	r2, #1
 800167a:	4013      	ands	r3, r2
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001680:	2164      	movs	r1, #100	; 0x64
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2203      	movs	r2, #3
 8001686:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2202      	movs	r2, #2
 800168c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2204      	movs	r2, #4
 800169e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	187a      	adds	r2, r7, r1
 80016a2:	23a0      	movs	r3, #160	; 0xa0
 80016a4:	05db      	lsls	r3, r3, #23
 80016a6:	0011      	movs	r1, r2
 80016a8:	0018      	movs	r0, r3
 80016aa:	f001 fc7d 	bl	8002fa8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	201d      	movs	r0, #29
 80016b4:	f001 f9a0 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 80016b8:	201d      	movs	r0, #29
 80016ba:	f001 f9b2 	bl	8002a22 <HAL_NVIC_EnableIRQ>
}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b01f      	add	sp, #124	; 0x7c
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	40004400 	.word	0x40004400
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40004c00 	.word	0x40004c00

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 f8d8 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	019b      	lsls	r3, r3, #6
 800170a:	0018      	movs	r0, r3
 800170c:	f001 fdf0 	bl	80032f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <DMA1_Channel1_IRQHandler+0x14>)
 800171e:	0018      	movs	r0, r3
 8001720:	f001 fb10 	bl	8002d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	20000200 	.word	0x20000200

08001730 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <ADC1_COMP_IRQHandler+0x14>)
 8001736:	0018      	movs	r0, r3
 8001738:	f000 fd04 	bl	8002144 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	2000019c 	.word	0x2000019c

08001748 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <USART2_LPUART2_IRQHandler+0x14>)
 800174e:	0018      	movs	r0, r3
 8001750:	f003 fa92 	bl	8004c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	200003ac 	.word	0x200003ac

08001760 <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8001766:	0018      	movs	r0, r3
 8001768:	f003 fa86 	bl	8004c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	20000318 	.word	0x20000318

08001778 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001786:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001788:	f7ff fff6 	bl	8001778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <LoopForever+0xe>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	; (80017d0 <LoopForever+0x16>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017b2:	f005 fbb5 	bl	8006f20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017b6:	f7ff fb23 	bl	8000e00 <main>

080017ba <LoopForever>:

LoopForever:
  b LoopForever
 80017ba:	e7fe      	b.n	80017ba <LoopForever>
  ldr   r0, =_estack
 80017bc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80017c8:	08007068 	.word	0x08007068
  ldr r2, =_sbss
 80017cc:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80017d0:	20000440 	.word	0x20000440

080017d4 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <CEC_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_Init+0x3c>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_Init+0x3c>)
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	0049      	lsls	r1, r1, #1
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f2:	2003      	movs	r0, #3
 80017f4:	f000 f810 	bl	8001818 <HAL_InitTick>
 80017f8:	1e03      	subs	r3, r0, #0
 80017fa:	d003      	beq.n	8001804 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	e001      	b.n	8001808 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001804:	f7ff fdcc 	bl	80013a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	781b      	ldrb	r3, [r3, #0]
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001820:	230f      	movs	r3, #15
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <HAL_InitTick+0x88>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d02b      	beq.n	8001888 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_InitTick+0x8c>)
 8001832:	681c      	ldr	r4, [r3, #0]
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_InitTick+0x88>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	0019      	movs	r1, r3
 800183a:	23fa      	movs	r3, #250	; 0xfa
 800183c:	0098      	lsls	r0, r3, #2
 800183e:	f7fe fc69 	bl	8000114 <__udivsi3>
 8001842:	0003      	movs	r3, r0
 8001844:	0019      	movs	r1, r3
 8001846:	0020      	movs	r0, r4
 8001848:	f7fe fc64 	bl	8000114 <__udivsi3>
 800184c:	0003      	movs	r3, r0
 800184e:	0018      	movs	r0, r3
 8001850:	f001 f8f7 	bl	8002a42 <HAL_SYSTICK_Config>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d112      	bne.n	800187e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d80a      	bhi.n	8001874 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	2301      	movs	r3, #1
 8001862:	425b      	negs	r3, r3
 8001864:	2200      	movs	r2, #0
 8001866:	0018      	movs	r0, r3
 8001868:	f001 f8c6 	bl	80029f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_InitTick+0x90>)
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e00d      	b.n	8001890 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001874:	230f      	movs	r3, #15
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e008      	b.n	8001890 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800187e:	230f      	movs	r3, #15
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e003      	b.n	8001890 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001888:	230f      	movs	r3, #15
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001890:	230f      	movs	r3, #15
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	781b      	ldrb	r3, [r3, #0]
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b005      	add	sp, #20
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	20000168 	.word	0x20000168
 80018a4:	20000160 	.word	0x20000160
 80018a8:	20000164 	.word	0x20000164

080018ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_IncTick+0x1c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	001a      	movs	r2, r3
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x20>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	18d2      	adds	r2, r2, r3
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_IncTick+0x20>)
 80018be:	601a      	str	r2, [r3, #0]
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	20000168 	.word	0x20000168
 80018cc:	2000043c 	.word	0x2000043c

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <HAL_GetTick+0x10>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	2000043c 	.word	0x2000043c

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3301      	adds	r3, #1
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	001a      	movs	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	189b      	adds	r3, r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	f7ff ffe0 	bl	80018d0 <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	b004      	add	sp, #16
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	20000168 	.word	0x20000168

0800192c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800193a:	4013      	ands	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b002      	add	sp, #8
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	40010000 	.word	0x40010000
 8001954:	fffff9ff 	.word	0xfffff9ff

08001958 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001968:	401a      	ands	r2, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	601a      	str	r2, [r3, #0]
}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	b002      	add	sp, #8
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	fe3fffff 	.word	0xfe3fffff

08001980 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	23e0      	movs	r3, #224	; 0xe0
 800198e:	045b      	lsls	r3, r3, #17
 8001990:	4013      	ands	r3, r2
}
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}

0800199a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	2104      	movs	r1, #4
 80019ae:	400a      	ands	r2, r1
 80019b0:	2107      	movs	r1, #7
 80019b2:	4091      	lsls	r1, r2
 80019b4:	000a      	movs	r2, r1
 80019b6:	43d2      	mvns	r2, r2
 80019b8:	401a      	ands	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2104      	movs	r1, #4
 80019be:	400b      	ands	r3, r1
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4099      	lsls	r1, r3
 80019c4:	000b      	movs	r3, r1
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b004      	add	sp, #16
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	23c0      	movs	r3, #192	; 0xc0
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d101      	bne.n	80019ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	211f      	movs	r1, #31
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	210f      	movs	r1, #15
 8001a0e:	4091      	lsls	r1, r2
 8001a10:	000a      	movs	r2, r1
 8001a12:	43d2      	mvns	r2, r2
 8001a14:	401a      	ands	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0e9b      	lsrs	r3, r3, #26
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	4019      	ands	r1, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	201f      	movs	r0, #31
 8001a22:	4003      	ands	r3, r0
 8001a24:	4099      	lsls	r1, r3
 8001a26:	000b      	movs	r3, r1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b004      	add	sp, #16
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	035b      	lsls	r3, r3, #13
 8001a48:	0b5b      	lsrs	r3, r3, #13
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	0352      	lsls	r2, r2, #13
 8001a6a:	0b52      	lsrs	r2, r2, #13
 8001a6c:	43d2      	mvns	r2, r2
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4013      	ands	r3, r2
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	0212      	lsls	r2, r2, #8
 8001aa8:	43d2      	mvns	r2, r2
 8001aaa:	401a      	ands	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	4904      	ldr	r1, [pc, #16]	; (8001ac8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b004      	add	sp, #16
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	07ffff00 	.word	0x07ffff00

08001acc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	0552      	lsls	r2, r2, #21
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b002      	add	sp, #8
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	6fffffe8 	.word	0x6fffffe8

08001af4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	055b      	lsls	r3, r3, #21
 8001b04:	401a      	ands	r2, r3
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	055b      	lsls	r3, r3, #21
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <LL_ADC_Enable+0x20>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b002      	add	sp, #8
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	7fffffe8 	.word	0x7fffffe8

08001b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_IsEnabled+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_IsEnabled+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b002      	add	sp, #8
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <LL_ADC_REG_StartConversion+0x20>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	2204      	movs	r2, #4
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b002      	add	sp, #8
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	7fffffe8 	.word	0x7fffffe8

08001b88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2204      	movs	r2, #4
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d101      	bne.n	8001ba0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	231f      	movs	r3, #31
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e1b1      	b.n	8001f36 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10a      	bne.n	8001bf0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff fc07 	bl	80013f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2254      	movs	r2, #84	; 0x54
 8001bec:	2100      	movs	r1, #0
 8001bee:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff ff7d 	bl	8001af4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d115      	bne.n	8001c2a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f7ff ff62 	bl	8001acc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c08:	4bcd      	ldr	r3, [pc, #820]	; (8001f40 <HAL_ADC_Init+0x394>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	49cd      	ldr	r1, [pc, #820]	; (8001f44 <HAL_ADC_Init+0x398>)
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f7fe fa80 	bl	8000114 <__udivsi3>
 8001c14:	0003      	movs	r3, r0
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c1c:	e002      	b.n	8001c24 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f9      	bne.n	8001c1e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff ff60 	bl	8001af4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d10f      	bne.n	8001c58 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	2201      	movs	r2, #1
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c50:	231f      	movs	r3, #31
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7ff ff93 	bl	8001b88 <LL_ADC_REG_IsConversionOngoing>
 8001c62:	0003      	movs	r3, r0
 8001c64:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d000      	beq.n	8001c72 <HAL_ADC_Init+0xc6>
 8001c70:	e154      	b.n	8001f1c <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d000      	beq.n	8001c7a <HAL_ADC_Init+0xce>
 8001c78:	e150      	b.n	8001f1c <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	4ab2      	ldr	r2, [pc, #712]	; (8001f48 <HAL_ADC_Init+0x39c>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	2202      	movs	r2, #2
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff ff56 	bl	8001b40 <LL_ADC_IsEnabled>
 8001c94:	1e03      	subs	r3, r0, #0
 8001c96:	d156      	bne.n	8001d46 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2218      	movs	r2, #24
 8001ca0:	4393      	bics	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	0f9b      	lsrs	r3, r3, #30
 8001cb6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	223c      	movs	r2, #60	; 0x3c
 8001cc8:	5c9b      	ldrb	r3, [r3, r2]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d111      	bne.n	8001cf2 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0f9b      	lsrs	r3, r3, #30
 8001cd4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cda:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001ce0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001ce6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	2201      	movs	r2, #1
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	4a94      	ldr	r2, [pc, #592]	; (8001f4c <HAL_ADC_Init+0x3a0>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	23c0      	movs	r3, #192	; 0xc0
 8001d0e:	061b      	lsls	r3, r3, #24
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d018      	beq.n	8001d46 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	05db      	lsls	r3, r3, #23
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d012      	beq.n	8001d46 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	061b      	lsls	r3, r3, #24
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d00c      	beq.n	8001d46 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001d2c:	4b88      	ldr	r3, [pc, #544]	; (8001f50 <HAL_ADC_Init+0x3a4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a88      	ldr	r2, [pc, #544]	; (8001f54 <HAL_ADC_Init+0x3a8>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	23f0      	movs	r3, #240	; 0xf0
 8001d3c:	039b      	lsls	r3, r3, #14
 8001d3e:	401a      	ands	r2, r3
 8001d40:	4b83      	ldr	r3, [pc, #524]	; (8001f50 <HAL_ADC_Init+0x3a4>)
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7e1b      	ldrb	r3, [r3, #24]
 8001d4a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7e5b      	ldrb	r3, [r3, #25]
 8001d50:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d52:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7e9b      	ldrb	r3, [r3, #26]
 8001d58:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HAL_ADC_Init+0x1be>
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	015b      	lsls	r3, r3, #5
 8001d68:	e000      	b.n	8001d6c <HAL_ADC_Init+0x1c0>
 8001d6a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d6c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d72:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da04      	bge.n	8001d86 <HAL_ADC_Init+0x1da>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	e001      	b.n	8001d8a <HAL_ADC_Init+0x1de>
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8001d8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	212c      	movs	r1, #44	; 0x2c
 8001d90:	5c5b      	ldrb	r3, [r3, r1]
 8001d92:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d94:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	5c9b      	ldrb	r3, [r3, r2]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d115      	bne.n	8001dd2 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7e9b      	ldrb	r3, [r3, #26]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	0252      	lsls	r2, r2, #9
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	e00b      	b.n	8001dd2 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	2201      	movs	r2, #1
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dde:	23e0      	movs	r3, #224	; 0xe0
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001de8:	4313      	orrs	r3, r2
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_ADC_Init+0x3ac>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	4a53      	ldr	r2, [pc, #332]	; (8001f5c <HAL_ADC_Init+0x3b0>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e24:	001a      	movs	r2, r3
 8001e26:	2100      	movs	r1, #0
 8001e28:	f7ff fdb7 	bl	800199a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	494a      	ldr	r1, [pc, #296]	; (8001f60 <HAL_ADC_Init+0x3b4>)
 8001e36:	001a      	movs	r2, r3
 8001e38:	f7ff fdaf 	bl	800199a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2110      	movs	r1, #16
 8001e50:	4249      	negs	r1, r1
 8001e52:	430a      	orrs	r2, r1
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
 8001e56:	e03a      	b.n	8001ece <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	039b      	lsls	r3, r3, #14
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d134      	bne.n	8001ece <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e00c      	b.n	8001e84 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	40da      	lsrs	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	220f      	movs	r2, #15
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b0f      	cmp	r3, #15
 8001e7c:	d006      	beq.n	8001e8c <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	3301      	adds	r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b07      	cmp	r3, #7
 8001e88:	d9ef      	bls.n	8001e6a <HAL_ADC_Init+0x2be>
 8001e8a:	e000      	b.n	8001e8e <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8001e8c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d109      	bne.n	8001ea8 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2110      	movs	r1, #16
 8001ea0:	4249      	negs	r1, r1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ea6:	e012      	b.n	8001ece <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	221c      	movs	r2, #28
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2210      	movs	r2, #16
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_ADC_Init+0x3b8>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d10b      	bne.n	8001ef6 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	2203      	movs	r2, #3
 8001eea:	4393      	bics	r3, r2
 8001eec:	2201      	movs	r2, #1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001ef4:	e01c      	b.n	8001f30 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	2212      	movs	r2, #18
 8001efc:	4393      	bics	r3, r2
 8001efe:	2210      	movs	r2, #16
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001f12:	231f      	movs	r3, #31
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001f1a:	e009      	b.n	8001f30 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	2210      	movs	r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f28:	231f      	movs	r3, #31
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f30:	231f      	movs	r3, #31
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	781b      	ldrb	r3, [r3, #0]
}
 8001f36:	0018      	movs	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b008      	add	sp, #32
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	20000160 	.word	0x20000160
 8001f44:	00030d40 	.word	0x00030d40
 8001f48:	fffffefd 	.word	0xfffffefd
 8001f4c:	1ffffc02 	.word	0x1ffffc02
 8001f50:	40012708 	.word	0x40012708
 8001f54:	ffc3ffff 	.word	0xffc3ffff
 8001f58:	fffe0219 	.word	0xfffe0219
 8001f5c:	dffffc02 	.word	0xdffffc02
 8001f60:	07ffff04 	.word	0x07ffff04
 8001f64:	833fffe7 	.word	0x833fffe7

08001f68 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7ff fe07 	bl	8001b88 <LL_ADC_REG_IsConversionOngoing>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d135      	bne.n	8001fea <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2254      	movs	r2, #84	; 0x54
 8001f82:	5c9b      	ldrb	r3, [r3, r2]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_Start+0x24>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e035      	b.n	8001ff8 <HAL_ADC_Start+0x90>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2254      	movs	r2, #84	; 0x54
 8001f90:	2101      	movs	r1, #1
 8001f92:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f94:	250f      	movs	r5, #15
 8001f96:	197c      	adds	r4, r7, r5
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 fbda 	bl	8002754 <ADC_Enable>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fa4:	197b      	adds	r3, r7, r5
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d119      	bne.n	8001fe0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	4a13      	ldr	r2, [pc, #76]	; (8002000 <HAL_ADC_Start+0x98>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	0052      	lsls	r2, r2, #1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	221c      	movs	r2, #28
 8001fca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2254      	movs	r2, #84	; 0x54
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff fdc3 	bl	8001b64 <LL_ADC_REG_StartConversion>
 8001fde:	e008      	b.n	8001ff2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2254      	movs	r2, #84	; 0x54
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	5499      	strb	r1, [r3, r2]
 8001fe8:	e003      	b.n	8001ff2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fea:	230f      	movs	r3, #15
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2202      	movs	r2, #2
 8001ff0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001ff2:	230f      	movs	r3, #15
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	781b      	ldrb	r3, [r3, #0]
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b004      	add	sp, #16
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	fffff0fe 	.word	0xfffff0fe

08002004 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2b08      	cmp	r3, #8
 8002014:	d102      	bne.n	800201c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002016:	2308      	movs	r3, #8
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e00f      	b.n	800203c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	4013      	ands	r3, r2
 8002026:	d007      	beq.n	8002038 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	2220      	movs	r2, #32
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e072      	b.n	800211e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002038:	2304      	movs	r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800203c:	f7ff fc48 	bl	80018d0 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002044:	e01f      	b.n	8002086 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	d01c      	beq.n	8002086 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800204c:	f7ff fc40 	bl	80018d0 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d302      	bcc.n	8002062 <HAL_ADC_PollForConversion+0x5e>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d111      	bne.n	8002086 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4013      	ands	r3, r2
 800206c:	d10b      	bne.n	8002086 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	2204      	movs	r2, #4
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2254      	movs	r2, #84	; 0x54
 800207e:	2100      	movs	r1, #0
 8002080:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e04b      	b.n	800211e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	d0d9      	beq.n	8002046 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff fc95 	bl	80019d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020aa:	1e03      	subs	r3, r0, #0
 80020ac:	d02e      	beq.n	800210c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7e9b      	ldrb	r3, [r3, #26]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d12a      	bne.n	800210c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2208      	movs	r2, #8
 80020be:	4013      	ands	r3, r2
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d123      	bne.n	800210c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff fd5d 	bl	8001b88 <LL_ADC_REG_IsConversionOngoing>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d110      	bne.n	80020f4 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	210c      	movs	r1, #12
 80020de:	438a      	bics	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a10      	ldr	r2, [pc, #64]	; (8002128 <HAL_ADC_PollForConversion+0x124>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	2201      	movs	r2, #1
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	659a      	str	r2, [r3, #88]	; 0x58
 80020f2:	e00b      	b.n	800210c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	2220      	movs	r2, #32
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	2201      	movs	r2, #1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e1b      	ldrb	r3, [r3, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	220c      	movs	r2, #12
 800211a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	0018      	movs	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	b004      	add	sp, #16
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	fffffefe 	.word	0xfffffefe

0800212c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2202      	movs	r2, #2
 8002164:	4013      	ands	r3, r2
 8002166:	d017      	beq.n	8002198 <HAL_ADC_IRQHandler+0x54>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2202      	movs	r2, #2
 800216c:	4013      	ands	r3, r2
 800216e:	d013      	beq.n	8002198 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	2210      	movs	r2, #16
 8002176:	4013      	ands	r3, r2
 8002178:	d106      	bne.n	8002188 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	0018      	movs	r0, r3
 800218c:	f000 fb78 	bl	8002880 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2202      	movs	r2, #2
 8002196:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2204      	movs	r2, #4
 800219c:	4013      	ands	r3, r2
 800219e:	d003      	beq.n	80021a8 <HAL_ADC_IRQHandler+0x64>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2204      	movs	r2, #4
 80021a4:	4013      	ands	r3, r2
 80021a6:	d107      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2208      	movs	r2, #8
 80021ac:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021ae:	d04d      	beq.n	800224c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2208      	movs	r2, #8
 80021b4:	4013      	ands	r3, r2
 80021b6:	d049      	beq.n	800224c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	2210      	movs	r2, #16
 80021be:	4013      	ands	r3, r2
 80021c0:	d106      	bne.n	80021d0 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff fbfd 	bl	80019d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d02e      	beq.n	800223c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7e9b      	ldrb	r3, [r3, #26]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d12a      	bne.n	800223c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2208      	movs	r2, #8
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d123      	bne.n	800223c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7ff fcc5 	bl	8001b88 <LL_ADC_REG_IsConversionOngoing>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d110      	bne.n	8002224 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	210c      	movs	r1, #12
 800220e:	438a      	bics	r2, r1
 8002210:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	4a56      	ldr	r2, [pc, #344]	; (8002370 <HAL_ADC_IRQHandler+0x22c>)
 8002218:	4013      	ands	r3, r2
 800221a:	2201      	movs	r2, #1
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	659a      	str	r2, [r3, #88]	; 0x58
 8002222:	e00b      	b.n	800223c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	2220      	movs	r2, #32
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	2201      	movs	r2, #1
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f898 	bl	8002374 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	220c      	movs	r2, #12
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	4013      	ands	r3, r2
 8002252:	d012      	beq.n	800227a <HAL_ADC_IRQHandler+0x136>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	4013      	ands	r3, r2
 800225a:	d00e      	beq.n	800227a <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	0252      	lsls	r2, r2, #9
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 f889 	bl	8002384 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4013      	ands	r3, r2
 8002282:	d014      	beq.n	80022ae <HAL_ADC_IRQHandler+0x16a>
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4013      	ands	r3, r2
 800228c:	d00f      	beq.n	80022ae <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	2280      	movs	r2, #128	; 0x80
 8002294:	0292      	lsls	r2, r2, #10
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	0018      	movs	r0, r3
 80022a0:	f000 fade 	bl	8002860 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	0052      	lsls	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4013      	ands	r3, r2
 80022b6:	d014      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x19e>
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4013      	ands	r3, r2
 80022c0:	d00f      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	02d2      	lsls	r2, r2, #11
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 facc 	bl	8002870 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2210      	movs	r2, #16
 80022e6:	4013      	ands	r3, r2
 80022e8:	d02b      	beq.n	8002342 <HAL_ADC_IRQHandler+0x1fe>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2210      	movs	r2, #16
 80022ee:	4013      	ands	r3, r2
 80022f0:	d027      	beq.n	8002342 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80022fa:	2301      	movs	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e008      	b.n	8002312 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0018      	movs	r0, r3
 8002306:	f7ff fbb9 	bl	8001a7c <LL_ADC_REG_GetDMATransfer>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800230e:	2301      	movs	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d110      	bne.n	800233a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	2280      	movs	r2, #128	; 0x80
 800231e:	00d2      	lsls	r2, r2, #3
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	2202      	movs	r2, #2
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	f000 f82d 	bl	8002394 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2210      	movs	r2, #16
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	019b      	lsls	r3, r3, #6
 8002348:	4013      	ands	r3, r2
 800234a:	d00d      	beq.n	8002368 <HAL_ADC_IRQHandler+0x224>
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	019b      	lsls	r3, r3, #6
 8002352:	4013      	ands	r3, r2
 8002354:	d008      	beq.n	8002368 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f000 fa99 	bl	8002890 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2280      	movs	r2, #128	; 0x80
 8002364:	0192      	lsls	r2, r2, #6
 8002366:	601a      	str	r2, [r3, #0]
  }
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b006      	add	sp, #24
 800236e:	bd80      	pop	{r7, pc}
 8002370:	fffffefe 	.word	0xfffffefe

08002374 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ae:	2317      	movs	r3, #23
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2254      	movs	r2, #84	; 0x54
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x24>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e1c0      	b.n	800274a <HAL_ADC_ConfigChannel+0x3a6>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2254      	movs	r2, #84	; 0x54
 80023cc:	2101      	movs	r1, #1
 80023ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7ff fbd7 	bl	8001b88 <LL_ADC_REG_IsConversionOngoing>
 80023da:	1e03      	subs	r3, r0, #0
 80023dc:	d000      	beq.n	80023e0 <HAL_ADC_ConfigChannel+0x3c>
 80023de:	e1a3      	b.n	8002728 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d100      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x46>
 80023e8:	e143      	b.n	8002672 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d004      	beq.n	8002400 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023fa:	4ac1      	ldr	r2, [pc, #772]	; (8002700 <HAL_ADC_ConfigChannel+0x35c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d108      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0019      	movs	r1, r3
 800240a:	0010      	movs	r0, r2
 800240c:	f7ff fb13 	bl	8001a36 <LL_ADC_REG_SetSequencerChAdd>
 8002410:	e0c9      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	211f      	movs	r1, #31
 800241c:	400b      	ands	r3, r1
 800241e:	210f      	movs	r1, #15
 8002420:	4099      	lsls	r1, r3
 8002422:	000b      	movs	r3, r1
 8002424:	43db      	mvns	r3, r3
 8002426:	4013      	ands	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	035b      	lsls	r3, r3, #13
 8002430:	0b5b      	lsrs	r3, r3, #13
 8002432:	d105      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x9c>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0e9b      	lsrs	r3, r3, #26
 800243a:	221f      	movs	r2, #31
 800243c:	4013      	ands	r3, r2
 800243e:	e098      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2201      	movs	r2, #1
 8002446:	4013      	ands	r3, r2
 8002448:	d000      	beq.n	800244c <HAL_ADC_ConfigChannel+0xa8>
 800244a:	e091      	b.n	8002570 <HAL_ADC_ConfigChannel+0x1cc>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2202      	movs	r2, #2
 8002452:	4013      	ands	r3, r2
 8002454:	d000      	beq.n	8002458 <HAL_ADC_ConfigChannel+0xb4>
 8002456:	e089      	b.n	800256c <HAL_ADC_ConfigChannel+0x1c8>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2204      	movs	r2, #4
 800245e:	4013      	ands	r3, r2
 8002460:	d000      	beq.n	8002464 <HAL_ADC_ConfigChannel+0xc0>
 8002462:	e081      	b.n	8002568 <HAL_ADC_ConfigChannel+0x1c4>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2208      	movs	r2, #8
 800246a:	4013      	ands	r3, r2
 800246c:	d000      	beq.n	8002470 <HAL_ADC_ConfigChannel+0xcc>
 800246e:	e079      	b.n	8002564 <HAL_ADC_ConfigChannel+0x1c0>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2210      	movs	r2, #16
 8002476:	4013      	ands	r3, r2
 8002478:	d000      	beq.n	800247c <HAL_ADC_ConfigChannel+0xd8>
 800247a:	e071      	b.n	8002560 <HAL_ADC_ConfigChannel+0x1bc>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2220      	movs	r2, #32
 8002482:	4013      	ands	r3, r2
 8002484:	d000      	beq.n	8002488 <HAL_ADC_ConfigChannel+0xe4>
 8002486:	e069      	b.n	800255c <HAL_ADC_ConfigChannel+0x1b8>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2240      	movs	r2, #64	; 0x40
 800248e:	4013      	ands	r3, r2
 8002490:	d000      	beq.n	8002494 <HAL_ADC_ConfigChannel+0xf0>
 8002492:	e061      	b.n	8002558 <HAL_ADC_ConfigChannel+0x1b4>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	4013      	ands	r3, r2
 800249c:	d000      	beq.n	80024a0 <HAL_ADC_ConfigChannel+0xfc>
 800249e:	e059      	b.n	8002554 <HAL_ADC_ConfigChannel+0x1b0>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4013      	ands	r3, r2
 80024aa:	d151      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1ac>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4013      	ands	r3, r2
 80024b6:	d149      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1a8>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4013      	ands	r3, r2
 80024c2:	d141      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1a4>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	4013      	ands	r3, r2
 80024ce:	d139      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x1a0>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	015b      	lsls	r3, r3, #5
 80024d8:	4013      	ands	r3, r2
 80024da:	d131      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x19c>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	019b      	lsls	r3, r3, #6
 80024e4:	4013      	ands	r3, r2
 80024e6:	d129      	bne.n	800253c <HAL_ADC_ConfigChannel+0x198>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	01db      	lsls	r3, r3, #7
 80024f0:	4013      	ands	r3, r2
 80024f2:	d121      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x194>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	4013      	ands	r3, r2
 80024fe:	d119      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x190>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	025b      	lsls	r3, r3, #9
 8002508:	4013      	ands	r3, r2
 800250a:	d111      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x18c>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	029b      	lsls	r3, r3, #10
 8002514:	4013      	ands	r3, r2
 8002516:	d109      	bne.n	800252c <HAL_ADC_ConfigChannel+0x188>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	02db      	lsls	r3, r3, #11
 8002520:	4013      	ands	r3, r2
 8002522:	d001      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x184>
 8002524:	2312      	movs	r3, #18
 8002526:	e024      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002528:	2300      	movs	r3, #0
 800252a:	e022      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 800252c:	2311      	movs	r3, #17
 800252e:	e020      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002530:	2310      	movs	r3, #16
 8002532:	e01e      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002534:	230f      	movs	r3, #15
 8002536:	e01c      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002538:	230e      	movs	r3, #14
 800253a:	e01a      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 800253c:	230d      	movs	r3, #13
 800253e:	e018      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002540:	230c      	movs	r3, #12
 8002542:	e016      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002544:	230b      	movs	r3, #11
 8002546:	e014      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002548:	230a      	movs	r3, #10
 800254a:	e012      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 800254c:	2309      	movs	r3, #9
 800254e:	e010      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002550:	2308      	movs	r3, #8
 8002552:	e00e      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002554:	2307      	movs	r3, #7
 8002556:	e00c      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002558:	2306      	movs	r3, #6
 800255a:	e00a      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 800255c:	2305      	movs	r3, #5
 800255e:	e008      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002560:	2304      	movs	r3, #4
 8002562:	e006      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002564:	2303      	movs	r3, #3
 8002566:	e004      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002568:	2302      	movs	r3, #2
 800256a:	e002      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_ADC_ConfigChannel+0x1ce>
 8002570:	2300      	movs	r3, #0
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	6852      	ldr	r2, [r2, #4]
 8002576:	201f      	movs	r0, #31
 8002578:	4002      	ands	r2, r0
 800257a:	4093      	lsls	r3, r2
 800257c:	000a      	movs	r2, r1
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	429a      	cmp	r2, r3
 8002592:	d808      	bhi.n	80025a6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	001a      	movs	r2, r3
 80025a2:	f7ff fa28 	bl	80019f6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	001a      	movs	r2, r3
 80025b4:	f7ff fa6e 	bl	8001a94 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db00      	blt.n	80025c2 <HAL_ADC_ConfigChannel+0x21e>
 80025c0:	e0bc      	b.n	800273c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c2:	4b50      	ldr	r3, [pc, #320]	; (8002704 <HAL_ADC_ConfigChannel+0x360>)
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff f9db 	bl	8001980 <LL_ADC_GetCommonPathInternalCh>
 80025ca:	0003      	movs	r3, r0
 80025cc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a4d      	ldr	r2, [pc, #308]	; (8002708 <HAL_ADC_ConfigChannel+0x364>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d122      	bne.n	800261e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025e0:	d11d      	bne.n	800261e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	0412      	lsls	r2, r2, #16
 80025e8:	4313      	orrs	r3, r2
 80025ea:	4a46      	ldr	r2, [pc, #280]	; (8002704 <HAL_ADC_ConfigChannel+0x360>)
 80025ec:	0019      	movs	r1, r3
 80025ee:	0010      	movs	r0, r2
 80025f0:	f7ff f9b2 	bl	8001958 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f4:	4b45      	ldr	r3, [pc, #276]	; (800270c <HAL_ADC_ConfigChannel+0x368>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4945      	ldr	r1, [pc, #276]	; (8002710 <HAL_ADC_ConfigChannel+0x36c>)
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7fd fd8a 	bl	8000114 <__udivsi3>
 8002600:	0003      	movs	r3, r0
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	0013      	movs	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	189b      	adds	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800260e:	e002      	b.n	8002616 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3b01      	subs	r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800261c:	e08e      	b.n	800273c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a3c      	ldr	r2, [pc, #240]	; (8002714 <HAL_ADC_ConfigChannel+0x370>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d10e      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x2a2>
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	045b      	lsls	r3, r3, #17
 800262e:	4013      	ands	r3, r2
 8002630:	d109      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	0452      	lsls	r2, r2, #17
 8002638:	4313      	orrs	r3, r2
 800263a:	4a32      	ldr	r2, [pc, #200]	; (8002704 <HAL_ADC_ConfigChannel+0x360>)
 800263c:	0019      	movs	r1, r3
 800263e:	0010      	movs	r0, r2
 8002640:	f7ff f98a 	bl	8001958 <LL_ADC_SetCommonPathInternalCh>
 8002644:	e07a      	b.n	800273c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a33      	ldr	r2, [pc, #204]	; (8002718 <HAL_ADC_ConfigChannel+0x374>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d000      	beq.n	8002652 <HAL_ADC_ConfigChannel+0x2ae>
 8002650:	e074      	b.n	800273c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	03db      	lsls	r3, r3, #15
 8002658:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800265a:	d000      	beq.n	800265e <HAL_ADC_ConfigChannel+0x2ba>
 800265c:	e06e      	b.n	800273c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	03d2      	lsls	r2, r2, #15
 8002664:	4313      	orrs	r3, r2
 8002666:	4a27      	ldr	r2, [pc, #156]	; (8002704 <HAL_ADC_ConfigChannel+0x360>)
 8002668:	0019      	movs	r1, r3
 800266a:	0010      	movs	r0, r2
 800266c:	f7ff f974 	bl	8001958 <LL_ADC_SetCommonPathInternalCh>
 8002670:	e064      	b.n	800273c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	429a      	cmp	r2, r3
 800267c:	d004      	beq.n	8002688 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002682:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_ADC_ConfigChannel+0x35c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d107      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0019      	movs	r1, r3
 8002692:	0010      	movs	r0, r2
 8002694:	f7ff f9e0 	bl	8001a58 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	da4d      	bge.n	800273c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_ADC_ConfigChannel+0x360>)
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff f96c 	bl	8001980 <LL_ADC_GetCommonPathInternalCh>
 80026a8:	0003      	movs	r3, r0
 80026aa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a15      	ldr	r2, [pc, #84]	; (8002708 <HAL_ADC_ConfigChannel+0x364>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d108      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4a18      	ldr	r2, [pc, #96]	; (800271c <HAL_ADC_ConfigChannel+0x378>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <HAL_ADC_ConfigChannel+0x360>)
 80026be:	0019      	movs	r1, r3
 80026c0:	0010      	movs	r0, r2
 80026c2:	f7ff f949 	bl	8001958 <LL_ADC_SetCommonPathInternalCh>
 80026c6:	e039      	b.n	800273c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a11      	ldr	r2, [pc, #68]	; (8002714 <HAL_ADC_ConfigChannel+0x370>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d108      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_ADC_ConfigChannel+0x37c>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_ADC_ConfigChannel+0x360>)
 80026da:	0019      	movs	r1, r3
 80026dc:	0010      	movs	r0, r2
 80026de:	f7ff f93b 	bl	8001958 <LL_ADC_SetCommonPathInternalCh>
 80026e2:	e02b      	b.n	800273c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <HAL_ADC_ConfigChannel+0x374>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d126      	bne.n	800273c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_ADC_ConfigChannel+0x380>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	4a03      	ldr	r2, [pc, #12]	; (8002704 <HAL_ADC_ConfigChannel+0x360>)
 80026f6:	0019      	movs	r1, r3
 80026f8:	0010      	movs	r0, r2
 80026fa:	f7ff f92d 	bl	8001958 <LL_ADC_SetCommonPathInternalCh>
 80026fe:	e01d      	b.n	800273c <HAL_ADC_ConfigChannel+0x398>
 8002700:	80000004 	.word	0x80000004
 8002704:	40012708 	.word	0x40012708
 8002708:	b0001000 	.word	0xb0001000
 800270c:	20000160 	.word	0x20000160
 8002710:	00030d40 	.word	0x00030d40
 8002714:	b8004000 	.word	0xb8004000
 8002718:	b4002000 	.word	0xb4002000
 800271c:	ff7fffff 	.word	0xff7fffff
 8002720:	feffffff 	.word	0xfeffffff
 8002724:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	2220      	movs	r2, #32
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002734:	2317      	movs	r3, #23
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2254      	movs	r2, #84	; 0x54
 8002740:	2100      	movs	r1, #0
 8002742:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002744:	2317      	movs	r3, #23
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	781b      	ldrb	r3, [r3, #0]
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b006      	add	sp, #24
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)

08002754 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff f9eb 	bl	8001b40 <LL_ADC_IsEnabled>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d000      	beq.n	8002770 <ADC_Enable+0x1c>
 800276e:	e069      	b.n	8002844 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a36      	ldr	r2, [pc, #216]	; (8002850 <ADC_Enable+0xfc>)
 8002778:	4013      	ands	r3, r2
 800277a:	d00d      	beq.n	8002798 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002780:	2210      	movs	r2, #16
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278c:	2201      	movs	r2, #1
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e056      	b.n	8002846 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff f9bd 	bl	8001b1c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027a2:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <ADC_Enable+0x100>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff f8eb 	bl	8001980 <LL_ADC_GetCommonPathInternalCh>
 80027aa:	0002      	movs	r2, r0
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	4013      	ands	r3, r2
 80027b2:	d00f      	beq.n	80027d4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <ADC_Enable+0x104>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4928      	ldr	r1, [pc, #160]	; (800285c <ADC_Enable+0x108>)
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7fd fcaa 	bl	8000114 <__udivsi3>
 80027c0:	0003      	movs	r3, r0
 80027c2:	3301      	adds	r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027c6:	e002      	b.n	80027ce <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f9      	bne.n	80027c8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7e5b      	ldrb	r3, [r3, #25]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d033      	beq.n	8002844 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80027dc:	f7ff f878 	bl	80018d0 <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027e4:	e027      	b.n	8002836 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7ff f9a8 	bl	8001b40 <LL_ADC_IsEnabled>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d104      	bne.n	80027fe <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7ff f98f 	bl	8001b1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027fe:	f7ff f867 	bl	80018d0 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d914      	bls.n	8002836 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
 8002816:	2b01      	cmp	r3, #1
 8002818:	d00d      	beq.n	8002836 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	2210      	movs	r2, #16
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	2201      	movs	r2, #1
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e007      	b.n	8002846 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4013      	ands	r3, r2
 8002840:	2b01      	cmp	r3, #1
 8002842:	d1d0      	bne.n	80027e6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b004      	add	sp, #16
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	80000017 	.word	0x80000017
 8002854:	40012708 	.word	0x40012708
 8002858:	20000160 	.word	0x20000160
 800285c:	00030d40 	.word	0x00030d40

08002860 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}

080028a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	0002      	movs	r2, r0
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	1dfb      	adds	r3, r7, #7
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b7f      	cmp	r3, #127	; 0x7f
 80028b2:	d809      	bhi.n	80028c8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	001a      	movs	r2, r3
 80028ba:	231f      	movs	r3, #31
 80028bc:	401a      	ands	r2, r3
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_EnableIRQ+0x30>)
 80028c0:	2101      	movs	r1, #1
 80028c2:	4091      	lsls	r1, r2
 80028c4:	000a      	movs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	0002      	movs	r2, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	1dfb      	adds	r3, r7, #7
 80028e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b7f      	cmp	r3, #127	; 0x7f
 80028e8:	d828      	bhi.n	800293c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ea:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <__NVIC_SetPriority+0xd4>)
 80028ec:	1dfb      	adds	r3, r7, #7
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	33c0      	adds	r3, #192	; 0xc0
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	589b      	ldr	r3, [r3, r2]
 80028fa:	1dfa      	adds	r2, r7, #7
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	0011      	movs	r1, r2
 8002900:	2203      	movs	r2, #3
 8002902:	400a      	ands	r2, r1
 8002904:	00d2      	lsls	r2, r2, #3
 8002906:	21ff      	movs	r1, #255	; 0xff
 8002908:	4091      	lsls	r1, r2
 800290a:	000a      	movs	r2, r1
 800290c:	43d2      	mvns	r2, r2
 800290e:	401a      	ands	r2, r3
 8002910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	22ff      	movs	r2, #255	; 0xff
 8002918:	401a      	ands	r2, r3
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	0018      	movs	r0, r3
 8002920:	2303      	movs	r3, #3
 8002922:	4003      	ands	r3, r0
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002928:	481f      	ldr	r0, [pc, #124]	; (80029a8 <__NVIC_SetPriority+0xd4>)
 800292a:	1dfb      	adds	r3, r7, #7
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b25b      	sxtb	r3, r3
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	430a      	orrs	r2, r1
 8002934:	33c0      	adds	r3, #192	; 0xc0
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800293a:	e031      	b.n	80029a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800293c:	4a1b      	ldr	r2, [pc, #108]	; (80029ac <__NVIC_SetPriority+0xd8>)
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	0019      	movs	r1, r3
 8002944:	230f      	movs	r3, #15
 8002946:	400b      	ands	r3, r1
 8002948:	3b08      	subs	r3, #8
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3306      	adds	r3, #6
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	18d3      	adds	r3, r2, r3
 8002952:	3304      	adds	r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	1dfa      	adds	r2, r7, #7
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	0011      	movs	r1, r2
 800295c:	2203      	movs	r2, #3
 800295e:	400a      	ands	r2, r1
 8002960:	00d2      	lsls	r2, r2, #3
 8002962:	21ff      	movs	r1, #255	; 0xff
 8002964:	4091      	lsls	r1, r2
 8002966:	000a      	movs	r2, r1
 8002968:	43d2      	mvns	r2, r2
 800296a:	401a      	ands	r2, r3
 800296c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	401a      	ands	r2, r3
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	0018      	movs	r0, r3
 800297c:	2303      	movs	r3, #3
 800297e:	4003      	ands	r3, r0
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002984:	4809      	ldr	r0, [pc, #36]	; (80029ac <__NVIC_SetPriority+0xd8>)
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	001c      	movs	r4, r3
 800298c:	230f      	movs	r3, #15
 800298e:	4023      	ands	r3, r4
 8002990:	3b08      	subs	r3, #8
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	430a      	orrs	r2, r1
 8002996:	3306      	adds	r3, #6
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	18c3      	adds	r3, r0, r3
 800299c:	3304      	adds	r3, #4
 800299e:	601a      	str	r2, [r3, #0]
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b003      	add	sp, #12
 80029a6:	bd90      	pop	{r4, r7, pc}
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1e5a      	subs	r2, r3, #1
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	045b      	lsls	r3, r3, #17
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d301      	bcc.n	80029c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c4:	2301      	movs	r3, #1
 80029c6:	e010      	b.n	80029ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <SysTick_Config+0x44>)
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	3a01      	subs	r2, #1
 80029ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d0:	2301      	movs	r3, #1
 80029d2:	425b      	negs	r3, r3
 80029d4:	2103      	movs	r1, #3
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7ff ff7c 	bl	80028d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x44>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x44>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	210f      	movs	r1, #15
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	1c02      	adds	r2, r0, #0
 8002a08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	0011      	movs	r1, r2
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7ff ff5d 	bl	80028d4 <__NVIC_SetPriority>
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	0002      	movs	r2, r0
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff ff33 	bl	80028a0 <__NVIC_EnableIRQ>
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7ff ffaf 	bl	80029b0 <SysTick_Config>
 8002a52:	0003      	movs	r3, r0
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e091      	b.n	8002b92 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	001a      	movs	r2, r3
 8002a74:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <HAL_DMA_Init+0x140>)
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d810      	bhi.n	8002a9c <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a48      	ldr	r2, [pc, #288]	; (8002ba0 <HAL_DMA_Init+0x144>)
 8002a80:	4694      	mov	ip, r2
 8002a82:	4463      	add	r3, ip
 8002a84:	2114      	movs	r1, #20
 8002a86:	0018      	movs	r0, r3
 8002a88:	f7fd fb44 	bl	8000114 <__udivsi3>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	009a      	lsls	r2, r3, #2
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a43      	ldr	r2, [pc, #268]	; (8002ba4 <HAL_DMA_Init+0x148>)
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
 8002a9a:	e00f      	b.n	8002abc <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a41      	ldr	r2, [pc, #260]	; (8002ba8 <HAL_DMA_Init+0x14c>)
 8002aa2:	4694      	mov	ip, r2
 8002aa4:	4463      	add	r3, ip
 8002aa6:	2114      	movs	r1, #20
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7fd fb33 	bl	8000114 <__udivsi3>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	009a      	lsls	r2, r3, #2
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a3c      	ldr	r2, [pc, #240]	; (8002bac <HAL_DMA_Init+0x150>)
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2225      	movs	r2, #37	; 0x25
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4938      	ldr	r1, [pc, #224]	; (8002bb0 <HAL_DMA_Init+0x154>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 f9dd 	bl	8002ecc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	01db      	lsls	r3, r3, #7
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d102      	bne.n	8002b24 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2c:	217f      	movs	r1, #127	; 0x7f
 8002b2e:	400a      	ands	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b3a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d011      	beq.n	8002b68 <HAL_DMA_Init+0x10c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d80d      	bhi.n	8002b68 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 fa06 	bl	8002f60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	e008      	b.n	8002b7a <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2225      	movs	r2, #37	; 0x25
 8002b84:	2101      	movs	r1, #1
 8002b86:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	; 0x24
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	40020407 	.word	0x40020407
 8002ba0:	bffdfff8 	.word	0xbffdfff8
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	bffdfbf8 	.word	0xbffdfbf8
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	ffff800f 	.word	0xffff800f

08002bb4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e04f      	b.n	8002c66 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2225      	movs	r2, #37	; 0x25
 8002bca:	5c9b      	ldrb	r3, [r3, r2]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d008      	beq.n	8002be4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	2100      	movs	r1, #0
 8002bde:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e040      	b.n	8002c66 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	210e      	movs	r1, #14
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfe:	491c      	ldr	r1, [pc, #112]	; (8002c70 <HAL_DMA_Abort+0xbc>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2101      	movs	r1, #1
 8002c10:	438a      	bics	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	221c      	movs	r2, #28
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	2101      	movs	r1, #1
 8002c22:	4091      	lsls	r1, r2
 8002c24:	000a      	movs	r2, r1
 8002c26:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c30:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00c      	beq.n	8002c54 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	490a      	ldr	r1, [pc, #40]	; (8002c70 <HAL_DMA_Abort+0xbc>)
 8002c46:	400a      	ands	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c52:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2225      	movs	r2, #37	; 0x25
 8002c58:	2101      	movs	r1, #1
 8002c5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	2100      	movs	r1, #0
 8002c62:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	0018      	movs	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b002      	add	sp, #8
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	fffffeff 	.word	0xfffffeff

08002c74 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	210f      	movs	r1, #15
 8002c7e:	187b      	adds	r3, r7, r1
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2225      	movs	r2, #37	; 0x25
 8002c88:	5c9b      	ldrb	r3, [r3, r2]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d006      	beq.n	8002c9e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2204      	movs	r2, #4
 8002c94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e048      	b.n	8002d30 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	210e      	movs	r1, #14
 8002caa:	438a      	bics	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	438a      	bics	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc8:	491d      	ldr	r1, [pc, #116]	; (8002d40 <HAL_DMA_Abort_IT+0xcc>)
 8002cca:	400a      	ands	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	221c      	movs	r2, #28
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4091      	lsls	r1, r2
 8002cde:	000a      	movs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	4910      	ldr	r1, [pc, #64]	; (8002d40 <HAL_DMA_Abort_IT+0xcc>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d0c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2225      	movs	r2, #37	; 0x25
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2224      	movs	r2, #36	; 0x24
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	0010      	movs	r0, r2
 8002d2e:	4798      	blx	r3
    }
  }
  return status;
 8002d30:	230f      	movs	r3, #15
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	781b      	ldrb	r3, [r3, #0]
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	fffffeff 	.word	0xfffffeff

08002d44 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	221c      	movs	r2, #28
 8002d62:	4013      	ands	r3, r2
 8002d64:	2204      	movs	r2, #4
 8002d66:	409a      	lsls	r2, r3
 8002d68:	0013      	movs	r3, r2
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d026      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x7a>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2204      	movs	r2, #4
 8002d74:	4013      	ands	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	4013      	ands	r3, r2
 8002d82:	d107      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2104      	movs	r1, #4
 8002d90:	438a      	bics	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	221c      	movs	r2, #28
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2104      	movs	r1, #4
 8002da2:	4091      	lsls	r1, r2
 8002da4:	000a      	movs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d100      	bne.n	8002db2 <HAL_DMA_IRQHandler+0x6e>
 8002db0:	e080      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	0010      	movs	r0, r2
 8002dba:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002dbc:	e07a      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	221c      	movs	r2, #28
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	0013      	movs	r3, r2
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d03c      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x108>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d038      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2220      	movs	r2, #32
 8002de2:	4013      	ands	r3, r2
 8002de4:	d10b      	bne.n	8002dfe <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	210a      	movs	r1, #10
 8002df2:	438a      	bics	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2225      	movs	r2, #37	; 0x25
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	001a      	movs	r2, r3
 8002e04:	4b2e      	ldr	r3, [pc, #184]	; (8002ec0 <HAL_DMA_IRQHandler+0x17c>)
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d909      	bls.n	8002e1e <HAL_DMA_IRQHandler+0xda>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	221c      	movs	r2, #28
 8002e10:	401a      	ands	r2, r3
 8002e12:	4b2c      	ldr	r3, [pc, #176]	; (8002ec4 <HAL_DMA_IRQHandler+0x180>)
 8002e14:	2102      	movs	r1, #2
 8002e16:	4091      	lsls	r1, r2
 8002e18:	000a      	movs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	e008      	b.n	8002e30 <HAL_DMA_IRQHandler+0xec>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	221c      	movs	r2, #28
 8002e24:	401a      	ands	r2, r3
 8002e26:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <HAL_DMA_IRQHandler+0x184>)
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4091      	lsls	r1, r2
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	; 0x24
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d039      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	0010      	movs	r0, r2
 8002e48:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002e4a:	e033      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	221c      	movs	r2, #28
 8002e52:	4013      	ands	r3, r2
 8002e54:	2208      	movs	r2, #8
 8002e56:	409a      	lsls	r2, r3
 8002e58:	0013      	movs	r3, r2
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d02a      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x172>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2208      	movs	r2, #8
 8002e64:	4013      	ands	r3, r2
 8002e66:	d026      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	210e      	movs	r1, #14
 8002e74:	438a      	bics	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	221c      	movs	r2, #28
 8002e7e:	401a      	ands	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	2101      	movs	r1, #1
 8002e86:	4091      	lsls	r1, r2
 8002e88:	000a      	movs	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2225      	movs	r2, #37	; 0x25
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2224      	movs	r2, #36	; 0x24
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	0010      	movs	r0, r2
 8002eb2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46c0      	nop			; (mov r8, r8)
}
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	40020080 	.word	0x40020080
 8002ec4:	40020400 	.word	0x40020400
 8002ec8:	40020000 	.word	0x40020000

08002ecc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	001a      	movs	r2, r3
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d814      	bhi.n	8002f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002eea:	189a      	adds	r2, r3, r2
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	001a      	movs	r2, r3
 8002ef6:	23ff      	movs	r3, #255	; 0xff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	3b08      	subs	r3, #8
 8002efc:	2114      	movs	r1, #20
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7fd f908 	bl	8000114 <__udivsi3>
 8002f04:	0003      	movs	r3, r0
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e014      	b.n	8002f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002f14:	189a      	adds	r2, r3, r2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	001a      	movs	r2, r3
 8002f20:	23ff      	movs	r3, #255	; 0xff
 8002f22:	4013      	ands	r3, r2
 8002f24:	3b08      	subs	r3, #8
 8002f26:	2114      	movs	r1, #20
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7fd f8f3 	bl	8000114 <__udivsi3>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	3307      	adds	r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002f38:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	221f      	movs	r2, #31
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2201      	movs	r2, #1
 8002f42:	409a      	lsls	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40020407 	.word	0x40020407
 8002f54:	40020800 	.word	0x40020800
 8002f58:	4002081c 	.word	0x4002081c
 8002f5c:	40020880 	.word	0x40020880

08002f60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	227f      	movs	r2, #127	; 0x7f
 8002f6e:	4013      	ands	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002f76:	4694      	mov	ip, r2
 8002f78:	4463      	add	r3, ip
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f86:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2201      	movs	r2, #1
 8002f92:	409a      	lsls	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b004      	add	sp, #16
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	1000823f 	.word	0x1000823f
 8002fa4:	40020940 	.word	0x40020940

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	e14d      	b.n	8003254 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4091      	lsls	r1, r2
 8002fc2:	000a      	movs	r2, r1
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d100      	bne.n	8002fd0 <HAL_GPIO_Init+0x28>
 8002fce:	e13e      	b.n	800324e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d005      	beq.n	8002fe8 <HAL_GPIO_Init+0x40>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d130      	bne.n	800304a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	0013      	movs	r3, r2
 8002ff8:	43da      	mvns	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	409a      	lsls	r2, r3
 800300a:	0013      	movs	r3, r2
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800301e:	2201      	movs	r2, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	409a      	lsls	r2, r3
 8003024:	0013      	movs	r3, r2
 8003026:	43da      	mvns	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	2201      	movs	r2, #1
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
 800303c:	0013      	movs	r3, r2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2203      	movs	r2, #3
 8003050:	4013      	ands	r3, r2
 8003052:	2b03      	cmp	r3, #3
 8003054:	d017      	beq.n	8003086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	409a      	lsls	r2, r3
 8003064:	0013      	movs	r3, r2
 8003066:	43da      	mvns	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	4013      	ands	r3, r2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d123      	bne.n	80030da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	08da      	lsrs	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3208      	adds	r2, #8
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	58d3      	ldr	r3, [r2, r3]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2207      	movs	r2, #7
 80030a4:	4013      	ands	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	409a      	lsls	r2, r3
 80030ac:	0013      	movs	r3, r2
 80030ae:	43da      	mvns	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2107      	movs	r1, #7
 80030be:	400b      	ands	r3, r1
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	409a      	lsls	r2, r3
 80030c4:	0013      	movs	r3, r2
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	0092      	lsls	r2, r2, #2
 80030d6:	6939      	ldr	r1, [r7, #16]
 80030d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	2203      	movs	r2, #3
 80030e6:	409a      	lsls	r2, r3
 80030e8:	0013      	movs	r3, r2
 80030ea:	43da      	mvns	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2203      	movs	r2, #3
 80030f8:	401a      	ands	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	23c0      	movs	r3, #192	; 0xc0
 8003114:	029b      	lsls	r3, r3, #10
 8003116:	4013      	ands	r3, r2
 8003118:	d100      	bne.n	800311c <HAL_GPIO_Init+0x174>
 800311a:	e098      	b.n	800324e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800311c:	4a53      	ldr	r2, [pc, #332]	; (800326c <HAL_GPIO_Init+0x2c4>)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3318      	adds	r3, #24
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	589b      	ldr	r3, [r3, r2]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2203      	movs	r2, #3
 800312e:	4013      	ands	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	220f      	movs	r2, #15
 8003134:	409a      	lsls	r2, r3
 8003136:	0013      	movs	r3, r2
 8003138:	43da      	mvns	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	23a0      	movs	r3, #160	; 0xa0
 8003144:	05db      	lsls	r3, r3, #23
 8003146:	429a      	cmp	r2, r3
 8003148:	d019      	beq.n	800317e <HAL_GPIO_Init+0x1d6>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a48      	ldr	r2, [pc, #288]	; (8003270 <HAL_GPIO_Init+0x2c8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0x1d2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a47      	ldr	r2, [pc, #284]	; (8003274 <HAL_GPIO_Init+0x2cc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00d      	beq.n	8003176 <HAL_GPIO_Init+0x1ce>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a46      	ldr	r2, [pc, #280]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <HAL_GPIO_Init+0x1ca>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a45      	ldr	r2, [pc, #276]	; (800327c <HAL_GPIO_Init+0x2d4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_GPIO_Init+0x1c6>
 800316a:	2304      	movs	r3, #4
 800316c:	e008      	b.n	8003180 <HAL_GPIO_Init+0x1d8>
 800316e:	2305      	movs	r3, #5
 8003170:	e006      	b.n	8003180 <HAL_GPIO_Init+0x1d8>
 8003172:	2303      	movs	r3, #3
 8003174:	e004      	b.n	8003180 <HAL_GPIO_Init+0x1d8>
 8003176:	2302      	movs	r3, #2
 8003178:	e002      	b.n	8003180 <HAL_GPIO_Init+0x1d8>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_GPIO_Init+0x1d8>
 800317e:	2300      	movs	r3, #0
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	2103      	movs	r1, #3
 8003184:	400a      	ands	r2, r1
 8003186:	00d2      	lsls	r2, r2, #3
 8003188:	4093      	lsls	r3, r2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003190:	4936      	ldr	r1, [pc, #216]	; (800326c <HAL_GPIO_Init+0x2c4>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	3318      	adds	r3, #24
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800319e:	4a33      	ldr	r2, [pc, #204]	; (800326c <HAL_GPIO_Init+0x2c4>)
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	58d3      	ldr	r3, [r2, r3]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43da      	mvns	r2, r3
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	025b      	lsls	r3, r3, #9
 80031b8:	4013      	ands	r3, r2
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031c4:	4929      	ldr	r1, [pc, #164]	; (800326c <HAL_GPIO_Init+0x2c4>)
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80031cc:	4a27      	ldr	r2, [pc, #156]	; (800326c <HAL_GPIO_Init+0x2c4>)
 80031ce:	2384      	movs	r3, #132	; 0x84
 80031d0:	58d3      	ldr	r3, [r2, r3]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	029b      	lsls	r3, r3, #10
 80031e6:	4013      	ands	r3, r2
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031f2:	491e      	ldr	r1, [pc, #120]	; (800326c <HAL_GPIO_Init+0x2c4>)
 80031f4:	2284      	movs	r2, #132	; 0x84
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031fa:	4b1c      	ldr	r3, [pc, #112]	; (800326c <HAL_GPIO_Init+0x2c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	43da      	mvns	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	035b      	lsls	r3, r3, #13
 8003212:	4013      	ands	r3, r2
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_GPIO_Init+0x2c4>)
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_GPIO_Init+0x2c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43da      	mvns	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	039b      	lsls	r3, r3, #14
 800323c:	4013      	ands	r3, r2
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <HAL_GPIO_Init+0x2c4>)
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3301      	adds	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	40da      	lsrs	r2, r3
 800325c:	1e13      	subs	r3, r2, #0
 800325e:	d000      	beq.n	8003262 <HAL_GPIO_Init+0x2ba>
 8003260:	e6aa      	b.n	8002fb8 <HAL_GPIO_Init+0x10>
  }
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b006      	add	sp, #24
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021800 	.word	0x40021800
 8003270:	50000400 	.word	0x50000400
 8003274:	50000800 	.word	0x50000800
 8003278:	50000c00 	.word	0x50000c00
 800327c:	50001000 	.word	0x50001000

08003280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	0008      	movs	r0, r1
 800328a:	0011      	movs	r1, r2
 800328c:	1cbb      	adds	r3, r7, #2
 800328e:	1c02      	adds	r2, r0, #0
 8003290:	801a      	strh	r2, [r3, #0]
 8003292:	1c7b      	adds	r3, r7, #1
 8003294:	1c0a      	adds	r2, r1, #0
 8003296:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003298:	1c7b      	adds	r3, r7, #1
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032a0:	1cbb      	adds	r3, r7, #2
 80032a2:	881a      	ldrh	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032a8:	e003      	b.n	80032b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032aa:	1cbb      	adds	r3, r7, #2
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b002      	add	sp, #8
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	000a      	movs	r2, r1
 80032c4:	1cbb      	adds	r3, r7, #2
 80032c6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032ce:	1cbb      	adds	r3, r7, #2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	041a      	lsls	r2, r3, #16
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	1cb9      	adds	r1, r7, #2
 80032de:	8809      	ldrh	r1, [r1, #0]
 80032e0:	400b      	ands	r3, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	619a      	str	r2, [r3, #24]
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	0002      	movs	r2, r0
 80032f8:	1dbb      	adds	r3, r7, #6
 80032fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80032fc:	4b10      	ldr	r3, [pc, #64]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	1dba      	adds	r2, r7, #6
 8003302:	8812      	ldrh	r2, [r2, #0]
 8003304:	4013      	ands	r3, r2
 8003306:	d008      	beq.n	800331a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800330a:	1dba      	adds	r2, r7, #6
 800330c:	8812      	ldrh	r2, [r2, #0]
 800330e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003310:	1dbb      	adds	r3, r7, #6
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	0018      	movs	r0, r3
 8003316:	f000 f815 	bl	8003344 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	1dba      	adds	r2, r7, #6
 8003320:	8812      	ldrh	r2, [r2, #0]
 8003322:	4013      	ands	r3, r2
 8003324:	d008      	beq.n	8003338 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003328:	1dba      	adds	r2, r7, #6
 800332a:	8812      	ldrh	r2, [r2, #0]
 800332c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800332e:	1dbb      	adds	r3, r7, #6
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 f810 	bl	8003358 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021800 	.word	0x40021800

08003344 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	0002      	movs	r2, r0
 800334c:	1dbb      	adds	r3, r7, #6
 800334e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	0002      	movs	r2, r0
 8003360:	1dbb      	adds	r3, r7, #6
 8003362:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800337a:	4013      	ands	r3, r2
 800337c:	0019      	movs	r1, r3
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	430a      	orrs	r2, r1
 8003384:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	429a      	cmp	r2, r3
 800338e:	d11f      	bne.n	80033d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	0013      	movs	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	189b      	adds	r3, r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4912      	ldr	r1, [pc, #72]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800339e:	0018      	movs	r0, r3
 80033a0:	f7fc feb8 	bl	8000114 <__udivsi3>
 80033a4:	0003      	movs	r3, r0
 80033a6:	3301      	adds	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033aa:	e008      	b.n	80033be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e001      	b.n	80033be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e009      	b.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	401a      	ands	r2, r3
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d0ed      	beq.n	80033ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b004      	add	sp, #16
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	40007000 	.word	0x40007000
 80033e0:	fffff9ff 	.word	0xfffff9ff
 80033e4:	20000160 	.word	0x20000160
 80033e8:	000f4240 	.word	0x000f4240

080033ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <LL_RCC_GetAPB1Prescaler+0x14>)
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	23e0      	movs	r3, #224	; 0xe0
 80033f6:	01db      	lsls	r3, r3, #7
 80033f8:	4013      	ands	r3, r2
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000

08003404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d102      	bne.n	8003418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f000 fb56 	bl	8003ac4 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2201      	movs	r2, #1
 800341e:	4013      	ands	r3, r2
 8003420:	d100      	bne.n	8003424 <HAL_RCC_OscConfig+0x20>
 8003422:	e07d      	b.n	8003520 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003424:	4bc3      	ldr	r3, [pc, #780]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2238      	movs	r2, #56	; 0x38
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800342e:	4bc1      	ldr	r3, [pc, #772]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2203      	movs	r2, #3
 8003434:	4013      	ands	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b10      	cmp	r3, #16
 800343c:	d102      	bne.n	8003444 <HAL_RCC_OscConfig+0x40>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d002      	beq.n	800344a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b08      	cmp	r3, #8
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344a:	4bba      	ldr	r3, [pc, #744]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	029b      	lsls	r3, r3, #10
 8003452:	4013      	ands	r3, r2
 8003454:	d063      	beq.n	800351e <HAL_RCC_OscConfig+0x11a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d15f      	bne.n	800351e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f000 fb30 	bl	8003ac4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	025b      	lsls	r3, r3, #9
 800346c:	429a      	cmp	r2, r3
 800346e:	d107      	bne.n	8003480 <HAL_RCC_OscConfig+0x7c>
 8003470:	4bb0      	ldr	r3, [pc, #704]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4baf      	ldr	r3, [pc, #700]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003476:	2180      	movs	r1, #128	; 0x80
 8003478:	0249      	lsls	r1, r1, #9
 800347a:	430a      	orrs	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e020      	b.n	80034c2 <HAL_RCC_OscConfig+0xbe>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	23a0      	movs	r3, #160	; 0xa0
 8003486:	02db      	lsls	r3, r3, #11
 8003488:	429a      	cmp	r2, r3
 800348a:	d10e      	bne.n	80034aa <HAL_RCC_OscConfig+0xa6>
 800348c:	4ba9      	ldr	r3, [pc, #676]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4ba8      	ldr	r3, [pc, #672]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	02c9      	lsls	r1, r1, #11
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	4ba6      	ldr	r3, [pc, #664]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4ba5      	ldr	r3, [pc, #660]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	0249      	lsls	r1, r1, #9
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e00b      	b.n	80034c2 <HAL_RCC_OscConfig+0xbe>
 80034aa:	4ba2      	ldr	r3, [pc, #648]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4ba1      	ldr	r3, [pc, #644]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80034b0:	49a1      	ldr	r1, [pc, #644]	; (8003738 <HAL_RCC_OscConfig+0x334>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	4b9f      	ldr	r3, [pc, #636]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b9e      	ldr	r3, [pc, #632]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80034bc:	499f      	ldr	r1, [pc, #636]	; (800373c <HAL_RCC_OscConfig+0x338>)
 80034be:	400a      	ands	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d014      	beq.n	80034f4 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fe fa01 	bl	80018d0 <HAL_GetTick>
 80034ce:	0003      	movs	r3, r0
 80034d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe f9fc 	bl	80018d0 <HAL_GetTick>
 80034d8:	0002      	movs	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e2ee      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e6:	4b93      	ldr	r3, [pc, #588]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	029b      	lsls	r3, r3, #10
 80034ee:	4013      	ands	r3, r2
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0xd0>
 80034f2:	e015      	b.n	8003520 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe f9ec 	bl	80018d0 <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034fe:	f7fe f9e7 	bl	80018d0 <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	; 0x64
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e2d9      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003510:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	029b      	lsls	r3, r3, #10
 8003518:	4013      	ands	r3, r2
 800351a:	d1f0      	bne.n	80034fe <HAL_RCC_OscConfig+0xfa>
 800351c:	e000      	b.n	8003520 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d100      	bne.n	800352c <HAL_RCC_OscConfig+0x128>
 800352a:	e099      	b.n	8003660 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800352c:	4b81      	ldr	r3, [pc, #516]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2238      	movs	r2, #56	; 0x38
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003536:	4b7f      	ldr	r3, [pc, #508]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2203      	movs	r2, #3
 800353c:	4013      	ands	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b10      	cmp	r3, #16
 8003544:	d102      	bne.n	800354c <HAL_RCC_OscConfig+0x148>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d002      	beq.n	8003552 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d135      	bne.n	80035be <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003552:	4b78      	ldr	r3, [pc, #480]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4013      	ands	r3, r2
 800355c:	d005      	beq.n	800356a <HAL_RCC_OscConfig+0x166>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e2ac      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356a:	4b72      	ldr	r3, [pc, #456]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4a74      	ldr	r2, [pc, #464]	; (8003740 <HAL_RCC_OscConfig+0x33c>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	021a      	lsls	r2, r3, #8
 800357a:	4b6e      	ldr	r3, [pc, #440]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d112      	bne.n	80035ac <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003586:	4b6b      	ldr	r3, [pc, #428]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6e      	ldr	r2, [pc, #440]	; (8003744 <HAL_RCC_OscConfig+0x340>)
 800358c:	4013      	ands	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	4b67      	ldr	r3, [pc, #412]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800359a:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0adb      	lsrs	r3, r3, #11
 80035a0:	2207      	movs	r2, #7
 80035a2:	4013      	ands	r3, r2
 80035a4:	4a68      	ldr	r2, [pc, #416]	; (8003748 <HAL_RCC_OscConfig+0x344>)
 80035a6:	40da      	lsrs	r2, r3
 80035a8:	4b68      	ldr	r3, [pc, #416]	; (800374c <HAL_RCC_OscConfig+0x348>)
 80035aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035ac:	4b68      	ldr	r3, [pc, #416]	; (8003750 <HAL_RCC_OscConfig+0x34c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7fe f931 	bl	8001818 <HAL_InitTick>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d051      	beq.n	800365e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e282      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d030      	beq.n	8003628 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035c6:	4b5b      	ldr	r3, [pc, #364]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5e      	ldr	r2, [pc, #376]	; (8003744 <HAL_RCC_OscConfig+0x340>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80035da:	4b56      	ldr	r3, [pc, #344]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b55      	ldr	r3, [pc, #340]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80035e0:	2180      	movs	r1, #128	; 0x80
 80035e2:	0049      	lsls	r1, r1, #1
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe f972 	bl	80018d0 <HAL_GetTick>
 80035ec:	0003      	movs	r3, r0
 80035ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fe f96d 	bl	80018d0 <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e25f      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003604:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4013      	ands	r3, r2
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b48      	ldr	r3, [pc, #288]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a4a      	ldr	r2, [pc, #296]	; (8003740 <HAL_RCC_OscConfig+0x33c>)
 8003616:	4013      	ands	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	4b44      	ldr	r3, [pc, #272]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	e01b      	b.n	8003660 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003628:	4b42      	ldr	r3, [pc, #264]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800362e:	4949      	ldr	r1, [pc, #292]	; (8003754 <HAL_RCC_OscConfig+0x350>)
 8003630:	400a      	ands	r2, r1
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe f94c 	bl	80018d0 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363e:	f7fe f947 	bl	80018d0 <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e239      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003650:	4b38      	ldr	r3, [pc, #224]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4013      	ands	r3, r2
 800365a:	d1f0      	bne.n	800363e <HAL_RCC_OscConfig+0x23a>
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800365e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2208      	movs	r2, #8
 8003666:	4013      	ands	r3, r2
 8003668:	d047      	beq.n	80036fa <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800366a:	4b32      	ldr	r3, [pc, #200]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2238      	movs	r2, #56	; 0x38
 8003670:	4013      	ands	r3, r2
 8003672:	2b18      	cmp	r3, #24
 8003674:	d10a      	bne.n	800368c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003676:	4b2f      	ldr	r3, [pc, #188]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	2202      	movs	r2, #2
 800367c:	4013      	ands	r3, r2
 800367e:	d03c      	beq.n	80036fa <HAL_RCC_OscConfig+0x2f6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d138      	bne.n	80036fa <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e21b      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d019      	beq.n	80036c8 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003696:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003698:	4b26      	ldr	r3, [pc, #152]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800369a:	2101      	movs	r1, #1
 800369c:	430a      	orrs	r2, r1
 800369e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe f916 	bl	80018d0 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036aa:	f7fe f911 	bl	80018d0 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e203      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80036be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c0:	2202      	movs	r2, #2
 80036c2:	4013      	ands	r3, r2
 80036c4:	d0f1      	beq.n	80036aa <HAL_RCC_OscConfig+0x2a6>
 80036c6:	e018      	b.n	80036fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80036c8:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80036ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80036ce:	2101      	movs	r1, #1
 80036d0:	438a      	bics	r2, r1
 80036d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe f8fc 	bl	80018d0 <HAL_GetTick>
 80036d8:	0003      	movs	r3, r0
 80036da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036de:	f7fe f8f7 	bl	80018d0 <HAL_GetTick>
 80036e2:	0002      	movs	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e1e9      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 80036f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f4:	2202      	movs	r2, #2
 80036f6:	4013      	ands	r3, r2
 80036f8:	d1f1      	bne.n	80036de <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2204      	movs	r2, #4
 8003700:	4013      	ands	r3, r2
 8003702:	d100      	bne.n	8003706 <HAL_RCC_OscConfig+0x302>
 8003704:	e0c6      	b.n	8003894 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003706:	231f      	movs	r3, #31
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2238      	movs	r2, #56	; 0x38
 8003714:	4013      	ands	r3, r2
 8003716:	2b20      	cmp	r3, #32
 8003718:	d11e      	bne.n	8003758 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_OscConfig+0x330>)
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	2202      	movs	r2, #2
 8003720:	4013      	ands	r3, r2
 8003722:	d100      	bne.n	8003726 <HAL_RCC_OscConfig+0x322>
 8003724:	e0b6      	b.n	8003894 <HAL_RCC_OscConfig+0x490>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d000      	beq.n	8003730 <HAL_RCC_OscConfig+0x32c>
 800372e:	e0b1      	b.n	8003894 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e1c7      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
 8003734:	40021000 	.word	0x40021000
 8003738:	fffeffff 	.word	0xfffeffff
 800373c:	fffbffff 	.word	0xfffbffff
 8003740:	ffff80ff 	.word	0xffff80ff
 8003744:	ffffc7ff 	.word	0xffffc7ff
 8003748:	00f42400 	.word	0x00f42400
 800374c:	20000160 	.word	0x20000160
 8003750:	20000164 	.word	0x20000164
 8003754:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003758:	4bb8      	ldr	r3, [pc, #736]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800375a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	055b      	lsls	r3, r3, #21
 8003760:	4013      	ands	r3, r2
 8003762:	d101      	bne.n	8003768 <HAL_RCC_OscConfig+0x364>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x366>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d011      	beq.n	8003792 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	4bb3      	ldr	r3, [pc, #716]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003770:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003772:	4bb2      	ldr	r3, [pc, #712]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	0549      	lsls	r1, r1, #21
 8003778:	430a      	orrs	r2, r1
 800377a:	63da      	str	r2, [r3, #60]	; 0x3c
 800377c:	4baf      	ldr	r3, [pc, #700]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800377e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	055b      	lsls	r3, r3, #21
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800378a:	231f      	movs	r3, #31
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003792:	4bab      	ldr	r3, [pc, #684]	; (8003a40 <HAL_RCC_OscConfig+0x63c>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4013      	ands	r3, r2
 800379c:	d11a      	bne.n	80037d4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800379e:	4ba8      	ldr	r3, [pc, #672]	; (8003a40 <HAL_RCC_OscConfig+0x63c>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4ba7      	ldr	r3, [pc, #668]	; (8003a40 <HAL_RCC_OscConfig+0x63c>)
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	0049      	lsls	r1, r1, #1
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80037ac:	f7fe f890 	bl	80018d0 <HAL_GetTick>
 80037b0:	0003      	movs	r3, r0
 80037b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b6:	f7fe f88b 	bl	80018d0 <HAL_GetTick>
 80037ba:	0002      	movs	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e17d      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c8:	4b9d      	ldr	r3, [pc, #628]	; (8003a40 <HAL_RCC_OscConfig+0x63c>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4013      	ands	r3, r2
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d106      	bne.n	80037ea <HAL_RCC_OscConfig+0x3e6>
 80037dc:	4b97      	ldr	r3, [pc, #604]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80037de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037e0:	4b96      	ldr	r3, [pc, #600]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80037e2:	2101      	movs	r1, #1
 80037e4:	430a      	orrs	r2, r1
 80037e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80037e8:	e01c      	b.n	8003824 <HAL_RCC_OscConfig+0x420>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d10c      	bne.n	800380c <HAL_RCC_OscConfig+0x408>
 80037f2:	4b92      	ldr	r3, [pc, #584]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80037f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037f6:	4b91      	ldr	r3, [pc, #580]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80037f8:	2104      	movs	r1, #4
 80037fa:	430a      	orrs	r2, r1
 80037fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80037fe:	4b8f      	ldr	r3, [pc, #572]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003800:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003802:	4b8e      	ldr	r3, [pc, #568]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003804:	2101      	movs	r1, #1
 8003806:	430a      	orrs	r2, r1
 8003808:	65da      	str	r2, [r3, #92]	; 0x5c
 800380a:	e00b      	b.n	8003824 <HAL_RCC_OscConfig+0x420>
 800380c:	4b8b      	ldr	r3, [pc, #556]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800380e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003810:	4b8a      	ldr	r3, [pc, #552]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003812:	2101      	movs	r1, #1
 8003814:	438a      	bics	r2, r1
 8003816:	65da      	str	r2, [r3, #92]	; 0x5c
 8003818:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800381a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800381c:	4b87      	ldr	r3, [pc, #540]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800381e:	2104      	movs	r1, #4
 8003820:	438a      	bics	r2, r1
 8003822:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d014      	beq.n	8003856 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe f850 	bl	80018d0 <HAL_GetTick>
 8003830:	0003      	movs	r3, r0
 8003832:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003834:	e009      	b.n	800384a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fe f84b 	bl	80018d0 <HAL_GetTick>
 800383a:	0002      	movs	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	4a80      	ldr	r2, [pc, #512]	; (8003a44 <HAL_RCC_OscConfig+0x640>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e13c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384a:	4b7c      	ldr	r3, [pc, #496]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	2202      	movs	r2, #2
 8003850:	4013      	ands	r3, r2
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x432>
 8003854:	e013      	b.n	800387e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fe f83b 	bl	80018d0 <HAL_GetTick>
 800385a:	0003      	movs	r3, r0
 800385c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800385e:	e009      	b.n	8003874 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fe f836 	bl	80018d0 <HAL_GetTick>
 8003864:	0002      	movs	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	4a76      	ldr	r2, [pc, #472]	; (8003a44 <HAL_RCC_OscConfig+0x640>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e127      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003874:	4b71      	ldr	r3, [pc, #452]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	2202      	movs	r2, #2
 800387a:	4013      	ands	r3, r2
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800387e:	231f      	movs	r3, #31
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003888:	4b6c      	ldr	r3, [pc, #432]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800388a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800388c:	4b6b      	ldr	r3, [pc, #428]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800388e:	496e      	ldr	r1, [pc, #440]	; (8003a48 <HAL_RCC_OscConfig+0x644>)
 8003890:	400a      	ands	r2, r1
 8003892:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2220      	movs	r2, #32
 800389a:	4013      	ands	r3, r2
 800389c:	d039      	beq.n	8003912 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01b      	beq.n	80038de <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038a6:	4b65      	ldr	r3, [pc, #404]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80038ac:	2180      	movs	r1, #128	; 0x80
 80038ae:	03c9      	lsls	r1, r1, #15
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fe f80c 	bl	80018d0 <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038be:	f7fe f807 	bl	80018d0 <HAL_GetTick>
 80038c2:	0002      	movs	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e0f9      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80038d0:	4b5a      	ldr	r3, [pc, #360]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	4013      	ands	r3, r2
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x4ba>
 80038dc:	e019      	b.n	8003912 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038de:	4b57      	ldr	r3, [pc, #348]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b56      	ldr	r3, [pc, #344]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80038e4:	4959      	ldr	r1, [pc, #356]	; (8003a4c <HAL_RCC_OscConfig+0x648>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ea:	f7fd fff1 	bl	80018d0 <HAL_GetTick>
 80038ee:	0003      	movs	r3, r0
 80038f0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038f4:	f7fd ffec 	bl	80018d0 <HAL_GetTick>
 80038f8:	0002      	movs	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e0de      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003906:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	4013      	ands	r3, r2
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d100      	bne.n	800391c <HAL_RCC_OscConfig+0x518>
 800391a:	e0d2      	b.n	8003ac2 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800391c:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2238      	movs	r2, #56	; 0x38
 8003922:	4013      	ands	r3, r2
 8003924:	2b10      	cmp	r3, #16
 8003926:	d100      	bne.n	800392a <HAL_RCC_OscConfig+0x526>
 8003928:	e081      	b.n	8003a2e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d156      	bne.n	80039e0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b42      	ldr	r3, [pc, #264]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003938:	4945      	ldr	r1, [pc, #276]	; (8003a50 <HAL_RCC_OscConfig+0x64c>)
 800393a:	400a      	ands	r2, r1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7fd ffc7 	bl	80018d0 <HAL_GetTick>
 8003942:	0003      	movs	r3, r0
 8003944:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fd ffc2 	bl	80018d0 <HAL_GetTick>
 800394c:	0002      	movs	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e0b4      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395a:	4b38      	ldr	r3, [pc, #224]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	049b      	lsls	r3, r3, #18
 8003962:	4013      	ands	r3, r2
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003966:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4a3a      	ldr	r2, [pc, #232]	; (8003a54 <HAL_RCC_OscConfig+0x650>)
 800396c:	4013      	ands	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	431a      	orrs	r2, r3
 8003994:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003996:	430a      	orrs	r2, r1
 8003998:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800399a:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	0449      	lsls	r1, r1, #17
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80039a8:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	0549      	lsls	r1, r1, #21
 80039b2:	430a      	orrs	r2, r1
 80039b4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fd ff8b 	bl	80018d0 <HAL_GetTick>
 80039ba:	0003      	movs	r3, r0
 80039bc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fd ff86 	bl	80018d0 <HAL_GetTick>
 80039c4:	0002      	movs	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e078      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	049b      	lsls	r3, r3, #18
 80039da:	4013      	ands	r3, r2
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x5bc>
 80039de:	e070      	b.n	8003ac2 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e0:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80039e6:	491a      	ldr	r1, [pc, #104]	; (8003a50 <HAL_RCC_OscConfig+0x64c>)
 80039e8:	400a      	ands	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80039f2:	2103      	movs	r1, #3
 80039f4:	438a      	bics	r2, r1
 80039f6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 80039fe:	4916      	ldr	r1, [pc, #88]	; (8003a58 <HAL_RCC_OscConfig+0x654>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fd ff64 	bl	80018d0 <HAL_GetTick>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fd ff5f 	bl	80018d0 <HAL_GetTick>
 8003a12:	0002      	movs	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e051      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_OscConfig+0x638>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	049b      	lsls	r3, r3, #18
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x60a>
 8003a2c:	e049      	b.n	8003ac2 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d112      	bne.n	8003a5c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e044      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40007000 	.word	0x40007000
 8003a44:	00001388 	.word	0x00001388
 8003a48:	efffffff 	.word	0xefffffff
 8003a4c:	ffbfffff 	.word	0xffbfffff
 8003a50:	feffffff 	.word	0xfeffffff
 8003a54:	11c1808c 	.word	0x11c1808c
 8003a58:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x6c8>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2203      	movs	r2, #3
 8003a66:	401a      	ands	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d126      	bne.n	8003abe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2270      	movs	r2, #112	; 0x70
 8003a74:	401a      	ands	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d11f      	bne.n	8003abe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	23fe      	movs	r3, #254	; 0xfe
 8003a82:	01db      	lsls	r3, r3, #7
 8003a84:	401a      	ands	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d116      	bne.n	8003abe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	23f8      	movs	r3, #248	; 0xf8
 8003a94:	039b      	lsls	r3, r3, #14
 8003a96:	401a      	ands	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d10e      	bne.n	8003abe <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	23e0      	movs	r3, #224	; 0xe0
 8003aa4:	051b      	lsls	r3, r3, #20
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	0f5b      	lsrs	r3, r3, #29
 8003ab4:	075a      	lsls	r2, r3, #29
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b008      	add	sp, #32
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000

08003ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0e9      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2207      	movs	r2, #7
 8003aea:	4013      	ands	r3, r2
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d91e      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b73      	ldr	r3, [pc, #460]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2207      	movs	r2, #7
 8003af8:	4393      	bics	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	4b70      	ldr	r3, [pc, #448]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b04:	f7fd fee4 	bl	80018d0 <HAL_GetTick>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b0c:	e009      	b.n	8003b22 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0e:	f7fd fedf 	bl	80018d0 <HAL_GetTick>
 8003b12:	0002      	movs	r2, r0
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	4a6a      	ldr	r2, [pc, #424]	; (8003cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0ca      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b22:	4b67      	ldr	r3, [pc, #412]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2207      	movs	r2, #7
 8003b28:	4013      	ands	r3, r2
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2202      	movs	r2, #2
 8003b36:	4013      	ands	r3, r2
 8003b38:	d015      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	4013      	ands	r3, r2
 8003b42:	d006      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b44:	4b60      	ldr	r3, [pc, #384]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	4b5f      	ldr	r3, [pc, #380]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b4a:	21e0      	movs	r1, #224	; 0xe0
 8003b4c:	01c9      	lsls	r1, r1, #7
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b52:	4b5d      	ldr	r3, [pc, #372]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	4a5d      	ldr	r2, [pc, #372]	; (8003ccc <HAL_RCC_ClockConfig+0x1fc>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d057      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	029b      	lsls	r3, r3, #10
 8003b80:	4013      	ands	r3, r2
 8003b82:	d12b      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e097      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b90:	4b4d      	ldr	r3, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	049b      	lsls	r3, r3, #18
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d11f      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e08b      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba8:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d113      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e07f      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bc0:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d108      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e074      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bce:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e06d      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bdc:	4b3a      	ldr	r3, [pc, #232]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2207      	movs	r2, #7
 8003be2:	4393      	bics	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fe6e 	bl	80018d0 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf8:	e009      	b.n	8003c0e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfa:	f7fd fe69 	bl	80018d0 <HAL_GetTick>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	4a2f      	ldr	r2, [pc, #188]	; (8003cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e054      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	4b2e      	ldr	r3, [pc, #184]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2238      	movs	r2, #56	; 0x38
 8003c14:	401a      	ands	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d1ec      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2207      	movs	r2, #7
 8003c26:	4013      	ands	r3, r2
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d21e      	bcs.n	8003c6c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2207      	movs	r2, #7
 8003c34:	4393      	bics	r3, r2
 8003c36:	0019      	movs	r1, r3
 8003c38:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c40:	f7fd fe46 	bl	80018d0 <HAL_GetTick>
 8003c44:	0003      	movs	r3, r0
 8003c46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c48:	e009      	b.n	8003c5e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4a:	f7fd fe41 	bl	80018d0 <HAL_GetTick>
 8003c4e:	0002      	movs	r2, r0
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	4a1b      	ldr	r2, [pc, #108]	; (8003cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e02c      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c5e:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2207      	movs	r2, #7
 8003c64:	4013      	ands	r3, r2
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d1ee      	bne.n	8003c4a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2204      	movs	r2, #4
 8003c72:	4013      	ands	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_RCC_ClockConfig+0x200>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003c86:	430a      	orrs	r2, r1
 8003c88:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c8a:	f000 f829 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003c8e:	0001      	movs	r1, r0
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	220f      	movs	r2, #15
 8003c98:	401a      	ands	r2, r3
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <HAL_RCC_ClockConfig+0x204>)
 8003c9c:	0092      	lsls	r2, r2, #2
 8003c9e:	58d3      	ldr	r3, [r2, r3]
 8003ca0:	221f      	movs	r2, #31
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	000a      	movs	r2, r1
 8003ca6:	40da      	lsrs	r2, r3
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_ClockConfig+0x208>)
 8003caa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCC_ClockConfig+0x20c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7fd fdb1 	bl	8001818 <HAL_InitTick>
 8003cb6:	0003      	movs	r3, r0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b004      	add	sp, #16
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	00001388 	.word	0x00001388
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	fffff0ff 	.word	0xfffff0ff
 8003cd0:	ffff8fff 	.word	0xffff8fff
 8003cd4:	08006fd0 	.word	0x08006fd0
 8003cd8:	20000160 	.word	0x20000160
 8003cdc:	20000164 	.word	0x20000164

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ce6:	4b3c      	ldr	r3, [pc, #240]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2238      	movs	r2, #56	; 0x38
 8003cec:	4013      	ands	r3, r2
 8003cee:	d10f      	bne.n	8003d10 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003cf0:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	0adb      	lsrs	r3, r3, #11
 8003cf6:	2207      	movs	r2, #7
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	0013      	movs	r3, r2
 8003d00:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	4835      	ldr	r0, [pc, #212]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d06:	f7fc fa05 	bl	8000114 <__udivsi3>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	e05d      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d10:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2238      	movs	r2, #56	; 0x38
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d102      	bne.n	8003d22 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d1c:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	e054      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d22:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2238      	movs	r2, #56	; 0x38
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d138      	bne.n	8003da0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2203      	movs	r2, #3
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d38:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	2207      	movs	r2, #7
 8003d40:	4013      	ands	r3, r2
 8003d42:	3301      	adds	r3, #1
 8003d44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d10d      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	4824      	ldr	r0, [pc, #144]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d50:	f7fc f9e0 	bl	8000114 <__udivsi3>
 8003d54:	0003      	movs	r3, r0
 8003d56:	0019      	movs	r1, r3
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	227f      	movs	r2, #127	; 0x7f
 8003d60:	4013      	ands	r3, r2
 8003d62:	434b      	muls	r3, r1
 8003d64:	617b      	str	r3, [r7, #20]
        break;
 8003d66:	e00d      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	481c      	ldr	r0, [pc, #112]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d6c:	f7fc f9d2 	bl	8000114 <__udivsi3>
 8003d70:	0003      	movs	r3, r0
 8003d72:	0019      	movs	r1, r3
 8003d74:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	227f      	movs	r2, #127	; 0x7f
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	434b      	muls	r3, r1
 8003d80:	617b      	str	r3, [r7, #20]
        break;
 8003d82:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d84:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	0f5b      	lsrs	r3, r3, #29
 8003d8a:	2207      	movs	r2, #7
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	3301      	adds	r3, #1
 8003d90:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	6978      	ldr	r0, [r7, #20]
 8003d96:	f7fc f9bd 	bl	8000114 <__udivsi3>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e015      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2238      	movs	r2, #56	; 0x38
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d103      	bne.n	8003db4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	e00b      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2238      	movs	r2, #56	; 0x38
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b18      	cmp	r3, #24
 8003dbe:	d103      	bne.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003dc0:	23fa      	movs	r3, #250	; 0xfa
 8003dc2:	01db      	lsls	r3, r3, #7
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	e001      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003dcc:	693b      	ldr	r3, [r7, #16]
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b006      	add	sp, #24
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	00f42400 	.word	0x00f42400
 8003de0:	007a1200 	.word	0x007a1200

08003de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de8:	4b02      	ldr	r3, [pc, #8]	; (8003df4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dea:	681b      	ldr	r3, [r3, #0]
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	20000160 	.word	0x20000160

08003df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df8:	b5b0      	push	{r4, r5, r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003dfc:	f7ff fff2 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003e00:	0004      	movs	r4, r0
 8003e02:	f7ff faf3 	bl	80033ec <LL_RCC_GetAPB1Prescaler>
 8003e06:	0003      	movs	r3, r0
 8003e08:	0b1a      	lsrs	r2, r3, #12
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e0c:	0092      	lsls	r2, r2, #2
 8003e0e:	58d3      	ldr	r3, [r2, r3]
 8003e10:	221f      	movs	r2, #31
 8003e12:	4013      	ands	r3, r2
 8003e14:	40dc      	lsrs	r4, r3
 8003e16:	0023      	movs	r3, r4
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	08007010 	.word	0x08007010

08003e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003e2c:	2313      	movs	r3, #19
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e34:	2312      	movs	r3, #18
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	029b      	lsls	r3, r3, #10
 8003e44:	4013      	ands	r3, r2
 8003e46:	d100      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003e48:	e0ad      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4a:	2011      	movs	r0, #17
 8003e4c:	183b      	adds	r3, r7, r0
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	055b      	lsls	r3, r3, #21
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d110      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	4b44      	ldr	r3, [pc, #272]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e62:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	0549      	lsls	r1, r1, #21
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e6c:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	055b      	lsls	r3, r3, #21
 8003e74:	4013      	ands	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7a:	183b      	adds	r3, r7, r0
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e80:	4b3c      	ldr	r3, [pc, #240]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003e86:	2180      	movs	r1, #128	; 0x80
 8003e88:	0049      	lsls	r1, r1, #1
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e8e:	f7fd fd1f 	bl	80018d0 <HAL_GetTick>
 8003e92:	0003      	movs	r3, r0
 8003e94:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fd fd1a 	bl	80018d0 <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d904      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003ea6:	2313      	movs	r3, #19
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	2203      	movs	r2, #3
 8003eac:	701a      	strb	r2, [r3, #0]
        break;
 8003eae:	e005      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eb0:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d0ed      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003ebc:	2313      	movs	r3, #19
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d15e      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eca:	23c0      	movs	r3, #192	; 0xc0
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4013      	ands	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d019      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d014      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ee2:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eec:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003eee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ef0:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ef2:	2180      	movs	r1, #128	; 0x80
 8003ef4:	0249      	lsls	r1, r1, #9
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003efc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f00:	491e      	ldr	r1, [pc, #120]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003f02:	400a      	ands	r2, r1
 8003f04:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4013      	ands	r3, r2
 8003f12:	d016      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fcdc 	bl	80018d0 <HAL_GetTick>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1c:	e00c      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fd fcd7 	bl	80018d0 <HAL_GetTick>
 8003f22:	0002      	movs	r2, r0
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d904      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003f2e:	2313      	movs	r3, #19
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2203      	movs	r2, #3
 8003f34:	701a      	strb	r2, [r3, #0]
            break;
 8003f36:	e004      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d0ed      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003f42:	2313      	movs	r3, #19
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f60:	e016      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f62:	2312      	movs	r3, #18
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	2213      	movs	r2, #19
 8003f68:	18ba      	adds	r2, r7, r2
 8003f6a:	7812      	ldrb	r2, [r2, #0]
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e00f      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40007000 	.word	0x40007000
 8003f78:	fffffcff 	.word	0xfffffcff
 8003f7c:	fffeffff 	.word	0xfffeffff
 8003f80:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	2312      	movs	r3, #18
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	2213      	movs	r2, #19
 8003f8a:	18ba      	adds	r2, r7, r2
 8003f8c:	7812      	ldrb	r2, [r2, #0]
 8003f8e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f90:	2311      	movs	r3, #17
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d105      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9a:	4bb6      	ldr	r3, [pc, #728]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f9e:	4bb5      	ldr	r3, [pc, #724]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fa0:	49b5      	ldr	r1, [pc, #724]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2201      	movs	r2, #1
 8003fac:	4013      	ands	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb0:	4bb0      	ldr	r3, [pc, #704]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	4393      	bics	r3, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4bad      	ldr	r3, [pc, #692]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fce:	4ba9      	ldr	r3, [pc, #676]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	4393      	bics	r3, r2
 8003fd6:	0019      	movs	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	4ba5      	ldr	r3, [pc, #660]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d009      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fec:	4ba1      	ldr	r3, [pc, #644]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	2230      	movs	r2, #48	; 0x30
 8003ff2:	4393      	bics	r3, r2
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	4b9e      	ldr	r3, [pc, #632]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2210      	movs	r2, #16
 8004006:	4013      	ands	r3, r2
 8004008:	d009      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800400a:	4b9a      	ldr	r3, [pc, #616]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	4a9b      	ldr	r2, [pc, #620]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004010:	4013      	ands	r3, r2
 8004012:	0019      	movs	r1, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	4b96      	ldr	r3, [pc, #600]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800401a:	430a      	orrs	r2, r1
 800401c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	015b      	lsls	r3, r3, #5
 8004026:	4013      	ands	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800402a:	4b92      	ldr	r3, [pc, #584]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	4a94      	ldr	r2, [pc, #592]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004030:	4013      	ands	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	4b8e      	ldr	r3, [pc, #568]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800403a:	430a      	orrs	r2, r1
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4013      	ands	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800404a:	4b8a      	ldr	r3, [pc, #552]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800404c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404e:	4a8d      	ldr	r2, [pc, #564]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004050:	4013      	ands	r3, r2
 8004052:	0019      	movs	r1, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004058:	4b86      	ldr	r3, [pc, #536]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800405a:	430a      	orrs	r2, r1
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4013      	ands	r3, r2
 8004068:	d009      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800406a:	4b82      	ldr	r3, [pc, #520]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	4a86      	ldr	r2, [pc, #536]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004070:	4013      	ands	r3, r2
 8004072:	0019      	movs	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4b7e      	ldr	r3, [pc, #504]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800407a:	430a      	orrs	r2, r1
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2220      	movs	r2, #32
 8004084:	4013      	ands	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004088:	4b7a      	ldr	r3, [pc, #488]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	4a7f      	ldr	r2, [pc, #508]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800408e:	4013      	ands	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	4b77      	ldr	r3, [pc, #476]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004098:	430a      	orrs	r2, r1
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2240      	movs	r2, #64	; 0x40
 80040a2:	4013      	ands	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040a6:	4b73      	ldr	r3, [pc, #460]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	4a79      	ldr	r2, [pc, #484]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	4b6f      	ldr	r3, [pc, #444]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040b6:	430a      	orrs	r2, r1
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	01db      	lsls	r3, r3, #7
 80040c2:	4013      	ands	r3, r2
 80040c4:	d015      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c6:	4b6b      	ldr	r3, [pc, #428]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	0899      	lsrs	r1, r3, #2
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d2:	4b68      	ldr	r3, [pc, #416]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040d4:	430a      	orrs	r2, r1
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	05db      	lsls	r3, r3, #23
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d106      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040e4:	4b63      	ldr	r3, [pc, #396]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	4b62      	ldr	r3, [pc, #392]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040ea:	2180      	movs	r1, #128	; 0x80
 80040ec:	0249      	lsls	r1, r1, #9
 80040ee:	430a      	orrs	r2, r1
 80040f0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	4013      	ands	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040fe:	4b5d      	ldr	r3, [pc, #372]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	2240      	movs	r2, #64	; 0x40
 8004104:	4393      	bics	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410c:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800410e:	430a      	orrs	r2, r1
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	039b      	lsls	r3, r3, #14
 800411a:	4013      	ands	r3, r2
 800411c:	d016      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800411e:	4b55      	ldr	r3, [pc, #340]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	4a5c      	ldr	r2, [pc, #368]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004124:	4013      	ands	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412c:	4b51      	ldr	r3, [pc, #324]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800412e:	430a      	orrs	r2, r1
 8004130:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	03db      	lsls	r3, r3, #15
 800413a:	429a      	cmp	r2, r3
 800413c:	d106      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800413e:	4b4d      	ldr	r3, [pc, #308]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	4b4c      	ldr	r3, [pc, #304]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004144:	2180      	movs	r1, #128	; 0x80
 8004146:	0449      	lsls	r1, r1, #17
 8004148:	430a      	orrs	r2, r1
 800414a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	03db      	lsls	r3, r3, #15
 8004154:	4013      	ands	r3, r2
 8004156:	d016      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004158:	4b46      	ldr	r3, [pc, #280]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	4a4e      	ldr	r2, [pc, #312]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800415e:	4013      	ands	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004166:	4b43      	ldr	r3, [pc, #268]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004168:	430a      	orrs	r2, r1
 800416a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	045b      	lsls	r3, r3, #17
 8004174:	429a      	cmp	r2, r3
 8004176:	d106      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004178:	4b3e      	ldr	r3, [pc, #248]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	0449      	lsls	r1, r1, #17
 8004182:	430a      	orrs	r2, r1
 8004184:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4013      	ands	r3, r2
 8004190:	d014      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	2203      	movs	r2, #3
 8004198:	4393      	bics	r3, r2
 800419a:	0019      	movs	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1a      	ldr	r2, [r3, #32]
 80041a0:	4b34      	ldr	r3, [pc, #208]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041a2:	430a      	orrs	r2, r1
 80041a4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d106      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	4b30      	ldr	r3, [pc, #192]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041b4:	2180      	movs	r1, #128	; 0x80
 80041b6:	0249      	lsls	r1, r1, #9
 80041b8:	430a      	orrs	r2, r1
 80041ba:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	019b      	lsls	r3, r3, #6
 80041c4:	4013      	ands	r3, r2
 80041c6:	d014      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80041c8:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	220c      	movs	r2, #12
 80041ce:	4393      	bics	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d6:	4b27      	ldr	r3, [pc, #156]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041d8:	430a      	orrs	r2, r1
 80041da:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d106      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	4b22      	ldr	r3, [pc, #136]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	0249      	lsls	r1, r1, #9
 80041ee:	430a      	orrs	r2, r1
 80041f0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	045b      	lsls	r3, r3, #17
 80041fa:	4013      	ands	r3, r2
 80041fc:	d016      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041fe:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	4a22      	ldr	r2, [pc, #136]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004204:	4013      	ands	r3, r2
 8004206:	0019      	movs	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800420e:	430a      	orrs	r2, r1
 8004210:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	019b      	lsls	r3, r3, #6
 800421a:	429a      	cmp	r2, r3
 800421c:	d106      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004224:	2180      	movs	r1, #128	; 0x80
 8004226:	0449      	lsls	r1, r1, #17
 8004228:	430a      	orrs	r2, r1
 800422a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	049b      	lsls	r3, r3, #18
 8004234:	4013      	ands	r3, r2
 8004236:	d016      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	4a10      	ldr	r2, [pc, #64]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800423e:	4013      	ands	r3, r2
 8004240:	0019      	movs	r1, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004248:	430a      	orrs	r2, r1
 800424a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	429a      	cmp	r2, r3
 8004256:	d106      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800425e:	2180      	movs	r1, #128	; 0x80
 8004260:	0449      	lsls	r1, r1, #17
 8004262:	430a      	orrs	r2, r1
 8004264:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004266:	2312      	movs	r3, #18
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	781b      	ldrb	r3, [r3, #0]
}
 800426c:	0018      	movs	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	b006      	add	sp, #24
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40021000 	.word	0x40021000
 8004278:	efffffff 	.word	0xefffffff
 800427c:	fffff3ff 	.word	0xfffff3ff
 8004280:	fffffcff 	.word	0xfffffcff
 8004284:	fff3ffff 	.word	0xfff3ffff
 8004288:	ffcfffff 	.word	0xffcfffff
 800428c:	ffffcfff 	.word	0xffffcfff
 8004290:	ffff3fff 	.word	0xffff3fff
 8004294:	ffbfffff 	.word	0xffbfffff
 8004298:	feffffff 	.word	0xfeffffff

0800429c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e04a      	b.n	8004344 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	223d      	movs	r2, #61	; 0x3d
 80042b2:	5c9b      	ldrb	r3, [r3, r2]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d107      	bne.n	80042ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	223c      	movs	r2, #60	; 0x3c
 80042be:	2100      	movs	r1, #0
 80042c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7fd f925 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	223d      	movs	r2, #61	; 0x3d
 80042ce:	2102      	movs	r1, #2
 80042d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	0019      	movs	r1, r3
 80042dc:	0010      	movs	r0, r2
 80042de:	f000 f901 	bl	80044e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2248      	movs	r2, #72	; 0x48
 80042e6:	2101      	movs	r1, #1
 80042e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	223e      	movs	r2, #62	; 0x3e
 80042ee:	2101      	movs	r1, #1
 80042f0:	5499      	strb	r1, [r3, r2]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	223f      	movs	r2, #63	; 0x3f
 80042f6:	2101      	movs	r1, #1
 80042f8:	5499      	strb	r1, [r3, r2]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2240      	movs	r2, #64	; 0x40
 80042fe:	2101      	movs	r1, #1
 8004300:	5499      	strb	r1, [r3, r2]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2241      	movs	r2, #65	; 0x41
 8004306:	2101      	movs	r1, #1
 8004308:	5499      	strb	r1, [r3, r2]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2242      	movs	r2, #66	; 0x42
 800430e:	2101      	movs	r1, #1
 8004310:	5499      	strb	r1, [r3, r2]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2243      	movs	r2, #67	; 0x43
 8004316:	2101      	movs	r1, #1
 8004318:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2244      	movs	r2, #68	; 0x44
 800431e:	2101      	movs	r1, #1
 8004320:	5499      	strb	r1, [r3, r2]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2245      	movs	r2, #69	; 0x45
 8004326:	2101      	movs	r1, #1
 8004328:	5499      	strb	r1, [r3, r2]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2246      	movs	r2, #70	; 0x46
 800432e:	2101      	movs	r1, #1
 8004330:	5499      	strb	r1, [r3, r2]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2247      	movs	r2, #71	; 0x47
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	223d      	movs	r2, #61	; 0x3d
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	223c      	movs	r2, #60	; 0x3c
 800435a:	5c9b      	ldrb	r3, [r3, r2]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_TIM_ConfigClockSource+0x18>
 8004360:	2302      	movs	r3, #2
 8004362:	e0b7      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x188>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	223c      	movs	r2, #60	; 0x3c
 8004368:	2101      	movs	r1, #1
 800436a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	223d      	movs	r2, #61	; 0x3d
 8004370:	2102      	movs	r1, #2
 8004372:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a57      	ldr	r2, [pc, #348]	; (80044dc <HAL_TIM_ConfigClockSource+0x190>)
 8004380:	4013      	ands	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <HAL_TIM_ConfigClockSource+0x194>)
 8004388:	4013      	ands	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	0192      	lsls	r2, r2, #6
 800439c:	4293      	cmp	r3, r2
 800439e:	d040      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0xd6>
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	0192      	lsls	r2, r2, #6
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d900      	bls.n	80043aa <HAL_TIM_ConfigClockSource+0x5e>
 80043a8:	e088      	b.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043aa:	2280      	movs	r2, #128	; 0x80
 80043ac:	0152      	lsls	r2, r2, #5
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d100      	bne.n	80043b4 <HAL_TIM_ConfigClockSource+0x68>
 80043b2:	e085      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x174>
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	0152      	lsls	r2, r2, #5
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d900      	bls.n	80043be <HAL_TIM_ConfigClockSource+0x72>
 80043bc:	e07e      	b.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043be:	2b70      	cmp	r3, #112	; 0x70
 80043c0:	d018      	beq.n	80043f4 <HAL_TIM_ConfigClockSource+0xa8>
 80043c2:	d900      	bls.n	80043c6 <HAL_TIM_ConfigClockSource+0x7a>
 80043c4:	e07a      	b.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043c6:	2b60      	cmp	r3, #96	; 0x60
 80043c8:	d04f      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x11e>
 80043ca:	d900      	bls.n	80043ce <HAL_TIM_ConfigClockSource+0x82>
 80043cc:	e076      	b.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043ce:	2b50      	cmp	r3, #80	; 0x50
 80043d0:	d03b      	beq.n	800444a <HAL_TIM_ConfigClockSource+0xfe>
 80043d2:	d900      	bls.n	80043d6 <HAL_TIM_ConfigClockSource+0x8a>
 80043d4:	e072      	b.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d057      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x13e>
 80043da:	d900      	bls.n	80043de <HAL_TIM_ConfigClockSource+0x92>
 80043dc:	e06e      	b.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043de:	2b30      	cmp	r3, #48	; 0x30
 80043e0:	d063      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15e>
 80043e2:	d86b      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d060      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15e>
 80043e8:	d868      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d05d      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15e>
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d05b      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043f2:	e063      	b.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	6899      	ldr	r1, [r3, #8]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f000 f974 	bl	80046f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2277      	movs	r2, #119	; 0x77
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]
      break;
 8004420:	e04f      	b.n	80044c2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6899      	ldr	r1, [r3, #8]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f000 f95d 	bl	80046f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2180      	movs	r1, #128	; 0x80
 8004442:	01c9      	lsls	r1, r1, #7
 8004444:	430a      	orrs	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
      break;
 8004448:	e03b      	b.n	80044c2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	001a      	movs	r2, r3
 8004458:	f000 f8ce 	bl	80045f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2150      	movs	r1, #80	; 0x50
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f928 	bl	80046b8 <TIM_ITRx_SetConfig>
      break;
 8004468:	e02b      	b.n	80044c2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6859      	ldr	r1, [r3, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	001a      	movs	r2, r3
 8004478:	f000 f8ec 	bl	8004654 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2160      	movs	r1, #96	; 0x60
 8004482:	0018      	movs	r0, r3
 8004484:	f000 f918 	bl	80046b8 <TIM_ITRx_SetConfig>
      break;
 8004488:	e01b      	b.n	80044c2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6859      	ldr	r1, [r3, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	001a      	movs	r2, r3
 8004498:	f000 f8ae 	bl	80045f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2140      	movs	r1, #64	; 0x40
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 f908 	bl	80046b8 <TIM_ITRx_SetConfig>
      break;
 80044a8:	e00b      	b.n	80044c2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	0019      	movs	r1, r3
 80044b4:	0010      	movs	r0, r2
 80044b6:	f000 f8ff 	bl	80046b8 <TIM_ITRx_SetConfig>
        break;
 80044ba:	e002      	b.n	80044c2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80044bc:	46c0      	nop			; (mov r8, r8)
 80044be:	e000      	b.n	80044c2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80044c0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	223d      	movs	r2, #61	; 0x3d
 80044c6:	2101      	movs	r1, #1
 80044c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	223c      	movs	r2, #60	; 0x3c
 80044ce:	2100      	movs	r1, #0
 80044d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b004      	add	sp, #16
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	ffceff88 	.word	0xffceff88
 80044e0:	ffff00ff 	.word	0xffff00ff

080044e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a38      	ldr	r2, [pc, #224]	; (80045d8 <TIM_Base_SetConfig+0xf4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00c      	beq.n	8004516 <TIM_Base_SetConfig+0x32>
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	05db      	lsls	r3, r3, #23
 8004502:	429a      	cmp	r2, r3
 8004504:	d007      	beq.n	8004516 <TIM_Base_SetConfig+0x32>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a34      	ldr	r2, [pc, #208]	; (80045dc <TIM_Base_SetConfig+0xf8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_Base_SetConfig+0x32>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a33      	ldr	r2, [pc, #204]	; (80045e0 <TIM_Base_SetConfig+0xfc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d108      	bne.n	8004528 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2270      	movs	r2, #112	; 0x70
 800451a:	4393      	bics	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a2b      	ldr	r2, [pc, #172]	; (80045d8 <TIM_Base_SetConfig+0xf4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d01c      	beq.n	800456a <TIM_Base_SetConfig+0x86>
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	05db      	lsls	r3, r3, #23
 8004536:	429a      	cmp	r2, r3
 8004538:	d017      	beq.n	800456a <TIM_Base_SetConfig+0x86>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a27      	ldr	r2, [pc, #156]	; (80045dc <TIM_Base_SetConfig+0xf8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <TIM_Base_SetConfig+0x86>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <TIM_Base_SetConfig+0xfc>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00f      	beq.n	800456a <TIM_Base_SetConfig+0x86>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <TIM_Base_SetConfig+0x100>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00b      	beq.n	800456a <TIM_Base_SetConfig+0x86>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <TIM_Base_SetConfig+0x104>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <TIM_Base_SetConfig+0x86>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <TIM_Base_SetConfig+0x108>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_Base_SetConfig+0x86>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a22      	ldr	r2, [pc, #136]	; (80045f0 <TIM_Base_SetConfig+0x10c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d108      	bne.n	800457c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <TIM_Base_SetConfig+0x110>)
 800456e:	4013      	ands	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2280      	movs	r2, #128	; 0x80
 8004580:	4393      	bics	r3, r2
 8004582:	001a      	movs	r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <TIM_Base_SetConfig+0xf4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00b      	beq.n	80045c2 <TIM_Base_SetConfig+0xde>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <TIM_Base_SetConfig+0x104>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d007      	beq.n	80045c2 <TIM_Base_SetConfig+0xde>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <TIM_Base_SetConfig+0x108>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_Base_SetConfig+0xde>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <TIM_Base_SetConfig+0x10c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d103      	bne.n	80045ca <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	615a      	str	r2, [r3, #20]
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b004      	add	sp, #16
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40002000 	.word	0x40002000
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40014400 	.word	0x40014400
 80045f0:	40014800 	.word	0x40014800
 80045f4:	fffffcff 	.word	0xfffffcff

080045f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	2201      	movs	r2, #1
 8004610:	4393      	bics	r3, r2
 8004612:	001a      	movs	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	22f0      	movs	r2, #240	; 0xf0
 8004622:	4393      	bics	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	220a      	movs	r2, #10
 8004634:	4393      	bics	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	621a      	str	r2, [r3, #32]
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	b006      	add	sp, #24
 8004652:	bd80      	pop	{r7, pc}

08004654 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	2210      	movs	r2, #16
 8004666:	4393      	bics	r3, r2
 8004668:	001a      	movs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	4a0d      	ldr	r2, [pc, #52]	; (80046b4 <TIM_TI2_ConfigInputStage+0x60>)
 800467e:	4013      	ands	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	031b      	lsls	r3, r3, #12
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	22a0      	movs	r2, #160	; 0xa0
 8004690:	4393      	bics	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b006      	add	sp, #24
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	ffff0fff 	.word	0xffff0fff

080046b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a08      	ldr	r2, [pc, #32]	; (80046ec <TIM_ITRx_SetConfig+0x34>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	2207      	movs	r2, #7
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	609a      	str	r2, [r3, #8]
}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	ffcfff8f 	.word	0xffcfff8f

080046f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <TIM_ETR_SetConfig+0x3c>)
 8004708:	4013      	ands	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	021a      	lsls	r2, r3, #8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	431a      	orrs	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4313      	orrs	r3, r2
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	609a      	str	r2, [r3, #8]
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b006      	add	sp, #24
 800472a:	bd80      	pop	{r7, pc}
 800472c:	ffff00ff 	.word	0xffff00ff

08004730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	223c      	movs	r2, #60	; 0x3c
 800473e:	5c9b      	ldrb	r3, [r3, r2]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004744:	2302      	movs	r3, #2
 8004746:	e05a      	b.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	223c      	movs	r2, #60	; 0x3c
 800474c:	2101      	movs	r1, #1
 800474e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	223d      	movs	r2, #61	; 0x3d
 8004754:	2102      	movs	r1, #2
 8004756:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a26      	ldr	r2, [pc, #152]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d108      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a25      	ldr	r2, [pc, #148]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004776:	4013      	ands	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2270      	movs	r2, #112	; 0x70
 8004788:	4393      	bics	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a19      	ldr	r2, [pc, #100]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d014      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	05db      	lsls	r3, r3, #23
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d00e      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d009      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a14      	ldr	r2, [pc, #80]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a12      	ldr	r2, [pc, #72]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10c      	bne.n	80047ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2280      	movs	r2, #128	; 0x80
 80047d6:	4393      	bics	r3, r2
 80047d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	223d      	movs	r2, #61	; 0x3d
 80047f0:	2101      	movs	r1, #1
 80047f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	223c      	movs	r2, #60	; 0x3c
 80047f8:	2100      	movs	r1, #0
 80047fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b004      	add	sp, #16
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	40012c00 	.word	0x40012c00
 800480c:	ff0fffff 	.word	0xff0fffff
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40014000 	.word	0x40014000

0800481c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e046      	b.n	80048bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2284      	movs	r2, #132	; 0x84
 8004832:	589b      	ldr	r3, [r3, r2]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d107      	bne.n	8004848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2280      	movs	r2, #128	; 0x80
 800483c:	2100      	movs	r1, #0
 800483e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	0018      	movs	r0, r3
 8004844:	f7fc fe9c 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2284      	movs	r2, #132	; 0x84
 800484c:	2124      	movs	r1, #36	; 0x24
 800484e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2101      	movs	r1, #1
 800485c:	438a      	bics	r2, r1
 800485e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0018      	movs	r0, r3
 8004864:	f000 fd36 	bl	80052d4 <UART_SetConfig>
 8004868:	0003      	movs	r3, r0
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e024      	b.n	80048bc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f001 f8a9 	bl	80059d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	490d      	ldr	r1, [pc, #52]	; (80048c4 <HAL_UART_Init+0xa8>)
 800488e:	400a      	ands	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	212a      	movs	r1, #42	; 0x2a
 800489e:	438a      	bics	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2101      	movs	r1, #1
 80048ae:	430a      	orrs	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f001 f941 	bl	8005b3c <UART_CheckIdleState>
 80048ba:	0003      	movs	r3, r0
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	b002      	add	sp, #8
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	ffffb7ff 	.word	0xffffb7ff

080048c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	1dbb      	adds	r3, r7, #6
 80048d6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2284      	movs	r2, #132	; 0x84
 80048dc:	589b      	ldr	r3, [r3, r2]
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d000      	beq.n	80048e4 <HAL_UART_Transmit+0x1c>
 80048e2:	e097      	b.n	8004a14 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_UART_Transmit+0x2a>
 80048ea:	1dbb      	adds	r3, r7, #6
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e08f      	b.n	8004a16 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	015b      	lsls	r3, r3, #5
 80048fe:	429a      	cmp	r2, r3
 8004900:	d109      	bne.n	8004916 <HAL_UART_Transmit+0x4e>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2201      	movs	r2, #1
 800490e:	4013      	ands	r3, r2
 8004910:	d001      	beq.n	8004916 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e07f      	b.n	8004a16 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2280      	movs	r2, #128	; 0x80
 800491a:	5c9b      	ldrb	r3, [r3, r2]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_UART_Transmit+0x5c>
 8004920:	2302      	movs	r3, #2
 8004922:	e078      	b.n	8004a16 <HAL_UART_Transmit+0x14e>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2280      	movs	r2, #128	; 0x80
 8004928:	2101      	movs	r1, #1
 800492a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	228c      	movs	r2, #140	; 0x8c
 8004930:	2100      	movs	r1, #0
 8004932:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2284      	movs	r2, #132	; 0x84
 8004938:	2121      	movs	r1, #33	; 0x21
 800493a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800493c:	f7fc ffc8 	bl	80018d0 <HAL_GetTick>
 8004940:	0003      	movs	r3, r0
 8004942:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1dba      	adds	r2, r7, #6
 8004948:	2154      	movs	r1, #84	; 0x54
 800494a:	8812      	ldrh	r2, [r2, #0]
 800494c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1dba      	adds	r2, r7, #6
 8004952:	2156      	movs	r1, #86	; 0x56
 8004954:	8812      	ldrh	r2, [r2, #0]
 8004956:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	015b      	lsls	r3, r3, #5
 8004960:	429a      	cmp	r2, r3
 8004962:	d108      	bne.n	8004976 <HAL_UART_Transmit+0xae>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d104      	bne.n	8004976 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	e003      	b.n	800497e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	2100      	movs	r1, #0
 8004984:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004986:	e02c      	b.n	80049e2 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	0013      	movs	r3, r2
 8004992:	2200      	movs	r2, #0
 8004994:	2180      	movs	r1, #128	; 0x80
 8004996:	f001 f91b 	bl	8005bd0 <UART_WaitOnFlagUntilTimeout>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d001      	beq.n	80049a2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e039      	b.n	8004a16 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10b      	bne.n	80049c0 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	001a      	movs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	05d2      	lsls	r2, r2, #23
 80049b4:	0dd2      	lsrs	r2, r2, #23
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	3302      	adds	r3, #2
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	e007      	b.n	80049d0 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	781a      	ldrb	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3301      	adds	r3, #1
 80049ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2256      	movs	r2, #86	; 0x56
 80049d4:	5a9b      	ldrh	r3, [r3, r2]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b299      	uxth	r1, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2256      	movs	r2, #86	; 0x56
 80049e0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2256      	movs	r2, #86	; 0x56
 80049e6:	5a9b      	ldrh	r3, [r3, r2]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1cc      	bne.n	8004988 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	0013      	movs	r3, r2
 80049f8:	2200      	movs	r2, #0
 80049fa:	2140      	movs	r1, #64	; 0x40
 80049fc:	f001 f8e8 	bl	8005bd0 <UART_WaitOnFlagUntilTimeout>
 8004a00:	1e03      	subs	r3, r0, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e006      	b.n	8004a16 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2284      	movs	r2, #132	; 0x84
 8004a0c:	2120      	movs	r1, #32
 8004a0e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	0018      	movs	r0, r3
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b008      	add	sp, #32
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08c      	sub	sp, #48	; 0x30
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	1dbb      	adds	r3, r7, #6
 8004a2c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2284      	movs	r2, #132	; 0x84
 8004a32:	589b      	ldr	r3, [r3, r2]
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d000      	beq.n	8004a3a <HAL_UART_Transmit_IT+0x1a>
 8004a38:	e0a0      	b.n	8004b7c <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_UART_Transmit_IT+0x28>
 8004a40:	1dbb      	adds	r3, r7, #6
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e098      	b.n	8004b7e <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	015b      	lsls	r3, r3, #5
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d109      	bne.n	8004a6c <HAL_UART_Transmit_IT+0x4c>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2201      	movs	r2, #1
 8004a64:	4013      	ands	r3, r2
 8004a66:	d001      	beq.n	8004a6c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e088      	b.n	8004b7e <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	5c9b      	ldrb	r3, [r3, r2]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_UART_Transmit_IT+0x5a>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e081      	b.n	8004b7e <HAL_UART_Transmit_IT+0x15e>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2280      	movs	r2, #128	; 0x80
 8004a7e:	2101      	movs	r1, #1
 8004a80:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1dba      	adds	r2, r7, #6
 8004a8c:	2154      	movs	r1, #84	; 0x54
 8004a8e:	8812      	ldrh	r2, [r2, #0]
 8004a90:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1dba      	adds	r2, r7, #6
 8004a96:	2156      	movs	r1, #86	; 0x56
 8004a98:	8812      	ldrh	r2, [r2, #0]
 8004a9a:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	228c      	movs	r2, #140	; 0x8c
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2284      	movs	r2, #132	; 0x84
 8004aae:	2121      	movs	r1, #33	; 0x21
 8004ab0:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	059b      	lsls	r3, r3, #22
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d12e      	bne.n	8004b1c <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	015b      	lsls	r3, r3, #5
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d107      	bne.n	8004ada <HAL_UART_Transmit_IT+0xba>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a2c      	ldr	r2, [pc, #176]	; (8004b88 <HAL_UART_Transmit_IT+0x168>)
 8004ad6:	675a      	str	r2, [r3, #116]	; 0x74
 8004ad8:	e002      	b.n	8004ae0 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a2b      	ldr	r2, [pc, #172]	; (8004b8c <HAL_UART_Transmit_IT+0x16c>)
 8004ade:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2280      	movs	r2, #128	; 0x80
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8004aec:	61fb      	str	r3, [r7, #28]
  return(result);
 8004aee:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af2:	2301      	movs	r3, #1
 8004af4:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	f383 8810 	msr	PRIMASK, r3
}
 8004afc:	46c0      	nop			; (mov r8, r8)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2180      	movs	r1, #128	; 0x80
 8004b0a:	0409      	lsls	r1, r1, #16
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	f383 8810 	msr	PRIMASK, r3
}
 8004b1a:	e02d      	b.n	8004b78 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	015b      	lsls	r3, r3, #5
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d107      	bne.n	8004b38 <HAL_UART_Transmit_IT+0x118>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d103      	bne.n	8004b38 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <HAL_UART_Transmit_IT+0x170>)
 8004b34:	675a      	str	r2, [r3, #116]	; 0x74
 8004b36:	e002      	b.n	8004b3e <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_UART_Transmit_IT+0x174>)
 8004b3c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2280      	movs	r2, #128	; 0x80
 8004b42:	2100      	movs	r1, #0
 8004b44:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b46:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4a:	613b      	str	r3, [r7, #16]
  return(result);
 8004b4c:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b50:	2301      	movs	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f383 8810 	msr	PRIMASK, r3
}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2180      	movs	r1, #128	; 0x80
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f383 8810 	msr	PRIMASK, r3
}
 8004b76:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e000      	b.n	8004b7e <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
  }
}
 8004b7e:	0018      	movs	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b00c      	add	sp, #48	; 0x30
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	080062d1 	.word	0x080062d1
 8004b8c:	080061e5 	.word	0x080061e5
 8004b90:	08006127 	.word	0x08006127
 8004b94:	08006073 	.word	0x08006073

08004b98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	1dbb      	adds	r3, r7, #6
 8004ba4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2288      	movs	r2, #136	; 0x88
 8004baa:	589b      	ldr	r3, [r3, r2]
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d15a      	bne.n	8004c66 <HAL_UART_Receive_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_UART_Receive_IT+0x26>
 8004bb6:	1dbb      	adds	r3, r7, #6
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e052      	b.n	8004c68 <HAL_UART_Receive_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	015b      	lsls	r3, r3, #5
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d109      	bne.n	8004be2 <HAL_UART_Receive_IT+0x4a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d105      	bne.n	8004be2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d001      	beq.n	8004be2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e042      	b.n	8004c68 <HAL_UART_Receive_IT+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	5c9b      	ldrb	r3, [r3, r2]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_UART_Receive_IT+0x58>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e03b      	b.n	8004c68 <HAL_UART_Receive_IT+0xd0>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2280      	movs	r2, #128	; 0x80
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_UART_Receive_IT+0xd8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d025      	beq.n	8004c54 <HAL_UART_Receive_IT+0xbc>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_UART_Receive_IT+0xdc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d020      	beq.n	8004c54 <HAL_UART_Receive_IT+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	2380      	movs	r3, #128	; 0x80
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d019      	beq.n	8004c54 <HAL_UART_Receive_IT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c20:	f3ef 8310 	mrs	r3, PRIMASK
 8004c24:	613b      	str	r3, [r7, #16]
  return(result);
 8004c26:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f383 8810 	msr	PRIMASK, r3
}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2180      	movs	r1, #128	; 0x80
 8004c42:	04c9      	lsls	r1, r1, #19
 8004c44:	430a      	orrs	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f383 8810 	msr	PRIMASK, r3
}
 8004c52:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c54:	1dbb      	adds	r3, r7, #6
 8004c56:	881a      	ldrh	r2, [r3, #0]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f001 f87f 	bl	8005d60 <UART_Start_Receive_IT>
 8004c62:	0003      	movs	r3, r0
 8004c64:	e000      	b.n	8004c68 <HAL_UART_Receive_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8004c66:	2302      	movs	r3, #2
  }
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b008      	add	sp, #32
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40008000 	.word	0x40008000
 8004c74:	40008400 	.word	0x40008400

08004c78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c78:	b5b0      	push	{r4, r5, r7, lr}
 8004c7a:	b0aa      	sub	sp, #168	; 0xa8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	22a4      	movs	r2, #164	; 0xa4
 8004c88:	18b9      	adds	r1, r7, r2
 8004c8a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	20a0      	movs	r0, #160	; 0xa0
 8004c94:	1839      	adds	r1, r7, r0
 8004c96:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	249c      	movs	r4, #156	; 0x9c
 8004ca0:	1939      	adds	r1, r7, r4
 8004ca2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ca4:	0011      	movs	r1, r2
 8004ca6:	18bb      	adds	r3, r7, r2
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4aa0      	ldr	r2, [pc, #640]	; (8004f2c <HAL_UART_IRQHandler+0x2b4>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	2298      	movs	r2, #152	; 0x98
 8004cb0:	18bd      	adds	r5, r7, r2
 8004cb2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004cb4:	18bb      	adds	r3, r7, r2
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d11a      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004cbc:	187b      	adds	r3, r7, r1
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d015      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cc6:	183b      	adds	r3, r7, r0
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d105      	bne.n	8004cdc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cd0:	193b      	adds	r3, r7, r4
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	055b      	lsls	r3, r3, #21
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d00a      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d100      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x6e>
 8004ce4:	e2cf      	b.n	8005286 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	0010      	movs	r0, r2
 8004cee:	4798      	blx	r3
      }
      return;
 8004cf0:	e2c9      	b.n	8005286 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cf2:	2398      	movs	r3, #152	; 0x98
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d100      	bne.n	8004cfe <HAL_UART_IRQHandler+0x86>
 8004cfc:	e11e      	b.n	8004f3c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cfe:	239c      	movs	r3, #156	; 0x9c
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a8a      	ldr	r2, [pc, #552]	; (8004f30 <HAL_UART_IRQHandler+0x2b8>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	d106      	bne.n	8004d18 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d0a:	23a0      	movs	r3, #160	; 0xa0
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a88      	ldr	r2, [pc, #544]	; (8004f34 <HAL_UART_IRQHandler+0x2bc>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	d100      	bne.n	8004d18 <HAL_UART_IRQHandler+0xa0>
 8004d16:	e111      	b.n	8004f3c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d18:	23a4      	movs	r3, #164	; 0xa4
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	4013      	ands	r3, r2
 8004d22:	d012      	beq.n	8004d4a <HAL_UART_IRQHandler+0xd2>
 8004d24:	23a0      	movs	r3, #160	; 0xa0
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	2380      	movs	r3, #128	; 0x80
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d00b      	beq.n	8004d4a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2201      	movs	r2, #1
 8004d38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	228c      	movs	r2, #140	; 0x8c
 8004d3e:	589b      	ldr	r3, [r3, r2]
 8004d40:	2201      	movs	r2, #1
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	218c      	movs	r1, #140	; 0x8c
 8004d48:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d4a:	23a4      	movs	r3, #164	; 0xa4
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2202      	movs	r2, #2
 8004d52:	4013      	ands	r3, r2
 8004d54:	d011      	beq.n	8004d7a <HAL_UART_IRQHandler+0x102>
 8004d56:	239c      	movs	r3, #156	; 0x9c
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2202      	movs	r2, #2
 8004d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	228c      	movs	r2, #140	; 0x8c
 8004d6e:	589b      	ldr	r3, [r3, r2]
 8004d70:	2204      	movs	r2, #4
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	218c      	movs	r1, #140	; 0x8c
 8004d78:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d7a:	23a4      	movs	r3, #164	; 0xa4
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2204      	movs	r2, #4
 8004d82:	4013      	ands	r3, r2
 8004d84:	d011      	beq.n	8004daa <HAL_UART_IRQHandler+0x132>
 8004d86:	239c      	movs	r3, #156	; 0x9c
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d00b      	beq.n	8004daa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2204      	movs	r2, #4
 8004d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	228c      	movs	r2, #140	; 0x8c
 8004d9e:	589b      	ldr	r3, [r3, r2]
 8004da0:	2202      	movs	r2, #2
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	218c      	movs	r1, #140	; 0x8c
 8004da8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004daa:	23a4      	movs	r3, #164	; 0xa4
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2208      	movs	r2, #8
 8004db2:	4013      	ands	r3, r2
 8004db4:	d017      	beq.n	8004de6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004db6:	23a0      	movs	r3, #160	; 0xa0
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d105      	bne.n	8004dce <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004dc2:	239c      	movs	r3, #156	; 0x9c
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a59      	ldr	r2, [pc, #356]	; (8004f30 <HAL_UART_IRQHandler+0x2b8>)
 8004dca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004dcc:	d00b      	beq.n	8004de6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	228c      	movs	r2, #140	; 0x8c
 8004dda:	589b      	ldr	r3, [r3, r2]
 8004ddc:	2208      	movs	r2, #8
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	218c      	movs	r1, #140	; 0x8c
 8004de4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004de6:	23a4      	movs	r3, #164	; 0xa4
 8004de8:	18fb      	adds	r3, r7, r3
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	4013      	ands	r3, r2
 8004df2:	d013      	beq.n	8004e1c <HAL_UART_IRQHandler+0x1a4>
 8004df4:	23a0      	movs	r3, #160	; 0xa0
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	04db      	lsls	r3, r3, #19
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d00c      	beq.n	8004e1c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2280      	movs	r2, #128	; 0x80
 8004e08:	0112      	lsls	r2, r2, #4
 8004e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	228c      	movs	r2, #140	; 0x8c
 8004e10:	589b      	ldr	r3, [r3, r2]
 8004e12:	2220      	movs	r2, #32
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	218c      	movs	r1, #140	; 0x8c
 8004e1a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	228c      	movs	r2, #140	; 0x8c
 8004e20:	589b      	ldr	r3, [r3, r2]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d100      	bne.n	8004e28 <HAL_UART_IRQHandler+0x1b0>
 8004e26:	e230      	b.n	800528a <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e28:	23a4      	movs	r3, #164	; 0xa4
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	4013      	ands	r3, r2
 8004e32:	d015      	beq.n	8004e60 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e34:	23a0      	movs	r3, #160	; 0xa0
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d106      	bne.n	8004e4e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e40:	239c      	movs	r3, #156	; 0x9c
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	055b      	lsls	r3, r3, #21
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d008      	beq.n	8004e60 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d004      	beq.n	8004e60 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	0010      	movs	r0, r2
 8004e5e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	228c      	movs	r2, #140	; 0x8c
 8004e64:	589b      	ldr	r3, [r3, r2]
 8004e66:	2194      	movs	r1, #148	; 0x94
 8004e68:	187a      	adds	r2, r7, r1
 8004e6a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2240      	movs	r2, #64	; 0x40
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d004      	beq.n	8004e84 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e7a:	187b      	adds	r3, r7, r1
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2228      	movs	r2, #40	; 0x28
 8004e80:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e82:	d047      	beq.n	8004f14 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	0018      	movs	r0, r3
 8004e88:	f001 f876 	bl	8005f78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2240      	movs	r2, #64	; 0x40
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d137      	bne.n	8004f0a <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea2:	2090      	movs	r0, #144	; 0x90
 8004ea4:	183a      	adds	r2, r7, r0
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eae:	f383 8810 	msr	PRIMASK, r3
}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2140      	movs	r1, #64	; 0x40
 8004ec0:	438a      	bics	r2, r1
 8004ec2:	609a      	str	r2, [r3, #8]
 8004ec4:	183b      	adds	r3, r7, r0
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ecc:	f383 8810 	msr	PRIMASK, r3
}
 8004ed0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d012      	beq.n	8004f00 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ede:	4a16      	ldr	r2, [pc, #88]	; (8004f38 <HAL_UART_IRQHandler+0x2c0>)
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f7fd fec4 	bl	8002c74 <HAL_DMA_Abort_IT>
 8004eec:	1e03      	subs	r3, r0, #0
 8004eee:	d01a      	beq.n	8004f26 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efa:	0018      	movs	r0, r3
 8004efc:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efe:	e012      	b.n	8004f26 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	0018      	movs	r0, r3
 8004f04:	f000 f9d2 	bl	80052ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	e00d      	b.n	8004f26 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 f9cd 	bl	80052ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f12:	e008      	b.n	8004f26 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 f9c8 	bl	80052ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	228c      	movs	r2, #140	; 0x8c
 8004f20:	2100      	movs	r1, #0
 8004f22:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004f24:	e1b1      	b.n	800528a <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f26:	46c0      	nop			; (mov r8, r8)
    return;
 8004f28:	e1af      	b.n	800528a <HAL_UART_IRQHandler+0x612>
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	0000080f 	.word	0x0000080f
 8004f30:	10000001 	.word	0x10000001
 8004f34:	04000120 	.word	0x04000120
 8004f38:	08006045 	.word	0x08006045

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d000      	beq.n	8004f46 <HAL_UART_IRQHandler+0x2ce>
 8004f44:	e135      	b.n	80051b2 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f46:	23a4      	movs	r3, #164	; 0xa4
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d100      	bne.n	8004f54 <HAL_UART_IRQHandler+0x2dc>
 8004f52:	e12e      	b.n	80051b2 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f54:	23a0      	movs	r3, #160	; 0xa0
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2210      	movs	r2, #16
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d100      	bne.n	8004f62 <HAL_UART_IRQHandler+0x2ea>
 8004f60:	e127      	b.n	80051b2 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2210      	movs	r2, #16
 8004f68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2240      	movs	r2, #64	; 0x40
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d000      	beq.n	8004f7a <HAL_UART_IRQHandler+0x302>
 8004f78:	e09e      	b.n	80050b8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	217e      	movs	r1, #126	; 0x7e
 8004f84:	187b      	adds	r3, r7, r1
 8004f86:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004f88:	187b      	adds	r3, r7, r1
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d100      	bne.n	8004f92 <HAL_UART_IRQHandler+0x31a>
 8004f90:	e17d      	b.n	800528e <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	225c      	movs	r2, #92	; 0x5c
 8004f96:	5a9b      	ldrh	r3, [r3, r2]
 8004f98:	187a      	adds	r2, r7, r1
 8004f9a:	8812      	ldrh	r2, [r2, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d300      	bcc.n	8004fa2 <HAL_UART_IRQHandler+0x32a>
 8004fa0:	e175      	b.n	800528e <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	187a      	adds	r2, r7, r1
 8004fa6:	215e      	movs	r1, #94	; 0x5e
 8004fa8:	8812      	ldrh	r2, [r2, #0]
 8004faa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d16f      	bne.n	800509a <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fba:	f3ef 8310 	mrs	r3, PRIMASK
 8004fbe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fca:	f383 8810 	msr	PRIMASK, r3
}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	49b1      	ldr	r1, [pc, #708]	; (80052a0 <HAL_UART_IRQHandler+0x628>)
 8004fdc:	400a      	ands	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	f383 8810 	msr	PRIMASK, r3
}
 8004fea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fec:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff4:	677b      	str	r3, [r7, #116]	; 0x74
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			; (mov r8, r8)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2101      	movs	r1, #1
 800500e:	438a      	bics	r2, r1
 8005010:	609a      	str	r2, [r3, #8]
 8005012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005014:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800501e:	f3ef 8310 	mrs	r3, PRIMASK
 8005022:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005024:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005026:	673b      	str	r3, [r7, #112]	; 0x70
 8005028:	2301      	movs	r3, #1
 800502a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2140      	movs	r1, #64	; 0x40
 8005040:	438a      	bics	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005046:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2288      	movs	r2, #136	; 0x88
 8005054:	2120      	movs	r1, #32
 8005056:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505e:	f3ef 8310 	mrs	r3, PRIMASK
 8005062:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005064:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005068:	2301      	movs	r3, #1
 800506a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800506e:	f383 8810 	msr	PRIMASK, r3
}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2110      	movs	r1, #16
 8005080:	438a      	bics	r2, r1
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005086:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005094:	0018      	movs	r0, r3
 8005096:	f7fd fd8d 	bl	8002bb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	225c      	movs	r2, #92	; 0x5c
 800509e:	5a9a      	ldrh	r2, [r3, r2]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	215e      	movs	r1, #94	; 0x5e
 80050a4:	5a5b      	ldrh	r3, [r3, r1]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	0011      	movs	r1, r2
 80050b0:	0018      	movs	r0, r3
 80050b2:	f000 f903 	bl	80052bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050b6:	e0ea      	b.n	800528e <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	225c      	movs	r2, #92	; 0x5c
 80050bc:	5a99      	ldrh	r1, [r3, r2]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	225e      	movs	r2, #94	; 0x5e
 80050c2:	5a9b      	ldrh	r3, [r3, r2]
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	208e      	movs	r0, #142	; 0x8e
 80050c8:	183b      	adds	r3, r7, r0
 80050ca:	1a8a      	subs	r2, r1, r2
 80050cc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	225e      	movs	r2, #94	; 0x5e
 80050d2:	5a9b      	ldrh	r3, [r3, r2]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d100      	bne.n	80050dc <HAL_UART_IRQHandler+0x464>
 80050da:	e0da      	b.n	8005292 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 80050dc:	183b      	adds	r3, r7, r0
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d100      	bne.n	80050e6 <HAL_UART_IRQHandler+0x46e>
 80050e4:	e0d5      	b.n	8005292 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ec:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ee:	2488      	movs	r4, #136	; 0x88
 80050f0:	193a      	adds	r2, r7, r4
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	2301      	movs	r3, #1
 80050f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f383 8810 	msr	PRIMASK, r3
}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4966      	ldr	r1, [pc, #408]	; (80052a4 <HAL_UART_IRQHandler+0x62c>)
 800510c:	400a      	ands	r2, r1
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	193b      	adds	r3, r7, r4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f383 8810 	msr	PRIMASK, r3
}
 800511c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511e:	f3ef 8310 	mrs	r3, PRIMASK
 8005122:	61bb      	str	r3, [r7, #24]
  return(result);
 8005124:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005126:	2484      	movs	r4, #132	; 0x84
 8005128:	193a      	adds	r2, r7, r4
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	2301      	movs	r3, #1
 800512e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f383 8810 	msr	PRIMASK, r3
}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4959      	ldr	r1, [pc, #356]	; (80052a8 <HAL_UART_IRQHandler+0x630>)
 8005144:	400a      	ands	r2, r1
 8005146:	609a      	str	r2, [r3, #8]
 8005148:	193b      	adds	r3, r7, r4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2288      	movs	r2, #136	; 0x88
 800515a:	2120      	movs	r1, #32
 800515c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800516a:	f3ef 8310 	mrs	r3, PRIMASK
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005172:	2480      	movs	r4, #128	; 0x80
 8005174:	193a      	adds	r2, r7, r4
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	2301      	movs	r3, #1
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	f383 8810 	msr	PRIMASK, r3
}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2110      	movs	r1, #16
 8005190:	438a      	bics	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	193b      	adds	r3, r7, r4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	f383 8810 	msr	PRIMASK, r3
}
 80051a0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051a2:	183b      	adds	r3, r7, r0
 80051a4:	881a      	ldrh	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0011      	movs	r1, r2
 80051aa:	0018      	movs	r0, r3
 80051ac:	f000 f886 	bl	80052bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051b0:	e06f      	b.n	8005292 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051b2:	23a4      	movs	r3, #164	; 0xa4
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	035b      	lsls	r3, r3, #13
 80051bc:	4013      	ands	r3, r2
 80051be:	d010      	beq.n	80051e2 <HAL_UART_IRQHandler+0x56a>
 80051c0:	239c      	movs	r3, #156	; 0x9c
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	2380      	movs	r3, #128	; 0x80
 80051c8:	03db      	lsls	r3, r3, #15
 80051ca:	4013      	ands	r3, r2
 80051cc:	d009      	beq.n	80051e2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2280      	movs	r2, #128	; 0x80
 80051d4:	0352      	lsls	r2, r2, #13
 80051d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	0018      	movs	r0, r3
 80051dc:	f001 fd6e 	bl	8006cbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051e0:	e05a      	b.n	8005298 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051e2:	23a4      	movs	r3, #164	; 0xa4
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2280      	movs	r2, #128	; 0x80
 80051ea:	4013      	ands	r3, r2
 80051ec:	d016      	beq.n	800521c <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051ee:	23a0      	movs	r3, #160	; 0xa0
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2280      	movs	r2, #128	; 0x80
 80051f6:	4013      	ands	r3, r2
 80051f8:	d106      	bne.n	8005208 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051fa:	239c      	movs	r3, #156	; 0x9c
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	041b      	lsls	r3, r3, #16
 8005204:	4013      	ands	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520c:	2b00      	cmp	r3, #0
 800520e:	d042      	beq.n	8005296 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	0010      	movs	r0, r2
 8005218:	4798      	blx	r3
    }
    return;
 800521a:	e03c      	b.n	8005296 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800521c:	23a4      	movs	r3, #164	; 0xa4
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2240      	movs	r2, #64	; 0x40
 8005224:	4013      	ands	r3, r2
 8005226:	d00a      	beq.n	800523e <HAL_UART_IRQHandler+0x5c6>
 8005228:	23a0      	movs	r3, #160	; 0xa0
 800522a:	18fb      	adds	r3, r7, r3
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2240      	movs	r2, #64	; 0x40
 8005230:	4013      	ands	r3, r2
 8005232:	d004      	beq.n	800523e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0018      	movs	r0, r3
 8005238:	f001 f8c4 	bl	80063c4 <UART_EndTransmit_IT>
    return;
 800523c:	e02c      	b.n	8005298 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800523e:	23a4      	movs	r3, #164	; 0xa4
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	4013      	ands	r3, r2
 800524a:	d00b      	beq.n	8005264 <HAL_UART_IRQHandler+0x5ec>
 800524c:	23a0      	movs	r3, #160	; 0xa0
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	05db      	lsls	r3, r3, #23
 8005256:	4013      	ands	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	0018      	movs	r0, r3
 800525e:	f001 fd3d 	bl	8006cdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005262:	e019      	b.n	8005298 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005264:	23a4      	movs	r3, #164	; 0xa4
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	045b      	lsls	r3, r3, #17
 800526e:	4013      	ands	r3, r2
 8005270:	d012      	beq.n	8005298 <HAL_UART_IRQHandler+0x620>
 8005272:	23a0      	movs	r3, #160	; 0xa0
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	da0d      	bge.n	8005298 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	0018      	movs	r0, r3
 8005280:	f001 fd24 	bl	8006ccc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005284:	e008      	b.n	8005298 <HAL_UART_IRQHandler+0x620>
      return;
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	e006      	b.n	8005298 <HAL_UART_IRQHandler+0x620>
    return;
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	e004      	b.n	8005298 <HAL_UART_IRQHandler+0x620>
      return;
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	e002      	b.n	8005298 <HAL_UART_IRQHandler+0x620>
      return;
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	e000      	b.n	8005298 <HAL_UART_IRQHandler+0x620>
    return;
 8005296:	46c0      	nop			; (mov r8, r8)
  }
}
 8005298:	46bd      	mov	sp, r7
 800529a:	b02a      	add	sp, #168	; 0xa8
 800529c:	bdb0      	pop	{r4, r5, r7, pc}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	fffffeff 	.word	0xfffffeff
 80052a4:	fffffedf 	.word	0xfffffedf
 80052a8:	effffffe 	.word	0xeffffffe

080052ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052b4:	46c0      	nop			; (mov r8, r8)
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b002      	add	sp, #8
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	000a      	movs	r2, r1
 80052c6:	1cbb      	adds	r3, r7, #2
 80052c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b002      	add	sp, #8
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d4:	b5b0      	push	{r4, r5, r7, lr}
 80052d6:	b090      	sub	sp, #64	; 0x40
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052dc:	231a      	movs	r3, #26
 80052de:	2220      	movs	r2, #32
 80052e0:	4694      	mov	ip, r2
 80052e2:	44bc      	add	ip, r7
 80052e4:	4463      	add	r3, ip
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	431a      	orrs	r2, r3
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	4313      	orrs	r3, r2
 8005300:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4ac1      	ldr	r2, [pc, #772]	; (8005610 <UART_SetConfig+0x33c>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	430b      	orrs	r3, r1
 8005316:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	4abd      	ldr	r2, [pc, #756]	; (8005614 <UART_SetConfig+0x340>)
 8005320:	4013      	ands	r3, r2
 8005322:	0018      	movs	r0, r3
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	68d9      	ldr	r1, [r3, #12]
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	0003      	movs	r3, r0
 800532e:	430b      	orrs	r3, r1
 8005330:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4ab6      	ldr	r2, [pc, #728]	; (8005618 <UART_SetConfig+0x344>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d009      	beq.n	8005356 <UART_SetConfig+0x82>
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4ab5      	ldr	r2, [pc, #724]	; (800561c <UART_SetConfig+0x348>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d004      	beq.n	8005356 <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005352:	4313      	orrs	r3, r2
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4ab0      	ldr	r2, [pc, #704]	; (8005620 <UART_SetConfig+0x34c>)
 800535e:	4013      	ands	r3, r2
 8005360:	0019      	movs	r1, r3
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	430b      	orrs	r3, r1
 800536a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	220f      	movs	r2, #15
 8005374:	4393      	bics	r3, r2
 8005376:	0018      	movs	r0, r3
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	0003      	movs	r3, r0
 8005382:	430b      	orrs	r3, r1
 8005384:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4aa6      	ldr	r2, [pc, #664]	; (8005624 <UART_SetConfig+0x350>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d136      	bne.n	80053fe <UART_SetConfig+0x12a>
 8005390:	4ba5      	ldr	r3, [pc, #660]	; (8005628 <UART_SetConfig+0x354>)
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	2203      	movs	r2, #3
 8005396:	4013      	ands	r3, r2
 8005398:	2b03      	cmp	r3, #3
 800539a:	d020      	beq.n	80053de <UART_SetConfig+0x10a>
 800539c:	d827      	bhi.n	80053ee <UART_SetConfig+0x11a>
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d00d      	beq.n	80053be <UART_SetConfig+0xea>
 80053a2:	d824      	bhi.n	80053ee <UART_SetConfig+0x11a>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <UART_SetConfig+0xda>
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d010      	beq.n	80053ce <UART_SetConfig+0xfa>
 80053ac:	e01f      	b.n	80053ee <UART_SetConfig+0x11a>
 80053ae:	231b      	movs	r3, #27
 80053b0:	2220      	movs	r2, #32
 80053b2:	4694      	mov	ip, r2
 80053b4:	44bc      	add	ip, r7
 80053b6:	4463      	add	r3, ip
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e16f      	b.n	800569e <UART_SetConfig+0x3ca>
 80053be:	231b      	movs	r3, #27
 80053c0:	2220      	movs	r2, #32
 80053c2:	4694      	mov	ip, r2
 80053c4:	44bc      	add	ip, r7
 80053c6:	4463      	add	r3, ip
 80053c8:	2202      	movs	r2, #2
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	e167      	b.n	800569e <UART_SetConfig+0x3ca>
 80053ce:	231b      	movs	r3, #27
 80053d0:	2220      	movs	r2, #32
 80053d2:	4694      	mov	ip, r2
 80053d4:	44bc      	add	ip, r7
 80053d6:	4463      	add	r3, ip
 80053d8:	2204      	movs	r2, #4
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e15f      	b.n	800569e <UART_SetConfig+0x3ca>
 80053de:	231b      	movs	r3, #27
 80053e0:	2220      	movs	r2, #32
 80053e2:	4694      	mov	ip, r2
 80053e4:	44bc      	add	ip, r7
 80053e6:	4463      	add	r3, ip
 80053e8:	2208      	movs	r2, #8
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e157      	b.n	800569e <UART_SetConfig+0x3ca>
 80053ee:	231b      	movs	r3, #27
 80053f0:	2220      	movs	r2, #32
 80053f2:	4694      	mov	ip, r2
 80053f4:	44bc      	add	ip, r7
 80053f6:	4463      	add	r3, ip
 80053f8:	2210      	movs	r2, #16
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	e14f      	b.n	800569e <UART_SetConfig+0x3ca>
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a8a      	ldr	r2, [pc, #552]	; (800562c <UART_SetConfig+0x358>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d136      	bne.n	8005476 <UART_SetConfig+0x1a2>
 8005408:	4b87      	ldr	r3, [pc, #540]	; (8005628 <UART_SetConfig+0x354>)
 800540a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540c:	220c      	movs	r2, #12
 800540e:	4013      	ands	r3, r2
 8005410:	2b0c      	cmp	r3, #12
 8005412:	d020      	beq.n	8005456 <UART_SetConfig+0x182>
 8005414:	d827      	bhi.n	8005466 <UART_SetConfig+0x192>
 8005416:	2b08      	cmp	r3, #8
 8005418:	d00d      	beq.n	8005436 <UART_SetConfig+0x162>
 800541a:	d824      	bhi.n	8005466 <UART_SetConfig+0x192>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <UART_SetConfig+0x152>
 8005420:	2b04      	cmp	r3, #4
 8005422:	d010      	beq.n	8005446 <UART_SetConfig+0x172>
 8005424:	e01f      	b.n	8005466 <UART_SetConfig+0x192>
 8005426:	231b      	movs	r3, #27
 8005428:	2220      	movs	r2, #32
 800542a:	4694      	mov	ip, r2
 800542c:	44bc      	add	ip, r7
 800542e:	4463      	add	r3, ip
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	e133      	b.n	800569e <UART_SetConfig+0x3ca>
 8005436:	231b      	movs	r3, #27
 8005438:	2220      	movs	r2, #32
 800543a:	4694      	mov	ip, r2
 800543c:	44bc      	add	ip, r7
 800543e:	4463      	add	r3, ip
 8005440:	2202      	movs	r2, #2
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	e12b      	b.n	800569e <UART_SetConfig+0x3ca>
 8005446:	231b      	movs	r3, #27
 8005448:	2220      	movs	r2, #32
 800544a:	4694      	mov	ip, r2
 800544c:	44bc      	add	ip, r7
 800544e:	4463      	add	r3, ip
 8005450:	2204      	movs	r2, #4
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	e123      	b.n	800569e <UART_SetConfig+0x3ca>
 8005456:	231b      	movs	r3, #27
 8005458:	2220      	movs	r2, #32
 800545a:	4694      	mov	ip, r2
 800545c:	44bc      	add	ip, r7
 800545e:	4463      	add	r3, ip
 8005460:	2208      	movs	r2, #8
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	e11b      	b.n	800569e <UART_SetConfig+0x3ca>
 8005466:	231b      	movs	r3, #27
 8005468:	2220      	movs	r2, #32
 800546a:	4694      	mov	ip, r2
 800546c:	44bc      	add	ip, r7
 800546e:	4463      	add	r3, ip
 8005470:	2210      	movs	r2, #16
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e113      	b.n	800569e <UART_SetConfig+0x3ca>
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a6d      	ldr	r2, [pc, #436]	; (8005630 <UART_SetConfig+0x35c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d136      	bne.n	80054ee <UART_SetConfig+0x21a>
 8005480:	4b69      	ldr	r3, [pc, #420]	; (8005628 <UART_SetConfig+0x354>)
 8005482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005484:	2230      	movs	r2, #48	; 0x30
 8005486:	4013      	ands	r3, r2
 8005488:	2b30      	cmp	r3, #48	; 0x30
 800548a:	d020      	beq.n	80054ce <UART_SetConfig+0x1fa>
 800548c:	d827      	bhi.n	80054de <UART_SetConfig+0x20a>
 800548e:	2b20      	cmp	r3, #32
 8005490:	d00d      	beq.n	80054ae <UART_SetConfig+0x1da>
 8005492:	d824      	bhi.n	80054de <UART_SetConfig+0x20a>
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <UART_SetConfig+0x1ca>
 8005498:	2b10      	cmp	r3, #16
 800549a:	d010      	beq.n	80054be <UART_SetConfig+0x1ea>
 800549c:	e01f      	b.n	80054de <UART_SetConfig+0x20a>
 800549e:	231b      	movs	r3, #27
 80054a0:	2220      	movs	r2, #32
 80054a2:	4694      	mov	ip, r2
 80054a4:	44bc      	add	ip, r7
 80054a6:	4463      	add	r3, ip
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	e0f7      	b.n	800569e <UART_SetConfig+0x3ca>
 80054ae:	231b      	movs	r3, #27
 80054b0:	2220      	movs	r2, #32
 80054b2:	4694      	mov	ip, r2
 80054b4:	44bc      	add	ip, r7
 80054b6:	4463      	add	r3, ip
 80054b8:	2202      	movs	r2, #2
 80054ba:	701a      	strb	r2, [r3, #0]
 80054bc:	e0ef      	b.n	800569e <UART_SetConfig+0x3ca>
 80054be:	231b      	movs	r3, #27
 80054c0:	2220      	movs	r2, #32
 80054c2:	4694      	mov	ip, r2
 80054c4:	44bc      	add	ip, r7
 80054c6:	4463      	add	r3, ip
 80054c8:	2204      	movs	r2, #4
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	e0e7      	b.n	800569e <UART_SetConfig+0x3ca>
 80054ce:	231b      	movs	r3, #27
 80054d0:	2220      	movs	r2, #32
 80054d2:	4694      	mov	ip, r2
 80054d4:	44bc      	add	ip, r7
 80054d6:	4463      	add	r3, ip
 80054d8:	2208      	movs	r2, #8
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	e0df      	b.n	800569e <UART_SetConfig+0x3ca>
 80054de:	231b      	movs	r3, #27
 80054e0:	2220      	movs	r2, #32
 80054e2:	4694      	mov	ip, r2
 80054e4:	44bc      	add	ip, r7
 80054e6:	4463      	add	r3, ip
 80054e8:	2210      	movs	r2, #16
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e0d7      	b.n	800569e <UART_SetConfig+0x3ca>
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a50      	ldr	r2, [pc, #320]	; (8005634 <UART_SetConfig+0x360>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d107      	bne.n	8005508 <UART_SetConfig+0x234>
 80054f8:	231b      	movs	r3, #27
 80054fa:	2220      	movs	r2, #32
 80054fc:	4694      	mov	ip, r2
 80054fe:	44bc      	add	ip, r7
 8005500:	4463      	add	r3, ip
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	e0ca      	b.n	800569e <UART_SetConfig+0x3ca>
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a4a      	ldr	r2, [pc, #296]	; (8005638 <UART_SetConfig+0x364>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d107      	bne.n	8005522 <UART_SetConfig+0x24e>
 8005512:	231b      	movs	r3, #27
 8005514:	2220      	movs	r2, #32
 8005516:	4694      	mov	ip, r2
 8005518:	44bc      	add	ip, r7
 800551a:	4463      	add	r3, ip
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	e0bd      	b.n	800569e <UART_SetConfig+0x3ca>
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a45      	ldr	r2, [pc, #276]	; (800563c <UART_SetConfig+0x368>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d107      	bne.n	800553c <UART_SetConfig+0x268>
 800552c:	231b      	movs	r3, #27
 800552e:	2220      	movs	r2, #32
 8005530:	4694      	mov	ip, r2
 8005532:	44bc      	add	ip, r7
 8005534:	4463      	add	r3, ip
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e0b0      	b.n	800569e <UART_SetConfig+0x3ca>
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a35      	ldr	r2, [pc, #212]	; (8005618 <UART_SetConfig+0x344>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d143      	bne.n	80055ce <UART_SetConfig+0x2fa>
 8005546:	4b38      	ldr	r3, [pc, #224]	; (8005628 <UART_SetConfig+0x354>)
 8005548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800554a:	23c0      	movs	r3, #192	; 0xc0
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	4013      	ands	r3, r2
 8005550:	22c0      	movs	r2, #192	; 0xc0
 8005552:	0112      	lsls	r2, r2, #4
 8005554:	4293      	cmp	r3, r2
 8005556:	d02a      	beq.n	80055ae <UART_SetConfig+0x2da>
 8005558:	22c0      	movs	r2, #192	; 0xc0
 800555a:	0112      	lsls	r2, r2, #4
 800555c:	4293      	cmp	r3, r2
 800555e:	d82e      	bhi.n	80055be <UART_SetConfig+0x2ea>
 8005560:	2280      	movs	r2, #128	; 0x80
 8005562:	0112      	lsls	r2, r2, #4
 8005564:	4293      	cmp	r3, r2
 8005566:	d012      	beq.n	800558e <UART_SetConfig+0x2ba>
 8005568:	2280      	movs	r2, #128	; 0x80
 800556a:	0112      	lsls	r2, r2, #4
 800556c:	4293      	cmp	r3, r2
 800556e:	d826      	bhi.n	80055be <UART_SetConfig+0x2ea>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d004      	beq.n	800557e <UART_SetConfig+0x2aa>
 8005574:	2280      	movs	r2, #128	; 0x80
 8005576:	00d2      	lsls	r2, r2, #3
 8005578:	4293      	cmp	r3, r2
 800557a:	d010      	beq.n	800559e <UART_SetConfig+0x2ca>
 800557c:	e01f      	b.n	80055be <UART_SetConfig+0x2ea>
 800557e:	231b      	movs	r3, #27
 8005580:	2220      	movs	r2, #32
 8005582:	4694      	mov	ip, r2
 8005584:	44bc      	add	ip, r7
 8005586:	4463      	add	r3, ip
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e087      	b.n	800569e <UART_SetConfig+0x3ca>
 800558e:	231b      	movs	r3, #27
 8005590:	2220      	movs	r2, #32
 8005592:	4694      	mov	ip, r2
 8005594:	44bc      	add	ip, r7
 8005596:	4463      	add	r3, ip
 8005598:	2202      	movs	r2, #2
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e07f      	b.n	800569e <UART_SetConfig+0x3ca>
 800559e:	231b      	movs	r3, #27
 80055a0:	2220      	movs	r2, #32
 80055a2:	4694      	mov	ip, r2
 80055a4:	44bc      	add	ip, r7
 80055a6:	4463      	add	r3, ip
 80055a8:	2204      	movs	r2, #4
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e077      	b.n	800569e <UART_SetConfig+0x3ca>
 80055ae:	231b      	movs	r3, #27
 80055b0:	2220      	movs	r2, #32
 80055b2:	4694      	mov	ip, r2
 80055b4:	44bc      	add	ip, r7
 80055b6:	4463      	add	r3, ip
 80055b8:	2208      	movs	r2, #8
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	e06f      	b.n	800569e <UART_SetConfig+0x3ca>
 80055be:	231b      	movs	r3, #27
 80055c0:	2220      	movs	r2, #32
 80055c2:	4694      	mov	ip, r2
 80055c4:	44bc      	add	ip, r7
 80055c6:	4463      	add	r3, ip
 80055c8:	2210      	movs	r2, #16
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	e067      	b.n	800569e <UART_SetConfig+0x3ca>
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a12      	ldr	r2, [pc, #72]	; (800561c <UART_SetConfig+0x348>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d15b      	bne.n	8005690 <UART_SetConfig+0x3bc>
 80055d8:	4b13      	ldr	r3, [pc, #76]	; (8005628 <UART_SetConfig+0x354>)
 80055da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055dc:	23c0      	movs	r3, #192	; 0xc0
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4013      	ands	r3, r2
 80055e2:	22c0      	movs	r2, #192	; 0xc0
 80055e4:	0092      	lsls	r2, r2, #2
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d042      	beq.n	8005670 <UART_SetConfig+0x39c>
 80055ea:	22c0      	movs	r2, #192	; 0xc0
 80055ec:	0092      	lsls	r2, r2, #2
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d846      	bhi.n	8005680 <UART_SetConfig+0x3ac>
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	0092      	lsls	r2, r2, #2
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d02a      	beq.n	8005650 <UART_SetConfig+0x37c>
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	0092      	lsls	r2, r2, #2
 80055fe:	4293      	cmp	r3, r2
 8005600:	d83e      	bhi.n	8005680 <UART_SetConfig+0x3ac>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01c      	beq.n	8005640 <UART_SetConfig+0x36c>
 8005606:	2280      	movs	r2, #128	; 0x80
 8005608:	0052      	lsls	r2, r2, #1
 800560a:	4293      	cmp	r3, r2
 800560c:	d028      	beq.n	8005660 <UART_SetConfig+0x38c>
 800560e:	e037      	b.n	8005680 <UART_SetConfig+0x3ac>
 8005610:	cfff69f3 	.word	0xcfff69f3
 8005614:	ffffcfff 	.word	0xffffcfff
 8005618:	40008000 	.word	0x40008000
 800561c:	40008400 	.word	0x40008400
 8005620:	11fff4ff 	.word	0x11fff4ff
 8005624:	40013800 	.word	0x40013800
 8005628:	40021000 	.word	0x40021000
 800562c:	40004400 	.word	0x40004400
 8005630:	40004800 	.word	0x40004800
 8005634:	40004c00 	.word	0x40004c00
 8005638:	40005000 	.word	0x40005000
 800563c:	40013c00 	.word	0x40013c00
 8005640:	231b      	movs	r3, #27
 8005642:	2220      	movs	r2, #32
 8005644:	4694      	mov	ip, r2
 8005646:	44bc      	add	ip, r7
 8005648:	4463      	add	r3, ip
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	e026      	b.n	800569e <UART_SetConfig+0x3ca>
 8005650:	231b      	movs	r3, #27
 8005652:	2220      	movs	r2, #32
 8005654:	4694      	mov	ip, r2
 8005656:	44bc      	add	ip, r7
 8005658:	4463      	add	r3, ip
 800565a:	2202      	movs	r2, #2
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e01e      	b.n	800569e <UART_SetConfig+0x3ca>
 8005660:	231b      	movs	r3, #27
 8005662:	2220      	movs	r2, #32
 8005664:	4694      	mov	ip, r2
 8005666:	44bc      	add	ip, r7
 8005668:	4463      	add	r3, ip
 800566a:	2204      	movs	r2, #4
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e016      	b.n	800569e <UART_SetConfig+0x3ca>
 8005670:	231b      	movs	r3, #27
 8005672:	2220      	movs	r2, #32
 8005674:	4694      	mov	ip, r2
 8005676:	44bc      	add	ip, r7
 8005678:	4463      	add	r3, ip
 800567a:	2208      	movs	r2, #8
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	e00e      	b.n	800569e <UART_SetConfig+0x3ca>
 8005680:	231b      	movs	r3, #27
 8005682:	2220      	movs	r2, #32
 8005684:	4694      	mov	ip, r2
 8005686:	44bc      	add	ip, r7
 8005688:	4463      	add	r3, ip
 800568a:	2210      	movs	r2, #16
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e006      	b.n	800569e <UART_SetConfig+0x3ca>
 8005690:	231b      	movs	r3, #27
 8005692:	2220      	movs	r2, #32
 8005694:	4694      	mov	ip, r2
 8005696:	44bc      	add	ip, r7
 8005698:	4463      	add	r3, ip
 800569a:	2210      	movs	r2, #16
 800569c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4ab8      	ldr	r2, [pc, #736]	; (8005984 <UART_SetConfig+0x6b0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d005      	beq.n	80056b4 <UART_SetConfig+0x3e0>
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4ab6      	ldr	r2, [pc, #728]	; (8005988 <UART_SetConfig+0x6b4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d000      	beq.n	80056b4 <UART_SetConfig+0x3e0>
 80056b2:	e097      	b.n	80057e4 <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056b4:	231b      	movs	r3, #27
 80056b6:	2220      	movs	r2, #32
 80056b8:	4694      	mov	ip, r2
 80056ba:	44bc      	add	ip, r7
 80056bc:	4463      	add	r3, ip
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d015      	beq.n	80056f0 <UART_SetConfig+0x41c>
 80056c4:	dc18      	bgt.n	80056f8 <UART_SetConfig+0x424>
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d00d      	beq.n	80056e6 <UART_SetConfig+0x412>
 80056ca:	dc15      	bgt.n	80056f8 <UART_SetConfig+0x424>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <UART_SetConfig+0x402>
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d005      	beq.n	80056e0 <UART_SetConfig+0x40c>
 80056d4:	e010      	b.n	80056f8 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d6:	f7fe fb8f 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 80056da:	0003      	movs	r3, r0
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056de:	e015      	b.n	800570c <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e0:	4baa      	ldr	r3, [pc, #680]	; (800598c <UART_SetConfig+0x6b8>)
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056e4:	e012      	b.n	800570c <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e6:	f7fe fafb 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 80056ea:	0003      	movs	r3, r0
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056ee:	e00d      	b.n	800570c <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056f6:	e009      	b.n	800570c <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80056fc:	231a      	movs	r3, #26
 80056fe:	2220      	movs	r2, #32
 8005700:	4694      	mov	ip, r2
 8005702:	44bc      	add	ip, r7
 8005704:	4463      	add	r3, ip
 8005706:	2201      	movs	r2, #1
 8005708:	701a      	strb	r2, [r3, #0]
        break;
 800570a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	2b00      	cmp	r3, #0
 8005710:	d100      	bne.n	8005714 <UART_SetConfig+0x440>
 8005712:	e146      	b.n	80059a2 <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005718:	4b9d      	ldr	r3, [pc, #628]	; (8005990 <UART_SetConfig+0x6bc>)
 800571a:	0052      	lsls	r2, r2, #1
 800571c:	5ad3      	ldrh	r3, [r2, r3]
 800571e:	0019      	movs	r1, r3
 8005720:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005722:	f7fa fcf7 	bl	8000114 <__udivsi3>
 8005726:	0003      	movs	r3, r0
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	0013      	movs	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	189b      	adds	r3, r3, r2
 8005734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005736:	429a      	cmp	r2, r3
 8005738:	d305      	bcc.n	8005746 <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005742:	429a      	cmp	r2, r3
 8005744:	d907      	bls.n	8005756 <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 8005746:	231a      	movs	r3, #26
 8005748:	2220      	movs	r2, #32
 800574a:	4694      	mov	ip, r2
 800574c:	44bc      	add	ip, r7
 800574e:	4463      	add	r3, ip
 8005750:	2201      	movs	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	e045      	b.n	80057e2 <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005762:	4b8b      	ldr	r3, [pc, #556]	; (8005990 <UART_SetConfig+0x6bc>)
 8005764:	0052      	lsls	r2, r2, #1
 8005766:	5ad3      	ldrh	r3, [r2, r3]
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	69b8      	ldr	r0, [r7, #24]
 8005774:	69f9      	ldr	r1, [r7, #28]
 8005776:	f7fa fe43 	bl	8000400 <__aeabi_uldivmod>
 800577a:	0002      	movs	r2, r0
 800577c:	000b      	movs	r3, r1
 800577e:	0e11      	lsrs	r1, r2, #24
 8005780:	021d      	lsls	r5, r3, #8
 8005782:	430d      	orrs	r5, r1
 8005784:	0214      	lsls	r4, r2, #8
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	68b8      	ldr	r0, [r7, #8]
 8005794:	68f9      	ldr	r1, [r7, #12]
 8005796:	1900      	adds	r0, r0, r4
 8005798:	4169      	adcs	r1, r5
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	2300      	movs	r3, #0
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f7fa fe2a 	bl	8000400 <__aeabi_uldivmod>
 80057ac:	0002      	movs	r2, r0
 80057ae:	000b      	movs	r3, r1
 80057b0:	0013      	movs	r3, r2
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b6:	23c0      	movs	r3, #192	; 0xc0
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d309      	bcc.n	80057d2 <UART_SetConfig+0x4fe>
 80057be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	035b      	lsls	r3, r3, #13
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d204      	bcs.n	80057d2 <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	e007      	b.n	80057e2 <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 80057d2:	231a      	movs	r3, #26
 80057d4:	2220      	movs	r2, #32
 80057d6:	4694      	mov	ip, r2
 80057d8:	44bc      	add	ip, r7
 80057da:	4463      	add	r3, ip
 80057dc:	2201      	movs	r2, #1
 80057de:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80057e0:	e0df      	b.n	80059a2 <UART_SetConfig+0x6ce>
 80057e2:	e0de      	b.n	80059a2 <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d000      	beq.n	80057f2 <UART_SetConfig+0x51e>
 80057f0:	e074      	b.n	80058dc <UART_SetConfig+0x608>
  {
    switch (clocksource)
 80057f2:	231b      	movs	r3, #27
 80057f4:	2220      	movs	r2, #32
 80057f6:	4694      	mov	ip, r2
 80057f8:	44bc      	add	ip, r7
 80057fa:	4463      	add	r3, ip
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d015      	beq.n	800582e <UART_SetConfig+0x55a>
 8005802:	dc18      	bgt.n	8005836 <UART_SetConfig+0x562>
 8005804:	2b04      	cmp	r3, #4
 8005806:	d00d      	beq.n	8005824 <UART_SetConfig+0x550>
 8005808:	dc15      	bgt.n	8005836 <UART_SetConfig+0x562>
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <UART_SetConfig+0x540>
 800580e:	2b02      	cmp	r3, #2
 8005810:	d005      	beq.n	800581e <UART_SetConfig+0x54a>
 8005812:	e010      	b.n	8005836 <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005814:	f7fe faf0 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8005818:	0003      	movs	r3, r0
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800581c:	e015      	b.n	800584a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800581e:	4b5b      	ldr	r3, [pc, #364]	; (800598c <UART_SetConfig+0x6b8>)
 8005820:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005822:	e012      	b.n	800584a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005824:	f7fe fa5c 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8005828:	0003      	movs	r3, r0
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800582c:	e00d      	b.n	800584a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005834:	e009      	b.n	800584a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800583a:	231a      	movs	r3, #26
 800583c:	2220      	movs	r2, #32
 800583e:	4694      	mov	ip, r2
 8005840:	44bc      	add	ip, r7
 8005842:	4463      	add	r3, ip
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
        break;
 8005848:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	2b00      	cmp	r3, #0
 800584e:	d100      	bne.n	8005852 <UART_SetConfig+0x57e>
 8005850:	e0a7      	b.n	80059a2 <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005856:	4b4e      	ldr	r3, [pc, #312]	; (8005990 <UART_SetConfig+0x6bc>)
 8005858:	0052      	lsls	r2, r2, #1
 800585a:	5ad3      	ldrh	r3, [r2, r3]
 800585c:	0019      	movs	r1, r3
 800585e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005860:	f7fa fc58 	bl	8000114 <__udivsi3>
 8005864:	0003      	movs	r3, r0
 8005866:	005a      	lsls	r2, r3, #1
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	18d2      	adds	r2, r2, r3
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	0019      	movs	r1, r3
 8005876:	0010      	movs	r0, r2
 8005878:	f7fa fc4c 	bl	8000114 <__udivsi3>
 800587c:	0003      	movs	r3, r0
 800587e:	b29b      	uxth	r3, r3
 8005880:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	2b0f      	cmp	r3, #15
 8005886:	d921      	bls.n	80058cc <UART_SetConfig+0x5f8>
 8005888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	025b      	lsls	r3, r3, #9
 800588e:	429a      	cmp	r2, r3
 8005890:	d21c      	bcs.n	80058cc <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	b29a      	uxth	r2, r3
 8005896:	200e      	movs	r0, #14
 8005898:	2420      	movs	r4, #32
 800589a:	193b      	adds	r3, r7, r4
 800589c:	181b      	adds	r3, r3, r0
 800589e:	210f      	movs	r1, #15
 80058a0:	438a      	bics	r2, r1
 80058a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2207      	movs	r2, #7
 80058ac:	4013      	ands	r3, r2
 80058ae:	b299      	uxth	r1, r3
 80058b0:	193b      	adds	r3, r7, r4
 80058b2:	181b      	adds	r3, r3, r0
 80058b4:	193a      	adds	r2, r7, r4
 80058b6:	1812      	adds	r2, r2, r0
 80058b8:	8812      	ldrh	r2, [r2, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	193a      	adds	r2, r7, r4
 80058c4:	1812      	adds	r2, r2, r0
 80058c6:	8812      	ldrh	r2, [r2, #0]
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	e06a      	b.n	80059a2 <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 80058cc:	231a      	movs	r3, #26
 80058ce:	2220      	movs	r2, #32
 80058d0:	4694      	mov	ip, r2
 80058d2:	44bc      	add	ip, r7
 80058d4:	4463      	add	r3, ip
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e062      	b.n	80059a2 <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058dc:	231b      	movs	r3, #27
 80058de:	2220      	movs	r2, #32
 80058e0:	4694      	mov	ip, r2
 80058e2:	44bc      	add	ip, r7
 80058e4:	4463      	add	r3, ip
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d015      	beq.n	8005918 <UART_SetConfig+0x644>
 80058ec:	dc18      	bgt.n	8005920 <UART_SetConfig+0x64c>
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d00d      	beq.n	800590e <UART_SetConfig+0x63a>
 80058f2:	dc15      	bgt.n	8005920 <UART_SetConfig+0x64c>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <UART_SetConfig+0x62a>
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d005      	beq.n	8005908 <UART_SetConfig+0x634>
 80058fc:	e010      	b.n	8005920 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058fe:	f7fe fa7b 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8005902:	0003      	movs	r3, r0
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005906:	e015      	b.n	8005934 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005908:	4b20      	ldr	r3, [pc, #128]	; (800598c <UART_SetConfig+0x6b8>)
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800590c:	e012      	b.n	8005934 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800590e:	f7fe f9e7 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8005912:	0003      	movs	r3, r0
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005916:	e00d      	b.n	8005934 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	021b      	lsls	r3, r3, #8
 800591c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800591e:	e009      	b.n	8005934 <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005924:	231a      	movs	r3, #26
 8005926:	2220      	movs	r2, #32
 8005928:	4694      	mov	ip, r2
 800592a:	44bc      	add	ip, r7
 800592c:	4463      	add	r3, ip
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
        break;
 8005932:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005936:	2b00      	cmp	r3, #0
 8005938:	d033      	beq.n	80059a2 <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800593e:	4b14      	ldr	r3, [pc, #80]	; (8005990 <UART_SetConfig+0x6bc>)
 8005940:	0052      	lsls	r2, r2, #1
 8005942:	5ad3      	ldrh	r3, [r2, r3]
 8005944:	0019      	movs	r1, r3
 8005946:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005948:	f7fa fbe4 	bl	8000114 <__udivsi3>
 800594c:	0003      	movs	r3, r0
 800594e:	001a      	movs	r2, r3
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	18d2      	adds	r2, r2, r3
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	0019      	movs	r1, r3
 800595e:	0010      	movs	r0, r2
 8005960:	f7fa fbd8 	bl	8000114 <__udivsi3>
 8005964:	0003      	movs	r3, r0
 8005966:	b29b      	uxth	r3, r3
 8005968:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	2b0f      	cmp	r3, #15
 800596e:	d911      	bls.n	8005994 <UART_SetConfig+0x6c0>
 8005970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	025b      	lsls	r3, r3, #9
 8005976:	429a      	cmp	r2, r3
 8005978:	d20c      	bcs.n	8005994 <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	e00e      	b.n	80059a2 <UART_SetConfig+0x6ce>
 8005984:	40008000 	.word	0x40008000
 8005988:	40008400 	.word	0x40008400
 800598c:	00f42400 	.word	0x00f42400
 8005990:	08007030 	.word	0x08007030
      }
      else
      {
        ret = HAL_ERROR;
 8005994:	231a      	movs	r3, #26
 8005996:	2220      	movs	r2, #32
 8005998:	4694      	mov	ip, r2
 800599a:	44bc      	add	ip, r7
 800599c:	4463      	add	r3, ip
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	226a      	movs	r2, #106	; 0x6a
 80059a6:	2101      	movs	r1, #1
 80059a8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	2268      	movs	r2, #104	; 0x68
 80059ae:	2101      	movs	r1, #1
 80059b0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	2200      	movs	r2, #0
 80059b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	2200      	movs	r2, #0
 80059bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80059be:	231a      	movs	r3, #26
 80059c0:	2220      	movs	r2, #32
 80059c2:	4694      	mov	ip, r2
 80059c4:	44bc      	add	ip, r7
 80059c6:	4463      	add	r3, ip
 80059c8:	781b      	ldrb	r3, [r3, #0]
}
 80059ca:	0018      	movs	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b010      	add	sp, #64	; 0x40
 80059d0:	bdb0      	pop	{r4, r5, r7, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)

080059d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	2201      	movs	r2, #1
 80059e2:	4013      	ands	r3, r2
 80059e4:	d00b      	beq.n	80059fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4a4a      	ldr	r2, [pc, #296]	; (8005b18 <UART_AdvFeatureConfig+0x144>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	0019      	movs	r1, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	2202      	movs	r2, #2
 8005a04:	4013      	ands	r3, r2
 8005a06:	d00b      	beq.n	8005a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	4a43      	ldr	r2, [pc, #268]	; (8005b1c <UART_AdvFeatureConfig+0x148>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	0019      	movs	r1, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	2204      	movs	r2, #4
 8005a26:	4013      	ands	r3, r2
 8005a28:	d00b      	beq.n	8005a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a3b      	ldr	r2, [pc, #236]	; (8005b20 <UART_AdvFeatureConfig+0x14c>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	0019      	movs	r1, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	2208      	movs	r2, #8
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4a34      	ldr	r2, [pc, #208]	; (8005b24 <UART_AdvFeatureConfig+0x150>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	0019      	movs	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	2210      	movs	r2, #16
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4a2c      	ldr	r2, [pc, #176]	; (8005b28 <UART_AdvFeatureConfig+0x154>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	0019      	movs	r1, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	4a25      	ldr	r2, [pc, #148]	; (8005b2c <UART_AdvFeatureConfig+0x158>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	0019      	movs	r1, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	2240      	movs	r2, #64	; 0x40
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d01d      	beq.n	8005aee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <UART_AdvFeatureConfig+0x15c>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	0019      	movs	r1, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ace:	2380      	movs	r3, #128	; 0x80
 8005ad0:	035b      	lsls	r3, r3, #13
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d10b      	bne.n	8005aee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	4a15      	ldr	r2, [pc, #84]	; (8005b34 <UART_AdvFeatureConfig+0x160>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	0019      	movs	r1, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	4013      	ands	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4a0e      	ldr	r2, [pc, #56]	; (8005b38 <UART_AdvFeatureConfig+0x164>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }
}
 8005b10:	46c0      	nop			; (mov r8, r8)
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b002      	add	sp, #8
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	fffdffff 	.word	0xfffdffff
 8005b1c:	fffeffff 	.word	0xfffeffff
 8005b20:	fffbffff 	.word	0xfffbffff
 8005b24:	ffff7fff 	.word	0xffff7fff
 8005b28:	ffffefff 	.word	0xffffefff
 8005b2c:	ffffdfff 	.word	0xffffdfff
 8005b30:	ffefffff 	.word	0xffefffff
 8005b34:	ff9fffff 	.word	0xff9fffff
 8005b38:	fff7ffff 	.word	0xfff7ffff

08005b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	228c      	movs	r2, #140	; 0x8c
 8005b48:	2100      	movs	r1, #0
 8005b4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b4c:	f7fb fec0 	bl	80018d0 <HAL_GetTick>
 8005b50:	0003      	movs	r3, r0
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d10c      	bne.n	8005b7c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	0391      	lsls	r1, r2, #14
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <UART_CheckIdleState+0x90>)
 8005b6c:	9200      	str	r2, [sp, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f000 f82e 	bl	8005bd0 <UART_WaitOnFlagUntilTimeout>
 8005b74:	1e03      	subs	r3, r0, #0
 8005b76:	d001      	beq.n	8005b7c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e023      	b.n	8005bc4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2204      	movs	r2, #4
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d10c      	bne.n	8005ba4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2280      	movs	r2, #128	; 0x80
 8005b8e:	03d1      	lsls	r1, r2, #15
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <UART_CheckIdleState+0x90>)
 8005b94:	9200      	str	r2, [sp, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f000 f81a 	bl	8005bd0 <UART_WaitOnFlagUntilTimeout>
 8005b9c:	1e03      	subs	r3, r0, #0
 8005b9e:	d001      	beq.n	8005ba4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e00f      	b.n	8005bc4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2284      	movs	r2, #132	; 0x84
 8005ba8:	2120      	movs	r1, #32
 8005baa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2288      	movs	r2, #136	; 0x88
 8005bb0:	2120      	movs	r1, #32
 8005bb2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2280      	movs	r2, #128	; 0x80
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b004      	add	sp, #16
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	01ffffff 	.word	0x01ffffff

08005bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b094      	sub	sp, #80	; 0x50
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	1dfb      	adds	r3, r7, #7
 8005bde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be0:	e0a7      	b.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005be4:	3301      	adds	r3, #1
 8005be6:	d100      	bne.n	8005bea <UART_WaitOnFlagUntilTimeout+0x1a>
 8005be8:	e0a3      	b.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bea:	f7fb fe71 	bl	80018d0 <HAL_GetTick>
 8005bee:	0002      	movs	r2, r0
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d302      	bcc.n	8005c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d13f      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c00:	f3ef 8310 	mrs	r3, PRIMASK
 8005c04:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c08:	647b      	str	r3, [r7, #68]	; 0x44
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	f383 8810 	msr	PRIMASK, r3
}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	494e      	ldr	r1, [pc, #312]	; (8005d5c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005c22:	400a      	ands	r2, r1
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c28:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	f383 8810 	msr	PRIMASK, r3
}
 8005c30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c32:	f3ef 8310 	mrs	r3, PRIMASK
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	f383 8810 	msr	PRIMASK, r3
}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2101      	movs	r1, #1
 8005c54:	438a      	bics	r2, r1
 8005c56:	609a      	str	r2, [r3, #8]
 8005c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5e:	f383 8810 	msr	PRIMASK, r3
}
 8005c62:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2284      	movs	r2, #132	; 0x84
 8005c68:	2120      	movs	r1, #32
 8005c6a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2288      	movs	r2, #136	; 0x88
 8005c70:	2120      	movs	r1, #32
 8005c72:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	2100      	movs	r1, #0
 8005c7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e069      	b.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2204      	movs	r2, #4
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d052      	beq.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	401a      	ands	r2, r3
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d148      	bne.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2280      	movs	r2, #128	; 0x80
 8005ca6:	0112      	lsls	r2, r2, #4
 8005ca8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005caa:	f3ef 8310 	mrs	r3, PRIMASK
 8005cae:	613b      	str	r3, [r7, #16]
  return(result);
 8005cb0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f383 8810 	msr	PRIMASK, r3
}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4924      	ldr	r1, [pc, #144]	; (8005d5c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005ccc:	400a      	ands	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f383 8810 	msr	PRIMASK, r3
}
 8005cda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ce2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	f383 8810 	msr	PRIMASK, r3
}
 8005cf0:	46c0      	nop			; (mov r8, r8)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	438a      	bics	r2, r1
 8005d00:	609a      	str	r2, [r3, #8]
 8005d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	f383 8810 	msr	PRIMASK, r3
}
 8005d0c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2284      	movs	r2, #132	; 0x84
 8005d12:	2120      	movs	r1, #32
 8005d14:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2288      	movs	r2, #136	; 0x88
 8005d1a:	2120      	movs	r1, #32
 8005d1c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	228c      	movs	r2, #140	; 0x8c
 8005d22:	2120      	movs	r1, #32
 8005d24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2280      	movs	r2, #128	; 0x80
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e010      	b.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	425a      	negs	r2, r3
 8005d42:	4153      	adcs	r3, r2
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	001a      	movs	r2, r3
 8005d48:	1dfb      	adds	r3, r7, #7
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d100      	bne.n	8005d52 <UART_WaitOnFlagUntilTimeout+0x182>
 8005d50:	e747      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	0018      	movs	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	b014      	add	sp, #80	; 0x50
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	fffffe5f 	.word	0xfffffe5f

08005d60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b094      	sub	sp, #80	; 0x50
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	1dbb      	adds	r3, r7, #6
 8005d6c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	1dba      	adds	r2, r7, #6
 8005d78:	215c      	movs	r1, #92	; 0x5c
 8005d7a:	8812      	ldrh	r2, [r2, #0]
 8005d7c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1dba      	adds	r2, r7, #6
 8005d82:	215e      	movs	r1, #94	; 0x5e
 8005d84:	8812      	ldrh	r2, [r2, #0]
 8005d86:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	015b      	lsls	r3, r3, #5
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d10d      	bne.n	8005db6 <UART_Start_Receive_IT+0x56>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <UART_Start_Receive_IT+0x4c>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2260      	movs	r2, #96	; 0x60
 8005da6:	496f      	ldr	r1, [pc, #444]	; (8005f64 <UART_Start_Receive_IT+0x204>)
 8005da8:	5299      	strh	r1, [r3, r2]
 8005daa:	e02e      	b.n	8005e0a <UART_Start_Receive_IT+0xaa>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2260      	movs	r2, #96	; 0x60
 8005db0:	21ff      	movs	r1, #255	; 0xff
 8005db2:	5299      	strh	r1, [r3, r2]
 8005db4:	e029      	b.n	8005e0a <UART_Start_Receive_IT+0xaa>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10d      	bne.n	8005dda <UART_Start_Receive_IT+0x7a>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <UART_Start_Receive_IT+0x70>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2260      	movs	r2, #96	; 0x60
 8005dca:	21ff      	movs	r1, #255	; 0xff
 8005dcc:	5299      	strh	r1, [r3, r2]
 8005dce:	e01c      	b.n	8005e0a <UART_Start_Receive_IT+0xaa>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2260      	movs	r2, #96	; 0x60
 8005dd4:	217f      	movs	r1, #127	; 0x7f
 8005dd6:	5299      	strh	r1, [r3, r2]
 8005dd8:	e017      	b.n	8005e0a <UART_Start_Receive_IT+0xaa>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	2380      	movs	r3, #128	; 0x80
 8005de0:	055b      	lsls	r3, r3, #21
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d10d      	bne.n	8005e02 <UART_Start_Receive_IT+0xa2>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <UART_Start_Receive_IT+0x98>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2260      	movs	r2, #96	; 0x60
 8005df2:	217f      	movs	r1, #127	; 0x7f
 8005df4:	5299      	strh	r1, [r3, r2]
 8005df6:	e008      	b.n	8005e0a <UART_Start_Receive_IT+0xaa>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2260      	movs	r2, #96	; 0x60
 8005dfc:	213f      	movs	r1, #63	; 0x3f
 8005dfe:	5299      	strh	r1, [r3, r2]
 8005e00:	e003      	b.n	8005e0a <UART_Start_Receive_IT+0xaa>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2260      	movs	r2, #96	; 0x60
 8005e06:	2100      	movs	r1, #0
 8005e08:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	228c      	movs	r2, #140	; 0x8c
 8005e0e:	2100      	movs	r1, #0
 8005e10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2288      	movs	r2, #136	; 0x88
 8005e16:	2122      	movs	r1, #34	; 0x22
 8005e18:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e24:	2301      	movs	r3, #1
 8005e26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]
 8005e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e46:	f383 8810 	msr	PRIMASK, r3
}
 8005e4a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	059b      	lsls	r3, r3, #22
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d150      	bne.n	8005efa <UART_Start_Receive_IT+0x19a>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2268      	movs	r2, #104	; 0x68
 8005e5c:	5a9b      	ldrh	r3, [r3, r2]
 8005e5e:	1dba      	adds	r2, r7, #6
 8005e60:	8812      	ldrh	r2, [r2, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d349      	bcc.n	8005efa <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	2380      	movs	r3, #128	; 0x80
 8005e6c:	015b      	lsls	r3, r3, #5
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d107      	bne.n	8005e82 <UART_Start_Receive_IT+0x122>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a3a      	ldr	r2, [pc, #232]	; (8005f68 <UART_Start_Receive_IT+0x208>)
 8005e7e:	671a      	str	r2, [r3, #112]	; 0x70
 8005e80:	e002      	b.n	8005e88 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a39      	ldr	r2, [pc, #228]	; (8005f6c <UART_Start_Receive_IT+0x20c>)
 8005e86:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2280      	movs	r2, #128	; 0x80
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e90:	f3ef 8310 	mrs	r3, PRIMASK
 8005e94:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e96:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	f383 8810 	msr	PRIMASK, r3
}
 8005ea4:	46c0      	nop			; (mov r8, r8)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2180      	movs	r1, #128	; 0x80
 8005eb2:	0049      	lsls	r1, r1, #1
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ece:	2301      	movs	r3, #1
 8005ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	f383 8810 	msr	PRIMASK, r3
}
 8005ed8:	46c0      	nop			; (mov r8, r8)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2180      	movs	r1, #128	; 0x80
 8005ee6:	0549      	lsls	r1, r1, #21
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eee:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	f383 8810 	msr	PRIMASK, r3
}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	e02e      	b.n	8005f58 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	2380      	movs	r3, #128	; 0x80
 8005f00:	015b      	lsls	r3, r3, #5
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d107      	bne.n	8005f16 <UART_Start_Receive_IT+0x1b6>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a17      	ldr	r2, [pc, #92]	; (8005f70 <UART_Start_Receive_IT+0x210>)
 8005f12:	671a      	str	r2, [r3, #112]	; 0x70
 8005f14:	e002      	b.n	8005f1c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <UART_Start_Receive_IT+0x214>)
 8005f1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2280      	movs	r2, #128	; 0x80
 8005f20:	2100      	movs	r1, #0
 8005f22:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f24:	f3ef 8310 	mrs	r3, PRIMASK
 8005f28:	613b      	str	r3, [r7, #16]
  return(result);
 8005f2a:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f2e:	2301      	movs	r3, #1
 8005f30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f383 8810 	msr	PRIMASK, r3
}
 8005f38:	46c0      	nop			; (mov r8, r8)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2190      	movs	r1, #144	; 0x90
 8005f46:	0049      	lsls	r1, r1, #1
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f383 8810 	msr	PRIMASK, r3
}
 8005f56:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b014      	add	sp, #80	; 0x50
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	000001ff 	.word	0x000001ff
 8005f68:	080069d9 	.word	0x080069d9
 8005f6c:	080066f5 	.word	0x080066f5
 8005f70:	08006589 	.word	0x08006589
 8005f74:	0800641d 	.word	0x0800641d

08005f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08e      	sub	sp, #56	; 0x38
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f80:	f3ef 8310 	mrs	r3, PRIMASK
 8005f84:	617b      	str	r3, [r7, #20]
  return(result);
 8005f86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f88:	637b      	str	r3, [r7, #52]	; 0x34
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f383 8810 	msr	PRIMASK, r3
}
 8005f94:	46c0      	nop			; (mov r8, r8)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4926      	ldr	r1, [pc, #152]	; (800603c <UART_EndRxTransfer+0xc4>)
 8005fa2:	400a      	ands	r2, r1
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f383 8810 	msr	PRIMASK, r3
}
 8005fb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb6:	623b      	str	r3, [r7, #32]
  return(result);
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fba:	633b      	str	r3, [r7, #48]	; 0x30
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	f383 8810 	msr	PRIMASK, r3
}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	491b      	ldr	r1, [pc, #108]	; (8006040 <UART_EndRxTransfer+0xc8>)
 8005fd4:	400a      	ands	r2, r1
 8005fd6:	609a      	str	r2, [r3, #8]
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	f383 8810 	msr	PRIMASK, r3
}
 8005fe2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d118      	bne.n	800601e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fec:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f383 8810 	msr	PRIMASK, r3
}
 8006000:	46c0      	nop			; (mov r8, r8)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2110      	movs	r1, #16
 800600e:	438a      	bics	r2, r1
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f383 8810 	msr	PRIMASK, r3
}
 800601c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2288      	movs	r2, #136	; 0x88
 8006022:	2120      	movs	r1, #32
 8006024:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	46bd      	mov	sp, r7
 8006036:	b00e      	add	sp, #56	; 0x38
 8006038:	bd80      	pop	{r7, pc}
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	fffffedf 	.word	0xfffffedf
 8006040:	effffffe 	.word	0xeffffffe

08006044 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006050:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	225e      	movs	r2, #94	; 0x5e
 8006056:	2100      	movs	r1, #0
 8006058:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2256      	movs	r2, #86	; 0x56
 800605e:	2100      	movs	r1, #0
 8006060:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	0018      	movs	r0, r3
 8006066:	f7ff f921 	bl	80052ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	b004      	add	sp, #16
 8006070:	bd80      	pop	{r7, pc}

08006072 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b08a      	sub	sp, #40	; 0x28
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2284      	movs	r2, #132	; 0x84
 800607e:	589b      	ldr	r3, [r3, r2]
 8006080:	2b21      	cmp	r3, #33	; 0x21
 8006082:	d14c      	bne.n	800611e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2256      	movs	r2, #86	; 0x56
 8006088:	5a9b      	ldrh	r3, [r3, r2]
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d132      	bne.n	80060f6 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006090:	f3ef 8310 	mrs	r3, PRIMASK
 8006094:	60bb      	str	r3, [r7, #8]
  return(result);
 8006096:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
 800609a:	2301      	movs	r3, #1
 800609c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f383 8810 	msr	PRIMASK, r3
}
 80060a4:	46c0      	nop			; (mov r8, r8)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2180      	movs	r1, #128	; 0x80
 80060b2:	438a      	bics	r2, r1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f383 8810 	msr	PRIMASK, r3
}
 80060c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060c2:	f3ef 8310 	mrs	r3, PRIMASK
 80060c6:	617b      	str	r3, [r7, #20]
  return(result);
 80060c8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060ca:	623b      	str	r3, [r7, #32]
 80060cc:	2301      	movs	r3, #1
 80060ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f383 8810 	msr	PRIMASK, r3
}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2140      	movs	r1, #64	; 0x40
 80060e4:	430a      	orrs	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f383 8810 	msr	PRIMASK, r3
}
 80060f2:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80060f4:	e013      	b.n	800611e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fa:	781a      	ldrb	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2256      	movs	r2, #86	; 0x56
 8006110:	5a9b      	ldrh	r3, [r3, r2]
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b299      	uxth	r1, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2256      	movs	r2, #86	; 0x56
 800611c:	5299      	strh	r1, [r3, r2]
}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	46bd      	mov	sp, r7
 8006122:	b00a      	add	sp, #40	; 0x28
 8006124:	bd80      	pop	{r7, pc}

08006126 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b08c      	sub	sp, #48	; 0x30
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2284      	movs	r2, #132	; 0x84
 8006132:	589b      	ldr	r3, [r3, r2]
 8006134:	2b21      	cmp	r3, #33	; 0x21
 8006136:	d151      	bne.n	80061dc <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2256      	movs	r2, #86	; 0x56
 800613c:	5a9b      	ldrh	r3, [r3, r2]
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d132      	bne.n	80061aa <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006144:	f3ef 8310 	mrs	r3, PRIMASK
 8006148:	60fb      	str	r3, [r7, #12]
  return(result);
 800614a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
 800614e:	2301      	movs	r3, #1
 8006150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f383 8810 	msr	PRIMASK, r3
}
 8006158:	46c0      	nop			; (mov r8, r8)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	438a      	bics	r2, r1
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f383 8810 	msr	PRIMASK, r3
}
 8006174:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006176:	f3ef 8310 	mrs	r3, PRIMASK
 800617a:	61bb      	str	r3, [r7, #24]
  return(result);
 800617c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
 8006180:	2301      	movs	r3, #1
 8006182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f383 8810 	msr	PRIMASK, r3
}
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2140      	movs	r1, #64	; 0x40
 8006198:	430a      	orrs	r2, r1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	f383 8810 	msr	PRIMASK, r3
}
 80061a6:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80061a8:	e018      	b.n	80061dc <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	001a      	movs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	05d2      	lsls	r2, r2, #23
 80061bc:	0dd2      	lsrs	r2, r2, #23
 80061be:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c4:	1c9a      	adds	r2, r3, #2
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2256      	movs	r2, #86	; 0x56
 80061ce:	5a9b      	ldrh	r3, [r3, r2]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b299      	uxth	r1, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2256      	movs	r2, #86	; 0x56
 80061da:	5299      	strh	r1, [r3, r2]
}
 80061dc:	46c0      	nop			; (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	b00c      	add	sp, #48	; 0x30
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08c      	sub	sp, #48	; 0x30
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2284      	movs	r2, #132	; 0x84
 80061f0:	589b      	ldr	r3, [r3, r2]
 80061f2:	2b21      	cmp	r3, #33	; 0x21
 80061f4:	d165      	bne.n	80062c2 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80061f6:	232e      	movs	r3, #46	; 0x2e
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	216a      	movs	r1, #106	; 0x6a
 80061fe:	5a52      	ldrh	r2, [r2, r1]
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	e059      	b.n	80062b8 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2256      	movs	r2, #86	; 0x56
 8006208:	5a9b      	ldrh	r3, [r3, r2]
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d133      	bne.n	8006278 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006210:	f3ef 8310 	mrs	r3, PRIMASK
 8006214:	60fb      	str	r3, [r7, #12]
  return(result);
 8006216:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006218:	62bb      	str	r3, [r7, #40]	; 0x28
 800621a:	2301      	movs	r3, #1
 800621c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f383 8810 	msr	PRIMASK, r3
}
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4926      	ldr	r1, [pc, #152]	; (80062cc <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8006232:	400a      	ands	r2, r1
 8006234:	609a      	str	r2, [r3, #8]
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f383 8810 	msr	PRIMASK, r3
}
 8006240:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006242:	f3ef 8310 	mrs	r3, PRIMASK
 8006246:	61bb      	str	r3, [r7, #24]
  return(result);
 8006248:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
 800624c:	2301      	movs	r3, #1
 800624e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f383 8810 	msr	PRIMASK, r3
}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2140      	movs	r1, #64	; 0x40
 8006264:	430a      	orrs	r2, r1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	f383 8810 	msr	PRIMASK, r3
}
 8006272:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8006274:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8006276:	e024      	b.n	80062c2 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	2280      	movs	r2, #128	; 0x80
 8006280:	4013      	ands	r3, r2
 8006282:	d013      	beq.n	80062ac <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2256      	movs	r2, #86	; 0x56
 800629e:	5a9b      	ldrh	r3, [r3, r2]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b299      	uxth	r1, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2256      	movs	r2, #86	; 0x56
 80062aa:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80062ac:	212e      	movs	r1, #46	; 0x2e
 80062ae:	187b      	adds	r3, r7, r1
 80062b0:	881a      	ldrh	r2, [r3, #0]
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	3a01      	subs	r2, #1
 80062b6:	801a      	strh	r2, [r3, #0]
 80062b8:	232e      	movs	r3, #46	; 0x2e
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1a0      	bne.n	8006204 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b00c      	add	sp, #48	; 0x30
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	ff7fffff 	.word	0xff7fffff

080062d0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08c      	sub	sp, #48	; 0x30
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2284      	movs	r2, #132	; 0x84
 80062dc:	589b      	ldr	r3, [r3, r2]
 80062de:	2b21      	cmp	r3, #33	; 0x21
 80062e0:	d16a      	bne.n	80063b8 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80062e2:	232e      	movs	r3, #46	; 0x2e
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	216a      	movs	r1, #106	; 0x6a
 80062ea:	5a52      	ldrh	r2, [r2, r1]
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e05e      	b.n	80063ae <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2256      	movs	r2, #86	; 0x56
 80062f4:	5a9b      	ldrh	r3, [r3, r2]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d133      	bne.n	8006364 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006300:	60bb      	str	r3, [r7, #8]
  return(result);
 8006302:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
 8006306:	2301      	movs	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f383 8810 	msr	PRIMASK, r3
}
 8006310:	46c0      	nop			; (mov r8, r8)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4928      	ldr	r1, [pc, #160]	; (80063c0 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800631e:	400a      	ands	r2, r1
 8006320:	609a      	str	r2, [r3, #8]
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f383 8810 	msr	PRIMASK, r3
}
 800632c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800632e:	f3ef 8310 	mrs	r3, PRIMASK
 8006332:	617b      	str	r3, [r7, #20]
  return(result);
 8006334:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006336:	623b      	str	r3, [r7, #32]
 8006338:	2301      	movs	r3, #1
 800633a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f383 8810 	msr	PRIMASK, r3
}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2140      	movs	r1, #64	; 0x40
 8006350:	430a      	orrs	r2, r1
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f383 8810 	msr	PRIMASK, r3
}
 800635e:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8006360:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8006362:	e029      	b.n	80063b8 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	2280      	movs	r2, #128	; 0x80
 800636c:	4013      	ands	r3, r2
 800636e:	d018      	beq.n	80063a2 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	001a      	movs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	05d2      	lsls	r2, r2, #23
 8006382:	0dd2      	lsrs	r2, r2, #23
 8006384:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638a:	1c9a      	adds	r2, r3, #2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2256      	movs	r2, #86	; 0x56
 8006394:	5a9b      	ldrh	r3, [r3, r2]
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b299      	uxth	r1, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2256      	movs	r2, #86	; 0x56
 80063a0:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80063a2:	212e      	movs	r1, #46	; 0x2e
 80063a4:	187b      	adds	r3, r7, r1
 80063a6:	881a      	ldrh	r2, [r3, #0]
 80063a8:	187b      	adds	r3, r7, r1
 80063aa:	3a01      	subs	r2, #1
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	232e      	movs	r3, #46	; 0x2e
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d19b      	bne.n	80062f0 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80063b8:	46c0      	nop			; (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b00c      	add	sp, #48	; 0x30
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	ff7fffff 	.word	0xff7fffff

080063c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063cc:	f3ef 8310 	mrs	r3, PRIMASK
 80063d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80063d2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	2301      	movs	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f383 8810 	msr	PRIMASK, r3
}
 80063e0:	46c0      	nop			; (mov r8, r8)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2140      	movs	r1, #64	; 0x40
 80063ee:	438a      	bics	r2, r1
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f383 8810 	msr	PRIMASK, r3
}
 80063fc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2284      	movs	r2, #132	; 0x84
 8006402:	2120      	movs	r1, #32
 8006404:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	0018      	movs	r0, r3
 8006410:	f7fa fc26 	bl	8000c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006414:	46c0      	nop			; (mov r8, r8)
 8006416:	46bd      	mov	sp, r7
 8006418:	b006      	add	sp, #24
 800641a:	bd80      	pop	{r7, pc}

0800641c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b090      	sub	sp, #64	; 0x40
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006424:	203e      	movs	r0, #62	; 0x3e
 8006426:	183b      	adds	r3, r7, r0
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	2160      	movs	r1, #96	; 0x60
 800642c:	5a52      	ldrh	r2, [r2, r1]
 800642e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2288      	movs	r2, #136	; 0x88
 8006434:	589b      	ldr	r3, [r3, r2]
 8006436:	2b22      	cmp	r3, #34	; 0x22
 8006438:	d000      	beq.n	800643c <UART_RxISR_8BIT+0x20>
 800643a:	e097      	b.n	800656c <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006442:	213c      	movs	r1, #60	; 0x3c
 8006444:	187b      	adds	r3, r7, r1
 8006446:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006448:	187b      	adds	r3, r7, r1
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	183b      	adds	r3, r7, r0
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b2d9      	uxtb	r1, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006458:	400a      	ands	r2, r1
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	225e      	movs	r2, #94	; 0x5e
 800646c:	5a9b      	ldrh	r3, [r3, r2]
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b299      	uxth	r1, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	225e      	movs	r2, #94	; 0x5e
 8006478:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	225e      	movs	r2, #94	; 0x5e
 800647e:	5a9b      	ldrh	r3, [r3, r2]
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d000      	beq.n	8006488 <UART_RxISR_8BIT+0x6c>
 8006486:	e079      	b.n	800657c <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006488:	f3ef 8310 	mrs	r3, PRIMASK
 800648c:	61bb      	str	r3, [r7, #24]
  return(result);
 800648e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006490:	63bb      	str	r3, [r7, #56]	; 0x38
 8006492:	2301      	movs	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f383 8810 	msr	PRIMASK, r3
}
 800649c:	46c0      	nop			; (mov r8, r8)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4936      	ldr	r1, [pc, #216]	; (8006584 <UART_RxISR_8BIT+0x168>)
 80064aa:	400a      	ands	r2, r1
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	f383 8810 	msr	PRIMASK, r3
}
 80064b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ba:	f3ef 8310 	mrs	r3, PRIMASK
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c2:	637b      	str	r3, [r7, #52]	; 0x34
 80064c4:	2301      	movs	r3, #1
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	f383 8810 	msr	PRIMASK, r3
}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2101      	movs	r1, #1
 80064dc:	438a      	bics	r2, r1
 80064de:	609a      	str	r2, [r3, #8]
 80064e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	f383 8810 	msr	PRIMASK, r3
}
 80064ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2288      	movs	r2, #136	; 0x88
 80064f0:	2120      	movs	r1, #32
 80064f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d12f      	bne.n	8006562 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006508:	f3ef 8310 	mrs	r3, PRIMASK
 800650c:	60fb      	str	r3, [r7, #12]
  return(result);
 800650e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006510:	633b      	str	r3, [r7, #48]	; 0x30
 8006512:	2301      	movs	r3, #1
 8006514:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f383 8810 	msr	PRIMASK, r3
}
 800651c:	46c0      	nop			; (mov r8, r8)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2110      	movs	r1, #16
 800652a:	438a      	bics	r2, r1
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f383 8810 	msr	PRIMASK, r3
}
 8006538:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	2210      	movs	r2, #16
 8006542:	4013      	ands	r3, r2
 8006544:	2b10      	cmp	r3, #16
 8006546:	d103      	bne.n	8006550 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2210      	movs	r2, #16
 800654e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	225c      	movs	r2, #92	; 0x5c
 8006554:	5a9a      	ldrh	r2, [r3, r2]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	0011      	movs	r1, r2
 800655a:	0018      	movs	r0, r3
 800655c:	f7fe feae 	bl	80052bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006560:	e00c      	b.n	800657c <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	0018      	movs	r0, r3
 8006566:	f7fa fb89 	bl	8000c7c <HAL_UART_RxCpltCallback>
}
 800656a:	e007      	b.n	800657c <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2108      	movs	r1, #8
 8006578:	430a      	orrs	r2, r1
 800657a:	619a      	str	r2, [r3, #24]
}
 800657c:	46c0      	nop			; (mov r8, r8)
 800657e:	46bd      	mov	sp, r7
 8006580:	b010      	add	sp, #64	; 0x40
 8006582:	bd80      	pop	{r7, pc}
 8006584:	fffffedf 	.word	0xfffffedf

08006588 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b090      	sub	sp, #64	; 0x40
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006590:	203e      	movs	r0, #62	; 0x3e
 8006592:	183b      	adds	r3, r7, r0
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	2160      	movs	r1, #96	; 0x60
 8006598:	5a52      	ldrh	r2, [r2, r1]
 800659a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2288      	movs	r2, #136	; 0x88
 80065a0:	589b      	ldr	r3, [r3, r2]
 80065a2:	2b22      	cmp	r3, #34	; 0x22
 80065a4:	d000      	beq.n	80065a8 <UART_RxISR_16BIT+0x20>
 80065a6:	e097      	b.n	80066d8 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ae:	213c      	movs	r1, #60	; 0x3c
 80065b0:	187b      	adds	r3, r7, r1
 80065b2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80065ba:	187b      	adds	r3, r7, r1
 80065bc:	183a      	adds	r2, r7, r0
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	8812      	ldrh	r2, [r2, #0]
 80065c2:	4013      	ands	r3, r2
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ce:	1c9a      	adds	r2, r3, #2
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	225e      	movs	r2, #94	; 0x5e
 80065d8:	5a9b      	ldrh	r3, [r3, r2]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b299      	uxth	r1, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	225e      	movs	r2, #94	; 0x5e
 80065e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	225e      	movs	r2, #94	; 0x5e
 80065ea:	5a9b      	ldrh	r3, [r3, r2]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d000      	beq.n	80065f4 <UART_RxISR_16BIT+0x6c>
 80065f2:	e079      	b.n	80066e8 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065f4:	f3ef 8310 	mrs	r3, PRIMASK
 80065f8:	617b      	str	r3, [r7, #20]
  return(result);
 80065fa:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
 80065fe:	2301      	movs	r3, #1
 8006600:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	f383 8810 	msr	PRIMASK, r3
}
 8006608:	46c0      	nop			; (mov r8, r8)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4936      	ldr	r1, [pc, #216]	; (80066f0 <UART_RxISR_16BIT+0x168>)
 8006616:	400a      	ands	r2, r1
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f383 8810 	msr	PRIMASK, r3
}
 8006624:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006626:	f3ef 8310 	mrs	r3, PRIMASK
 800662a:	623b      	str	r3, [r7, #32]
  return(result);
 800662c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662e:	633b      	str	r3, [r7, #48]	; 0x30
 8006630:	2301      	movs	r3, #1
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	f383 8810 	msr	PRIMASK, r3
}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2101      	movs	r1, #1
 8006648:	438a      	bics	r2, r1
 800664a:	609a      	str	r2, [r3, #8]
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	f383 8810 	msr	PRIMASK, r3
}
 8006656:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2288      	movs	r2, #136	; 0x88
 800665c:	2120      	movs	r1, #32
 800665e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800666a:	2b01      	cmp	r3, #1
 800666c:	d12f      	bne.n	80066ce <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006674:	f3ef 8310 	mrs	r3, PRIMASK
 8006678:	60bb      	str	r3, [r7, #8]
  return(result);
 800667a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800667e:	2301      	movs	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f383 8810 	msr	PRIMASK, r3
}
 8006688:	46c0      	nop			; (mov r8, r8)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2110      	movs	r1, #16
 8006696:	438a      	bics	r2, r1
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f383 8810 	msr	PRIMASK, r3
}
 80066a4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	2210      	movs	r2, #16
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b10      	cmp	r3, #16
 80066b2:	d103      	bne.n	80066bc <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2210      	movs	r2, #16
 80066ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	225c      	movs	r2, #92	; 0x5c
 80066c0:	5a9a      	ldrh	r2, [r3, r2]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	0011      	movs	r1, r2
 80066c6:	0018      	movs	r0, r3
 80066c8:	f7fe fdf8 	bl	80052bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066cc:	e00c      	b.n	80066e8 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	0018      	movs	r0, r3
 80066d2:	f7fa fad3 	bl	8000c7c <HAL_UART_RxCpltCallback>
}
 80066d6:	e007      	b.n	80066e8 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2108      	movs	r1, #8
 80066e4:	430a      	orrs	r2, r1
 80066e6:	619a      	str	r2, [r3, #24]
}
 80066e8:	46c0      	nop			; (mov r8, r8)
 80066ea:	46bd      	mov	sp, r7
 80066ec:	b010      	add	sp, #64	; 0x40
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	fffffedf 	.word	0xfffffedf

080066f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b09c      	sub	sp, #112	; 0x70
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80066fc:	236a      	movs	r3, #106	; 0x6a
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	2160      	movs	r1, #96	; 0x60
 8006704:	5a52      	ldrh	r2, [r2, r1]
 8006706:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2288      	movs	r2, #136	; 0x88
 8006724:	589b      	ldr	r3, [r3, r2]
 8006726:	2b22      	cmp	r3, #34	; 0x22
 8006728:	d000      	beq.n	800672c <UART_RxISR_8BIT_FIFOEN+0x38>
 800672a:	e141      	b.n	80069b0 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800672c:	235e      	movs	r3, #94	; 0x5e
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	2168      	movs	r1, #104	; 0x68
 8006734:	5a52      	ldrh	r2, [r2, r1]
 8006736:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006738:	e0e8      	b.n	800690c <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006740:	215c      	movs	r1, #92	; 0x5c
 8006742:	187b      	adds	r3, r7, r1
 8006744:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006746:	187b      	adds	r3, r7, r1
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	236a      	movs	r3, #106	; 0x6a
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b2d9      	uxtb	r1, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006758:	400a      	ands	r2, r1
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	225e      	movs	r2, #94	; 0x5e
 800676c:	5a9b      	ldrh	r3, [r3, r2]
 800676e:	b29b      	uxth	r3, r3
 8006770:	3b01      	subs	r3, #1
 8006772:	b299      	uxth	r1, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	225e      	movs	r2, #94	; 0x5e
 8006778:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006784:	2207      	movs	r2, #7
 8006786:	4013      	ands	r3, r2
 8006788:	d049      	beq.n	800681e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800678a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678c:	2201      	movs	r2, #1
 800678e:	4013      	ands	r3, r2
 8006790:	d010      	beq.n	80067b4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006792:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006794:	2380      	movs	r3, #128	; 0x80
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	4013      	ands	r3, r2
 800679a:	d00b      	beq.n	80067b4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2201      	movs	r2, #1
 80067a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	228c      	movs	r2, #140	; 0x8c
 80067a8:	589b      	ldr	r3, [r3, r2]
 80067aa:	2201      	movs	r2, #1
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	218c      	movs	r1, #140	; 0x8c
 80067b2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b6:	2202      	movs	r2, #2
 80067b8:	4013      	ands	r3, r2
 80067ba:	d00f      	beq.n	80067dc <UART_RxISR_8BIT_FIFOEN+0xe8>
 80067bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067be:	2201      	movs	r2, #1
 80067c0:	4013      	ands	r3, r2
 80067c2:	d00b      	beq.n	80067dc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2202      	movs	r2, #2
 80067ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	228c      	movs	r2, #140	; 0x8c
 80067d0:	589b      	ldr	r3, [r3, r2]
 80067d2:	2204      	movs	r2, #4
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	218c      	movs	r1, #140	; 0x8c
 80067da:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067de:	2204      	movs	r2, #4
 80067e0:	4013      	ands	r3, r2
 80067e2:	d00f      	beq.n	8006804 <UART_RxISR_8BIT_FIFOEN+0x110>
 80067e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067e6:	2201      	movs	r2, #1
 80067e8:	4013      	ands	r3, r2
 80067ea:	d00b      	beq.n	8006804 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2204      	movs	r2, #4
 80067f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	228c      	movs	r2, #140	; 0x8c
 80067f8:	589b      	ldr	r3, [r3, r2]
 80067fa:	2202      	movs	r2, #2
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	218c      	movs	r1, #140	; 0x8c
 8006802:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	228c      	movs	r2, #140	; 0x8c
 8006808:	589b      	ldr	r3, [r3, r2]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0018      	movs	r0, r3
 8006812:	f7fe fd4b 	bl	80052ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	228c      	movs	r2, #140	; 0x8c
 800681a:	2100      	movs	r1, #0
 800681c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	225e      	movs	r2, #94	; 0x5e
 8006822:	5a9b      	ldrh	r3, [r3, r2]
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d170      	bne.n	800690c <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800682a:	f3ef 8310 	mrs	r3, PRIMASK
 800682e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006832:	65bb      	str	r3, [r7, #88]	; 0x58
 8006834:	2301      	movs	r3, #1
 8006836:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	f383 8810 	msr	PRIMASK, r3
}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	495f      	ldr	r1, [pc, #380]	; (80069c8 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 800684c:	400a      	ands	r2, r1
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006852:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006856:	f383 8810 	msr	PRIMASK, r3
}
 800685a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800685c:	f3ef 8310 	mrs	r3, PRIMASK
 8006860:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006864:	657b      	str	r3, [r7, #84]	; 0x54
 8006866:	2301      	movs	r3, #1
 8006868:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800686a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686c:	f383 8810 	msr	PRIMASK, r3
}
 8006870:	46c0      	nop			; (mov r8, r8)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4953      	ldr	r1, [pc, #332]	; (80069cc <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 800687e:	400a      	ands	r2, r1
 8006880:	609a      	str	r2, [r3, #8]
 8006882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006884:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006888:	f383 8810 	msr	PRIMASK, r3
}
 800688c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2288      	movs	r2, #136	; 0x88
 8006892:	2120      	movs	r1, #32
 8006894:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d12f      	bne.n	8006904 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068aa:	f3ef 8310 	mrs	r3, PRIMASK
 80068ae:	623b      	str	r3, [r7, #32]
  return(result);
 80068b0:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b2:	653b      	str	r3, [r7, #80]	; 0x50
 80068b4:	2301      	movs	r3, #1
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	f383 8810 	msr	PRIMASK, r3
}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2110      	movs	r1, #16
 80068cc:	438a      	bics	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	f383 8810 	msr	PRIMASK, r3
}
 80068da:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	2210      	movs	r2, #16
 80068e4:	4013      	ands	r3, r2
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	d103      	bne.n	80068f2 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2210      	movs	r2, #16
 80068f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	225c      	movs	r2, #92	; 0x5c
 80068f6:	5a9a      	ldrh	r2, [r3, r2]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	0011      	movs	r1, r2
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7fe fcdd 	bl	80052bc <HAL_UARTEx_RxEventCallback>
 8006902:	e003      	b.n	800690c <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	0018      	movs	r0, r3
 8006908:	f7fa f9b8 	bl	8000c7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800690c:	235e      	movs	r3, #94	; 0x5e
 800690e:	18fb      	adds	r3, r7, r3
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d004      	beq.n	8006920 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8006916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006918:	2220      	movs	r2, #32
 800691a:	4013      	ands	r3, r2
 800691c:	d000      	beq.n	8006920 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800691e:	e70c      	b.n	800673a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006920:	204e      	movs	r0, #78	; 0x4e
 8006922:	183b      	adds	r3, r7, r0
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	215e      	movs	r1, #94	; 0x5e
 8006928:	5a52      	ldrh	r2, [r2, r1]
 800692a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800692c:	0001      	movs	r1, r0
 800692e:	187b      	adds	r3, r7, r1
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d044      	beq.n	80069c0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2268      	movs	r2, #104	; 0x68
 800693a:	5a9b      	ldrh	r3, [r3, r2]
 800693c:	187a      	adds	r2, r7, r1
 800693e:	8812      	ldrh	r2, [r2, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d23d      	bcs.n	80069c0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006944:	f3ef 8310 	mrs	r3, PRIMASK
 8006948:	60bb      	str	r3, [r7, #8]
  return(result);
 800694a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800694c:	64bb      	str	r3, [r7, #72]	; 0x48
 800694e:	2301      	movs	r3, #1
 8006950:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f383 8810 	msr	PRIMASK, r3
}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	491a      	ldr	r1, [pc, #104]	; (80069d0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8006966:	400a      	ands	r2, r1
 8006968:	609a      	str	r2, [r3, #8]
 800696a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800696c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f383 8810 	msr	PRIMASK, r3
}
 8006974:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a16      	ldr	r2, [pc, #88]	; (80069d4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800697a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800697c:	f3ef 8310 	mrs	r3, PRIMASK
 8006980:	617b      	str	r3, [r7, #20]
  return(result);
 8006982:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006984:	647b      	str	r3, [r7, #68]	; 0x44
 8006986:	2301      	movs	r3, #1
 8006988:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	f383 8810 	msr	PRIMASK, r3
}
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2120      	movs	r1, #32
 800699e:	430a      	orrs	r2, r1
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f383 8810 	msr	PRIMASK, r3
}
 80069ac:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069ae:	e007      	b.n	80069c0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2108      	movs	r1, #8
 80069bc:	430a      	orrs	r2, r1
 80069be:	619a      	str	r2, [r3, #24]
}
 80069c0:	46c0      	nop			; (mov r8, r8)
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b01c      	add	sp, #112	; 0x70
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	fffffeff 	.word	0xfffffeff
 80069cc:	effffffe 	.word	0xeffffffe
 80069d0:	efffffff 	.word	0xefffffff
 80069d4:	0800641d 	.word	0x0800641d

080069d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b09e      	sub	sp, #120	; 0x78
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80069e0:	2372      	movs	r3, #114	; 0x72
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	2160      	movs	r1, #96	; 0x60
 80069e8:	5a52      	ldrh	r2, [r2, r1]
 80069ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2288      	movs	r2, #136	; 0x88
 8006a08:	589b      	ldr	r3, [r3, r2]
 8006a0a:	2b22      	cmp	r3, #34	; 0x22
 8006a0c:	d000      	beq.n	8006a10 <UART_RxISR_16BIT_FIFOEN+0x38>
 8006a0e:	e141      	b.n	8006c94 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006a10:	2366      	movs	r3, #102	; 0x66
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	2168      	movs	r1, #104	; 0x68
 8006a18:	5a52      	ldrh	r2, [r2, r1]
 8006a1a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a1c:	e0e8      	b.n	8006bf0 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a24:	2164      	movs	r1, #100	; 0x64
 8006a26:	187b      	adds	r3, r7, r1
 8006a28:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	2272      	movs	r2, #114	; 0x72
 8006a34:	18ba      	adds	r2, r7, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	8812      	ldrh	r2, [r2, #0]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a46:	1c9a      	adds	r2, r3, #2
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	225e      	movs	r2, #94	; 0x5e
 8006a50:	5a9b      	ldrh	r3, [r3, r2]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b299      	uxth	r1, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	225e      	movs	r2, #94	; 0x5e
 8006a5c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a68:	2207      	movs	r2, #7
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	d049      	beq.n	8006b02 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a70:	2201      	movs	r2, #1
 8006a72:	4013      	ands	r3, r2
 8006a74:	d010      	beq.n	8006a98 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8006a76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	d00b      	beq.n	8006a98 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2201      	movs	r2, #1
 8006a86:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	228c      	movs	r2, #140	; 0x8c
 8006a8c:	589b      	ldr	r3, [r3, r2]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	218c      	movs	r1, #140	; 0x8c
 8006a96:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	d00f      	beq.n	8006ac0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d00b      	beq.n	8006ac0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2202      	movs	r2, #2
 8006aae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	228c      	movs	r2, #140	; 0x8c
 8006ab4:	589b      	ldr	r3, [r3, r2]
 8006ab6:	2204      	movs	r2, #4
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	218c      	movs	r1, #140	; 0x8c
 8006abe:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	d00f      	beq.n	8006ae8 <UART_RxISR_16BIT_FIFOEN+0x110>
 8006ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aca:	2201      	movs	r2, #1
 8006acc:	4013      	ands	r3, r2
 8006ace:	d00b      	beq.n	8006ae8 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	228c      	movs	r2, #140	; 0x8c
 8006adc:	589b      	ldr	r3, [r3, r2]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	218c      	movs	r1, #140	; 0x8c
 8006ae6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	228c      	movs	r2, #140	; 0x8c
 8006aec:	589b      	ldr	r3, [r3, r2]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f7fe fbd9 	bl	80052ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	228c      	movs	r2, #140	; 0x8c
 8006afe:	2100      	movs	r1, #0
 8006b00:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	225e      	movs	r2, #94	; 0x5e
 8006b06:	5a9b      	ldrh	r3, [r3, r2]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d170      	bne.n	8006bf0 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b12:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b18:	2301      	movs	r3, #1
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1e:	f383 8810 	msr	PRIMASK, r3
}
 8006b22:	46c0      	nop			; (mov r8, r8)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	495f      	ldr	r1, [pc, #380]	; (8006cac <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8006b30:	400a      	ands	r2, r1
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	f383 8810 	msr	PRIMASK, r3
}
 8006b3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b40:	f3ef 8310 	mrs	r3, PRIMASK
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b50:	f383 8810 	msr	PRIMASK, r3
}
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4953      	ldr	r1, [pc, #332]	; (8006cb0 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8006b62:	400a      	ands	r2, r1
 8006b64:	609a      	str	r2, [r3, #8]
 8006b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b68:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6c:	f383 8810 	msr	PRIMASK, r3
}
 8006b70:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2288      	movs	r2, #136	; 0x88
 8006b76:	2120      	movs	r1, #32
 8006b78:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d12f      	bne.n	8006be8 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b96:	657b      	str	r3, [r7, #84]	; 0x54
 8006b98:	2301      	movs	r3, #1
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2110      	movs	r1, #16
 8006bb0:	438a      	bics	r2, r1
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	f383 8810 	msr	PRIMASK, r3
}
 8006bbe:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b10      	cmp	r3, #16
 8006bcc:	d103      	bne.n	8006bd6 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2210      	movs	r2, #16
 8006bd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	225c      	movs	r2, #92	; 0x5c
 8006bda:	5a9a      	ldrh	r2, [r3, r2]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	0011      	movs	r1, r2
 8006be0:	0018      	movs	r0, r3
 8006be2:	f7fe fb6b 	bl	80052bc <HAL_UARTEx_RxEventCallback>
 8006be6:	e003      	b.n	8006bf0 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	0018      	movs	r0, r3
 8006bec:	f7fa f846 	bl	8000c7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bf0:	2366      	movs	r3, #102	; 0x66
 8006bf2:	18fb      	adds	r3, r7, r3
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8006bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	4013      	ands	r3, r2
 8006c00:	d000      	beq.n	8006c04 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8006c02:	e70c      	b.n	8006a1e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c04:	2052      	movs	r0, #82	; 0x52
 8006c06:	183b      	adds	r3, r7, r0
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	215e      	movs	r1, #94	; 0x5e
 8006c0c:	5a52      	ldrh	r2, [r2, r1]
 8006c0e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c10:	0001      	movs	r1, r0
 8006c12:	187b      	adds	r3, r7, r1
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d044      	beq.n	8006ca4 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2268      	movs	r2, #104	; 0x68
 8006c1e:	5a9b      	ldrh	r3, [r3, r2]
 8006c20:	187a      	adds	r2, r7, r1
 8006c22:	8812      	ldrh	r2, [r2, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d23d      	bcs.n	8006ca4 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c28:	f3ef 8310 	mrs	r3, PRIMASK
 8006c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c32:	2301      	movs	r3, #1
 8006c34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f383 8810 	msr	PRIMASK, r3
}
 8006c3c:	46c0      	nop			; (mov r8, r8)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	491a      	ldr	r1, [pc, #104]	; (8006cb4 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8006c4a:	400a      	ands	r2, r1
 8006c4c:	609a      	str	r2, [r3, #8]
 8006c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f383 8810 	msr	PRIMASK, r3
}
 8006c58:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8006c5e:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c60:	f3ef 8310 	mrs	r3, PRIMASK
 8006c64:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c66:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	f383 8810 	msr	PRIMASK, r3
}
 8006c74:	46c0      	nop			; (mov r8, r8)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2120      	movs	r1, #32
 8006c82:	430a      	orrs	r2, r1
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c88:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f383 8810 	msr	PRIMASK, r3
}
 8006c90:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c92:	e007      	b.n	8006ca4 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2108      	movs	r1, #8
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	619a      	str	r2, [r3, #24]
}
 8006ca4:	46c0      	nop			; (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b01e      	add	sp, #120	; 0x78
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	fffffeff 	.word	0xfffffeff
 8006cb0:	effffffe 	.word	0xeffffffe
 8006cb4:	efffffff 	.word	0xefffffff
 8006cb8:	08006589 	.word	0x08006589

08006cbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cc4:	46c0      	nop			; (mov r8, r8)
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b002      	add	sp, #8
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006cd4:	46c0      	nop			; (mov r8, r8)
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b002      	add	sp, #8
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ce4:	46c0      	nop			; (mov r8, r8)
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	b002      	add	sp, #8
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2280      	movs	r2, #128	; 0x80
 8006cf8:	5c9b      	ldrb	r3, [r3, r2]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e027      	b.n	8006d52 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2280      	movs	r2, #128	; 0x80
 8006d06:	2101      	movs	r1, #1
 8006d08:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2284      	movs	r2, #132	; 0x84
 8006d0e:	2124      	movs	r1, #36	; 0x24
 8006d10:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2101      	movs	r1, #1
 8006d26:	438a      	bics	r2, r1
 8006d28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a0b      	ldr	r2, [pc, #44]	; (8006d5c <HAL_UARTEx_DisableFifoMode+0x70>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2284      	movs	r2, #132	; 0x84
 8006d44:	2120      	movs	r1, #32
 8006d46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2280      	movs	r2, #128	; 0x80
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b004      	add	sp, #16
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	dfffffff 	.word	0xdfffffff

08006d60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2280      	movs	r2, #128	; 0x80
 8006d6e:	5c9b      	ldrb	r3, [r3, r2]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e02e      	b.n	8006dd6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2280      	movs	r2, #128	; 0x80
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2284      	movs	r2, #132	; 0x84
 8006d84:	2124      	movs	r1, #36	; 0x24
 8006d86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	438a      	bics	r2, r1
 8006d9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	08d9      	lsrs	r1, r3, #3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	0018      	movs	r0, r3
 8006db8:	f000 f854 	bl	8006e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2284      	movs	r2, #132	; 0x84
 8006dc8:	2120      	movs	r1, #32
 8006dca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2280      	movs	r2, #128	; 0x80
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b004      	add	sp, #16
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2280      	movs	r2, #128	; 0x80
 8006dee:	5c9b      	ldrb	r3, [r3, r2]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e02f      	b.n	8006e58 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2280      	movs	r2, #128	; 0x80
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2284      	movs	r2, #132	; 0x84
 8006e04:	2124      	movs	r1, #36	; 0x24
 8006e06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	438a      	bics	r2, r1
 8006e1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	4a0e      	ldr	r2, [pc, #56]	; (8006e60 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	0019      	movs	r1, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f000 f813 	bl	8006e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2284      	movs	r2, #132	; 0x84
 8006e4a:	2120      	movs	r1, #32
 8006e4c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2280      	movs	r2, #128	; 0x80
 8006e52:	2100      	movs	r1, #0
 8006e54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	0018      	movs	r0, r3
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b004      	add	sp, #16
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	f1ffffff 	.word	0xf1ffffff

08006e64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d108      	bne.n	8006e86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	226a      	movs	r2, #106	; 0x6a
 8006e78:	2101      	movs	r1, #1
 8006e7a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2268      	movs	r2, #104	; 0x68
 8006e80:	2101      	movs	r1, #1
 8006e82:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e84:	e043      	b.n	8006f0e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e86:	260f      	movs	r6, #15
 8006e88:	19bb      	adds	r3, r7, r6
 8006e8a:	2208      	movs	r2, #8
 8006e8c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e8e:	200e      	movs	r0, #14
 8006e90:	183b      	adds	r3, r7, r0
 8006e92:	2208      	movs	r2, #8
 8006e94:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	0e5b      	lsrs	r3, r3, #25
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	240d      	movs	r4, #13
 8006ea2:	193b      	adds	r3, r7, r4
 8006ea4:	2107      	movs	r1, #7
 8006ea6:	400a      	ands	r2, r1
 8006ea8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	0f5b      	lsrs	r3, r3, #29
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	250c      	movs	r5, #12
 8006eb6:	197b      	adds	r3, r7, r5
 8006eb8:	2107      	movs	r1, #7
 8006eba:	400a      	ands	r2, r1
 8006ebc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ebe:	183b      	adds	r3, r7, r0
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	197a      	adds	r2, r7, r5
 8006ec4:	7812      	ldrb	r2, [r2, #0]
 8006ec6:	4914      	ldr	r1, [pc, #80]	; (8006f18 <UARTEx_SetNbDataToProcess+0xb4>)
 8006ec8:	5c8a      	ldrb	r2, [r1, r2]
 8006eca:	435a      	muls	r2, r3
 8006ecc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ece:	197b      	adds	r3, r7, r5
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	4a12      	ldr	r2, [pc, #72]	; (8006f1c <UARTEx_SetNbDataToProcess+0xb8>)
 8006ed4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ed6:	0019      	movs	r1, r3
 8006ed8:	f7f9 f9a6 	bl	8000228 <__divsi3>
 8006edc:	0003      	movs	r3, r0
 8006ede:	b299      	uxth	r1, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	226a      	movs	r2, #106	; 0x6a
 8006ee4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ee6:	19bb      	adds	r3, r7, r6
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	193a      	adds	r2, r7, r4
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	490a      	ldr	r1, [pc, #40]	; (8006f18 <UARTEx_SetNbDataToProcess+0xb4>)
 8006ef0:	5c8a      	ldrb	r2, [r1, r2]
 8006ef2:	435a      	muls	r2, r3
 8006ef4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ef6:	193b      	adds	r3, r7, r4
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <UARTEx_SetNbDataToProcess+0xb8>)
 8006efc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006efe:	0019      	movs	r1, r3
 8006f00:	f7f9 f992 	bl	8000228 <__divsi3>
 8006f04:	0003      	movs	r3, r0
 8006f06:	b299      	uxth	r1, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2268      	movs	r2, #104	; 0x68
 8006f0c:	5299      	strh	r1, [r3, r2]
}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b005      	add	sp, #20
 8006f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	08007048 	.word	0x08007048
 8006f1c:	08007050 	.word	0x08007050

08006f20 <__libc_init_array>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	2600      	movs	r6, #0
 8006f24:	4d0c      	ldr	r5, [pc, #48]	; (8006f58 <__libc_init_array+0x38>)
 8006f26:	4c0d      	ldr	r4, [pc, #52]	; (8006f5c <__libc_init_array+0x3c>)
 8006f28:	1b64      	subs	r4, r4, r5
 8006f2a:	10a4      	asrs	r4, r4, #2
 8006f2c:	42a6      	cmp	r6, r4
 8006f2e:	d109      	bne.n	8006f44 <__libc_init_array+0x24>
 8006f30:	2600      	movs	r6, #0
 8006f32:	f000 f821 	bl	8006f78 <_init>
 8006f36:	4d0a      	ldr	r5, [pc, #40]	; (8006f60 <__libc_init_array+0x40>)
 8006f38:	4c0a      	ldr	r4, [pc, #40]	; (8006f64 <__libc_init_array+0x44>)
 8006f3a:	1b64      	subs	r4, r4, r5
 8006f3c:	10a4      	asrs	r4, r4, #2
 8006f3e:	42a6      	cmp	r6, r4
 8006f40:	d105      	bne.n	8006f4e <__libc_init_array+0x2e>
 8006f42:	bd70      	pop	{r4, r5, r6, pc}
 8006f44:	00b3      	lsls	r3, r6, #2
 8006f46:	58eb      	ldr	r3, [r5, r3]
 8006f48:	4798      	blx	r3
 8006f4a:	3601      	adds	r6, #1
 8006f4c:	e7ee      	b.n	8006f2c <__libc_init_array+0xc>
 8006f4e:	00b3      	lsls	r3, r6, #2
 8006f50:	58eb      	ldr	r3, [r5, r3]
 8006f52:	4798      	blx	r3
 8006f54:	3601      	adds	r6, #1
 8006f56:	e7f2      	b.n	8006f3e <__libc_init_array+0x1e>
 8006f58:	08007060 	.word	0x08007060
 8006f5c:	08007060 	.word	0x08007060
 8006f60:	08007060 	.word	0x08007060
 8006f64:	08007064 	.word	0x08007064

08006f68 <memset>:
 8006f68:	0003      	movs	r3, r0
 8006f6a:	1882      	adds	r2, r0, r2
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d100      	bne.n	8006f72 <memset+0xa>
 8006f70:	4770      	bx	lr
 8006f72:	7019      	strb	r1, [r3, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	e7f9      	b.n	8006f6c <memset+0x4>

08006f78 <_init>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7e:	bc08      	pop	{r3}
 8006f80:	469e      	mov	lr, r3
 8006f82:	4770      	bx	lr

08006f84 <_fini>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8a:	bc08      	pop	{r3}
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	4770      	bx	lr
