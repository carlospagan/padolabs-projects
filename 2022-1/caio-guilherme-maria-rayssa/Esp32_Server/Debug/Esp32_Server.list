
Esp32_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b18  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004bd4  08004bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c64  08004c64  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c6c  08004c6c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08004c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000016c  08004de0  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08004de0  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d40d  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c96  00000000  00000000  0002d5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002fb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a610  00000000  00000000  00030450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbba  00000000  00000000  0004aa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abd55  00000000  00000000  0005661a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010236f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002090  00000000  00000000  001023c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000016c 	.word	0x2000016c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004bbc 	.word	0x08004bbc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000170 	.word	0x20000170
 8000100:	08004bbc 	.word	0x08004bbc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	1c08      	adds	r0, r1, #0
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	1c08      	adds	r0, r1, #0
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_IT(&huart4, &Rx[NB], 1);

}*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	flag_transmit = 0;
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <HAL_UART_TxCpltCallback+0x18>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	2000018d 	.word	0x2000018d

08000648 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	   HAL_UART_Transmit(&huart2, &Rec[conta], 1, 10);
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <HAL_UART_RxCpltCallback+0x70>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	001a      	movs	r2, r3
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <HAL_UART_RxCpltCallback+0x74>)
 8000658:	18d1      	adds	r1, r2, r3
 800065a:	4819      	ldr	r0, [pc, #100]	; (80006c0 <HAL_UART_RxCpltCallback+0x78>)
 800065c:	230a      	movs	r3, #10
 800065e:	2201      	movs	r2, #1
 8000660:	f001 ff54 	bl	800250c <HAL_UART_Transmit>
	                HAL_UART_Receive_IT(&huart4, &Rec[conta], 1);

	        }
*/

	if(Rec[conta]== '>'){
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <HAL_UART_RxCpltCallback+0x70>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	001a      	movs	r2, r3
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_UART_RxCpltCallback+0x74>)
 800066c:	5c9b      	ldrb	r3, [r3, r2]
 800066e:	2b3e      	cmp	r3, #62	; 0x3e
 8000670:	d106      	bne.n	8000680 <HAL_UART_RxCpltCallback+0x38>
		HAL_UART_Receive_IT(&huart4, Dado, 5);
 8000672:	4914      	ldr	r1, [pc, #80]	; (80006c4 <HAL_UART_RxCpltCallback+0x7c>)
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_UART_RxCpltCallback+0x80>)
 8000676:	2205      	movs	r2, #5
 8000678:	0018      	movs	r0, r3
 800067a:	f002 f8af 	bl	80027dc <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&huart4, &Rec[conta], 1);
	}



}
 800067e:	e016      	b.n	80006ae <HAL_UART_RxCpltCallback+0x66>
		conta++;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <HAL_UART_RxCpltCallback+0x70>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <HAL_UART_RxCpltCallback+0x70>)
 800068a:	701a      	strb	r2, [r3, #0]
		if(conta>=buffer)
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_UART_RxCpltCallback+0x70>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b63      	cmp	r3, #99	; 0x63
 8000692:	d902      	bls.n	800069a <HAL_UART_RxCpltCallback+0x52>
				conta=0;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_UART_RxCpltCallback+0x70>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &Rec[conta], 1);
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <HAL_UART_RxCpltCallback+0x70>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	001a      	movs	r2, r3
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_UART_RxCpltCallback+0x74>)
 80006a2:	18d1      	adds	r1, r2, r3
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_UART_RxCpltCallback+0x80>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	0018      	movs	r0, r3
 80006aa:	f002 f897 	bl	80027dc <HAL_UART_Receive_IT>
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	20000188 	.word	0x20000188
 80006bc:	20000190 	.word	0x20000190
 80006c0:	2000028c 	.word	0x2000028c
 80006c4:	20000284 	.word	0x20000284
 80006c8:	200001f4 	.word	0x200001f4

080006cc <Esp_Comandos>:

// Retorna o valor do ultimo byte recebido: se for '>' quer dizer que a comunicação está estabelecida
uint8_t Esp_Comandos(void){
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0

	for(int i=0; i<7;i++){
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	e053      	b.n	8000780 <Esp_Comandos+0xb4>


		flag_transmit = 1;
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <Esp_Comandos+0xcc>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart4, Data_AT[i], strlen(Data_AT[i]));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2232      	movs	r2, #50	; 0x32
 80006e2:	435a      	muls	r2, r3
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <Esp_Comandos+0xd0>)
 80006e6:	18d4      	adds	r4, r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2232      	movs	r2, #50	; 0x32
 80006ec:	435a      	muls	r2, r3
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <Esp_Comandos+0xd0>)
 80006f0:	18d3      	adds	r3, r2, r3
 80006f2:	0018      	movs	r0, r3
 80006f4:	f7ff fd06 	bl	8000104 <strlen>
 80006f8:	0003      	movs	r3, r0
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <Esp_Comandos+0xd4>)
 80006fe:	0021      	movs	r1, r4
 8000700:	0018      	movs	r0, r3
 8000702:	f001 ffaf 	bl	8002664 <HAL_UART_Transmit_IT>
		while(flag_transmit);
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <Esp_Comandos+0xcc>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1fb      	bne.n	8000708 <Esp_Comandos+0x3c>

		conta=0;
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <Esp_Comandos+0xd8>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
		flag_receive = 1;
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <Esp_Comandos+0xdc>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, Rec, 1);
 800071c:	4923      	ldr	r1, [pc, #140]	; (80007ac <Esp_Comandos+0xe0>)
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <Esp_Comandos+0xd4>)
 8000720:	2201      	movs	r2, #1
 8000722:	0018      	movs	r0, r3
 8000724:	f002 f85a 	bl	80027dc <HAL_UART_Receive_IT>
		while(flag_receive)
 8000728:	e01e      	b.n	8000768 <Esp_Comandos+0x9c>
		{
			//HAL_Delay(1);
			if(Rec[conta-1]=='\n')
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <Esp_Comandos+0xd8>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	3b01      	subs	r3, #1
 8000730:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <Esp_Comandos+0xe0>)
 8000732:	5cd3      	ldrb	r3, [r2, r3]
 8000734:	2b0a      	cmp	r3, #10
 8000736:	d117      	bne.n	8000768 <Esp_Comandos+0x9c>
			{
				if(Rec[conta-3]=='K')
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <Esp_Comandos+0xd8>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	3b03      	subs	r3, #3
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <Esp_Comandos+0xe0>)
 8000740:	5cd3      	ldrb	r3, [r2, r3]
 8000742:	2b4b      	cmp	r3, #75	; 0x4b
 8000744:	d103      	bne.n	800074e <Esp_Comandos+0x82>
					flag_receive = 0;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <Esp_Comandos+0xdc>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	e00c      	b.n	8000768 <Esp_Comandos+0x9c>
				else if(Rec[conta-3]=='R')
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <Esp_Comandos+0xd8>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3b03      	subs	r3, #3
 8000754:	4a15      	ldr	r2, [pc, #84]	; (80007ac <Esp_Comandos+0xe0>)
 8000756:	5cd3      	ldrb	r3, [r2, r3]
 8000758:	2b52      	cmp	r3, #82	; 0x52
 800075a:	d105      	bne.n	8000768 <Esp_Comandos+0x9c>
				{
					i--;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
					flag_receive = 0;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <Esp_Comandos+0xdc>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
		while(flag_receive)
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <Esp_Comandos+0xdc>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1dc      	bne.n	800072a <Esp_Comandos+0x5e>
				}
			}
		}
		HAL_Delay(2000);
 8000770:	23fa      	movs	r3, #250	; 0xfa
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fb71 	bl	8000e5c <HAL_Delay>
	for(int i=0; i<7;i++){
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b06      	cmp	r3, #6
 8000784:	dda8      	ble.n	80006d8 <Esp_Comandos+0xc>
	}


	return Rec[conta-1];
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <Esp_Comandos+0xd8>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3b01      	subs	r3, #1
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <Esp_Comandos+0xe0>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]

}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b003      	add	sp, #12
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	2000018d 	.word	0x2000018d
 800079c:	20000000 	.word	0x20000000
 80007a0:	200001f4 	.word	0x200001f4
 80007a4:	20000188 	.word	0x20000188
 80007a8:	2000018c 	.word	0x2000018c
 80007ac:	20000190 	.word	0x20000190

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint8_t Mensagem[] = "teste";
 80007b6:	003b      	movs	r3, r7
 80007b8:	4a25      	ldr	r2, [pc, #148]	; (8000850 <main+0xa0>)
 80007ba:	6811      	ldr	r1, [r2, #0]
 80007bc:	6019      	str	r1, [r3, #0]
 80007be:	8892      	ldrh	r2, [r2, #4]
 80007c0:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fac5 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f84b 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 f929 	bl	8000a20 <MX_GPIO_Init>
  MX_USART4_UART_Init();
 80007ce:	f000 f8f3 	bl	80009b8 <MX_USART4_UART_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 f8a3 	bl	800091c <MX_USART2_UART_Init>


  Entrada = HAL_UART_Receive_IT(&huart4, &Rx[NB], 2)*/;
  //remove_Busy();

  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, 0);
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	00d9      	lsls	r1, r3, #3
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2200      	movs	r2, #0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fe87 	bl	80014f4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80007e6:	23fa      	movs	r3, #250	; 0xfa
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fb36 	bl	8000e5c <HAL_Delay>

  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, 1);
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	00d9      	lsls	r1, r3, #3
 80007f4:	23a0      	movs	r3, #160	; 0xa0
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	2201      	movs	r2, #1
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fe7a 	bl	80014f4 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <main+0xa4>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fb2a 	bl	8000e5c <HAL_Delay>

  if(Esp_Comandos()=='>') // Se estiver conectado com o outro módulo, liga o LED
 8000808:	f7ff ff60 	bl	80006cc <Esp_Comandos>
 800080c:	0003      	movs	r3, r0
 800080e:	2b3e      	cmp	r3, #62	; 0x3e
 8000810:	d106      	bne.n	8000820 <main+0x70>
  {
	  HAL_GPIO_WritePin(LED_PLACA_GPIO_Port, LED_PLACA_Pin, 1);
 8000812:	23a0      	movs	r3, #160	; 0xa0
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	2201      	movs	r2, #1
 8000818:	2120      	movs	r1, #32
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fe6a 	bl	80014f4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (send){
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <main+0xa8>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0fb      	beq.n	8000820 <main+0x70>
		  HAL_UART_Transmit_IT(&huart4, Mensagem, strlen(Mensagem));
 8000828:	003b      	movs	r3, r7
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff fc6a 	bl	8000104 <strlen>
 8000830:	0003      	movs	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	0039      	movs	r1, r7
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <main+0xac>)
 8000838:	0018      	movs	r0, r3
 800083a:	f001 ff13 	bl	8002664 <HAL_UART_Transmit_IT>
		  HAL_Delay(1000);
 800083e:	23fa      	movs	r3, #250	; 0xfa
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fb0a 	bl	8000e5c <HAL_Delay>
		  send = 0;
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <main+0xa8>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
	  if (send){
 800084e:	e7e7      	b.n	8000820 <main+0x70>
 8000850:	08004bd4 	.word	0x08004bd4
 8000854:	00001388 	.word	0x00001388
 8000858:	20000189 	.word	0x20000189
 800085c:	200001f4 	.word	0x200001f4

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b095      	sub	sp, #84	; 0x54
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	2414      	movs	r4, #20
 8000868:	193b      	adds	r3, r7, r4
 800086a:	0018      	movs	r0, r3
 800086c:	233c      	movs	r3, #60	; 0x3c
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f004 f99b 	bl	8004bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	0018      	movs	r0, r3
 800087a:	2310      	movs	r3, #16
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f004 f994 	bl	8004bac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fe51 	bl	8001530 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2202      	movs	r2, #2
 8000892:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	0052      	lsls	r2, r2, #1
 800089a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800089c:	0021      	movs	r1, r4
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2240      	movs	r2, #64	; 0x40
 80008a8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2202      	movs	r2, #2
 80008ae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2202      	movs	r2, #2
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2208      	movs	r2, #8
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0292      	lsls	r2, r2, #10
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0492      	lsls	r2, r2, #18
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	0592      	lsls	r2, r2, #22
 80008d8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fe73 	bl	80015c8 <HAL_RCC_OscConfig>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008e6:	f000 f8fb 	bl	8000ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2202      	movs	r2, #2
 80008f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2102      	movs	r1, #2
 8000906:	0018      	movs	r0, r3
 8000908:	f001 f9c4 	bl	8001c94 <HAL_RCC_ClockConfig>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000910:	f000 f8e6 	bl	8000ae0 <Error_Handler>
  }
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b015      	add	sp, #84	; 0x54
 800091a:	bd90      	pop	{r4, r7, pc}

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000922:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <MX_USART2_UART_Init+0x98>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000928:	22e1      	movs	r2, #225	; 0xe1
 800092a:	02d2      	lsls	r2, r2, #11
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000966:	0018      	movs	r0, r3
 8000968:	f001 fd7a 	bl	8002460 <HAL_UART_Init>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 f8b6 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000976:	2100      	movs	r1, #0
 8000978:	0018      	movs	r0, r3
 800097a:	f004 f813 	bl	80049a4 <HAL_UARTEx_SetTxFifoThreshold>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 f8ad 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 8000988:	2100      	movs	r1, #0
 800098a:	0018      	movs	r0, r3
 800098c:	f004 f84a 	bl	8004a24 <HAL_UARTEx_SetRxFifoThreshold>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000994:	f000 f8a4 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <MX_USART2_UART_Init+0x94>)
 800099a:	0018      	movs	r0, r3
 800099c:	f003 ffc8 	bl	8004930 <HAL_UARTEx_DisableFifoMode>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009a4:	f000 f89c 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	2000028c 	.word	0x2000028c
 80009b4:	40004400 	.word	0x40004400

080009b8 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <MX_USART4_UART_Init+0x64>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009c4:	22e1      	movs	r2, #225	; 0xe1
 80009c6:	0252      	lsls	r2, r2, #9
 80009c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <MX_USART4_UART_Init+0x60>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fd2c 	bl	8002460 <HAL_UART_Init>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f868 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	200001f4 	.word	0x200001f4
 8000a1c:	40004c00 	.word	0x40004c00

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	240c      	movs	r4, #12
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2314      	movs	r3, #20
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f004 f8bb 	bl	8004bac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_GPIO_Init+0xbc>)
 8000a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <MX_GPIO_Init+0xbc>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_GPIO_Init+0xbc>)
 8000a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a46:	2204      	movs	r2, #4
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <MX_GPIO_Init+0xbc>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_GPIO_Init+0xbc>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <MX_GPIO_Init+0xbc>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PLACA_GPIO_Port, LED_PLACA_Pin, GPIO_PIN_RESET);
 8000a66:	23a0      	movs	r3, #160	; 0xa0
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 fd40 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	00d9      	lsls	r1, r3, #3
 8000a78:	23a0      	movs	r3, #160	; 0xa0
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 fd38 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PLACA_Pin */
  GPIO_InitStruct.Pin = LED_PLACA_Pin;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2220      	movs	r2, #32
 8000a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2202      	movs	r2, #2
 8000a9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PLACA_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	193a      	adds	r2, r7, r4
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fbb9 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000aaa:	0021      	movs	r1, r4
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	187a      	adds	r2, r7, r1
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	0011      	movs	r1, r2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 fba4 	bl	800121c <HAL_GPIO_Init>

}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b009      	add	sp, #36	; 0x24
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	40021000 	.word	0x40021000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_MspInit+0x4c>)
 8000af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	2101      	movs	r1, #1
 8000afa:	430a      	orrs	r2, r1
 8000afc:	641a      	str	r2, [r3, #64]	; 0x40
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	2201      	movs	r2, #1
 8000b04:	4013      	ands	r3, r2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	0549      	lsls	r1, r1, #21
 8000b14:	430a      	orrs	r2, r1
 8000b16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	055b      	lsls	r3, r3, #21
 8000b20:	4013      	ands	r3, r2
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000b26:	23c0      	movs	r3, #192	; 0xc0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f9ba 	bl	8000ea4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b09f      	sub	sp, #124	; 0x7c
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	2364      	movs	r3, #100	; 0x64
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	0018      	movs	r0, r3
 8000b4a:	2314      	movs	r3, #20
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f004 f82c 	bl	8004bac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	2418      	movs	r4, #24
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	234c      	movs	r3, #76	; 0x4c
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f004 f824 	bl	8004bac <memset>
  if(huart->Instance==USART2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a46      	ldr	r2, [pc, #280]	; (8000c84 <HAL_UART_MspInit+0x148>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d147      	bne.n	8000bfe <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2202      	movs	r2, #2
 8000b72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f001 fa33 	bl	8001fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b86:	f7ff ffab 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8a:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b8e:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	0289      	lsls	r1, r1, #10
 8000b94:	430a      	orrs	r2, r1
 8000b96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b98:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	029b      	lsls	r3, r3, #10
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000baa:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bbe:	2164      	movs	r1, #100	; 0x64
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2202      	movs	r2, #2
 8000bca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2201      	movs	r2, #1
 8000bdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	187a      	adds	r2, r7, r1
 8000be0:	23a0      	movs	r3, #160	; 0xa0
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	0011      	movs	r1, r2
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fb18 	bl	800121c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	201c      	movs	r0, #28
 8000bf2:	f000 fa19 	bl	8001028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000bf6:	201c      	movs	r0, #28
 8000bf8:	f000 fa2b 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000bfc:	e03d      	b.n	8000c7a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART4)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <HAL_UART_MspInit+0x150>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d138      	bne.n	8000c7a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	0309      	lsls	r1, r1, #12
 8000c12:	430a      	orrs	r2, r1
 8000c14:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	031b      	lsls	r3, r3, #12
 8000c1e:	4013      	ands	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_UART_MspInit+0x14c>)
 8000c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c34:	2201      	movs	r2, #1
 8000c36:	4013      	ands	r3, r2
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c3c:	2164      	movs	r1, #100	; 0x64
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2203      	movs	r2, #3
 8000c42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2202      	movs	r2, #2
 8000c48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2204      	movs	r2, #4
 8000c5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	187a      	adds	r2, r7, r1
 8000c5e:	23a0      	movs	r3, #160	; 0xa0
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 fad9 	bl	800121c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	201d      	movs	r0, #29
 8000c70:	f000 f9da 	bl	8001028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8000c74:	201d      	movs	r0, #29
 8000c76:	f000 f9ec 	bl	8001052 <HAL_NVIC_EnableIRQ>
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b01f      	add	sp, #124	; 0x7c
 8000c80:	bd90      	pop	{r4, r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40004400 	.word	0x40004400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40004c00 	.word	0x40004c00

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f8b6 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <USART2_LPUART2_IRQHandler+0x14>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f001 fdf8 	bl	80028bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	2000028c 	.word	0x2000028c

08000cd8 <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f001 fdec 	bl	80028bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	200001f4 	.word	0x200001f4

08000cf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d00:	f7ff fff6 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	; (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	; (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d2a:	f003 ff1b 	bl	8004b64 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d2e:	f7ff fd3f 	bl	80007b0 <main>

08000d32 <LoopForever>:

LoopForever:
  b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   r0, =_estack
 8000d34:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8000d40:	08004c74 	.word	0x08004c74
  ldr r2, =_sbss
 8000d44:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8000d48:	20000320 	.word	0x20000320

08000d4c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_COMP_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_Init+0x3c>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_Init+0x3c>)
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	0049      	lsls	r1, r1, #1
 8000d66:	430a      	orrs	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f810 	bl	8000d90 <HAL_InitTick>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e001      	b.n	8000d80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff feb6 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	781b      	ldrb	r3, [r3, #0]
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40022000 	.word	0x40022000

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d98:	230f      	movs	r3, #15
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_InitTick+0x88>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d02b      	beq.n	8000e00 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <HAL_InitTick+0x8c>)
 8000daa:	681c      	ldr	r4, [r3, #0]
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <HAL_InitTick+0x88>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	0019      	movs	r1, r3
 8000db2:	23fa      	movs	r3, #250	; 0xfa
 8000db4:	0098      	lsls	r0, r3, #2
 8000db6:	f7ff f9ad 	bl	8000114 <__udivsi3>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	f7ff f9a8 	bl	8000114 <__udivsi3>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 f953 	bl	8001072 <HAL_SYSTICK_Config>
 8000dcc:	1e03      	subs	r3, r0, #0
 8000dce:	d112      	bne.n	8000df6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d80a      	bhi.n	8000dec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	425b      	negs	r3, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 f922 	bl	8001028 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_InitTick+0x90>)
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e00d      	b.n	8000e08 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dec:	230f      	movs	r3, #15
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e008      	b.n	8000e08 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df6:	230f      	movs	r3, #15
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e003      	b.n	8000e08 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e00:	230f      	movs	r3, #15
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	781b      	ldrb	r3, [r3, #0]
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b005      	add	sp, #20
 8000e14:	bd90      	pop	{r4, r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	20000168 	.word	0x20000168
 8000e1c:	20000160 	.word	0x20000160
 8000e20:	20000164 	.word	0x20000164

08000e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_IncTick+0x1c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_IncTick+0x20>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	18d2      	adds	r2, r2, r3
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_IncTick+0x20>)
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	20000168 	.word	0x20000168
 8000e44:	2000031c 	.word	0x2000031c

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	; (8000e58 <HAL_GetTick+0x10>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	2000031c 	.word	0x2000031c

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff fff0 	bl	8000e48 <HAL_GetTick>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3301      	adds	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_Delay+0x44>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	189b      	adds	r3, r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	f7ff ffe0 	bl	8000e48 <HAL_GetTick>
 8000e88:	0002      	movs	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b004      	add	sp, #16
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	20000168 	.word	0x20000168

08000ea4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	fffff9ff 	.word	0xfffff9ff

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee2:	d809      	bhi.n	8000ef8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	001a      	movs	r2, r3
 8000eea:	231f      	movs	r3, #31
 8000eec:	401a      	ands	r2, r3
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_EnableIRQ+0x30>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4091      	lsls	r1, r2
 8000ef4:	000a      	movs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b002      	add	sp, #8
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b7f      	cmp	r3, #127	; 0x7f
 8000f18:	d828      	bhi.n	8000f6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <__NVIC_SetPriority+0xd4>)
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	33c0      	adds	r3, #192	; 0xc0
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	589b      	ldr	r3, [r3, r2]
 8000f2a:	1dfa      	adds	r2, r7, #7
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	0011      	movs	r1, r2
 8000f30:	2203      	movs	r2, #3
 8000f32:	400a      	ands	r2, r1
 8000f34:	00d2      	lsls	r2, r2, #3
 8000f36:	21ff      	movs	r1, #255	; 0xff
 8000f38:	4091      	lsls	r1, r2
 8000f3a:	000a      	movs	r2, r1
 8000f3c:	43d2      	mvns	r2, r2
 8000f3e:	401a      	ands	r2, r3
 8000f40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	019b      	lsls	r3, r3, #6
 8000f46:	22ff      	movs	r2, #255	; 0xff
 8000f48:	401a      	ands	r2, r3
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	0018      	movs	r0, r3
 8000f50:	2303      	movs	r3, #3
 8000f52:	4003      	ands	r3, r0
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f58:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <__NVIC_SetPriority+0xd4>)
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	430a      	orrs	r2, r1
 8000f64:	33c0      	adds	r3, #192	; 0xc0
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f6a:	e031      	b.n	8000fd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <__NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	0019      	movs	r1, r3
 8000f74:	230f      	movs	r3, #15
 8000f76:	400b      	ands	r3, r1
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	18d3      	adds	r3, r2, r3
 8000f82:	3304      	adds	r3, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1dfa      	adds	r2, r7, #7
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	400a      	ands	r2, r1
 8000f90:	00d2      	lsls	r2, r2, #3
 8000f92:	21ff      	movs	r1, #255	; 0xff
 8000f94:	4091      	lsls	r1, r2
 8000f96:	000a      	movs	r2, r1
 8000f98:	43d2      	mvns	r2, r2
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	22ff      	movs	r2, #255	; 0xff
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	0018      	movs	r0, r3
 8000fac:	2303      	movs	r3, #3
 8000fae:	4003      	ands	r3, r0
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb4:	4809      	ldr	r0, [pc, #36]	; (8000fdc <__NVIC_SetPriority+0xd8>)
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	001c      	movs	r4, r3
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	4023      	ands	r3, r4
 8000fc0:	3b08      	subs	r3, #8
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	3306      	adds	r3, #6
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	18c3      	adds	r3, r0, r3
 8000fcc:	3304      	adds	r3, #4
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b003      	add	sp, #12
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	045b      	lsls	r3, r3, #17
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d301      	bcc.n	8000ff8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e010      	b.n	800101a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <SysTick_Config+0x44>)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	3a01      	subs	r2, #1
 8000ffe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001000:	2301      	movs	r3, #1
 8001002:	425b      	negs	r3, r3
 8001004:	2103      	movs	r1, #3
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff ff7c 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x44>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x44>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	0018      	movs	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	210f      	movs	r1, #15
 8001034:	187b      	adds	r3, r7, r1
 8001036:	1c02      	adds	r2, r0, #0
 8001038:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	187b      	adds	r3, r7, r1
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b25b      	sxtb	r3, r3
 8001042:	0011      	movs	r1, r2
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	0002      	movs	r2, r0
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b25b      	sxtb	r3, r3
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff33 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ffaf 	bl	8000fe0 <SysTick_Config>
 8001082:	0003      	movs	r3, r0
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e04f      	b.n	800113e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2225      	movs	r2, #37	; 0x25
 80010a2:	5c9b      	ldrb	r3, [r3, r2]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d008      	beq.n	80010bc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2204      	movs	r2, #4
 80010ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2224      	movs	r2, #36	; 0x24
 80010b4:	2100      	movs	r1, #0
 80010b6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e040      	b.n	800113e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	210e      	movs	r1, #14
 80010c8:	438a      	bics	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d6:	491c      	ldr	r1, [pc, #112]	; (8001148 <HAL_DMA_Abort+0xbc>)
 80010d8:	400a      	ands	r2, r1
 80010da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2101      	movs	r1, #1
 80010e8:	438a      	bics	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	221c      	movs	r2, #28
 80010f2:	401a      	ands	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	2101      	movs	r1, #1
 80010fa:	4091      	lsls	r1, r2
 80010fc:	000a      	movs	r2, r1
 80010fe:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001108:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00c      	beq.n	800112c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111c:	490a      	ldr	r1, [pc, #40]	; (8001148 <HAL_DMA_Abort+0xbc>)
 800111e:	400a      	ands	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800112a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2225      	movs	r2, #37	; 0x25
 8001130:	2101      	movs	r1, #1
 8001132:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2224      	movs	r2, #36	; 0x24
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	0018      	movs	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	fffffeff 	.word	0xfffffeff

0800114c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001154:	210f      	movs	r1, #15
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2225      	movs	r2, #37	; 0x25
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d006      	beq.n	8001176 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2204      	movs	r2, #4
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e048      	b.n	8001208 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	210e      	movs	r1, #14
 8001182:	438a      	bics	r2, r1
 8001184:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	438a      	bics	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a0:	491d      	ldr	r1, [pc, #116]	; (8001218 <HAL_DMA_Abort_IT+0xcc>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	221c      	movs	r2, #28
 80011ac:	401a      	ands	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	2101      	movs	r1, #1
 80011b4:	4091      	lsls	r1, r2
 80011b6:	000a      	movs	r2, r1
 80011b8:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00c      	beq.n	80011e6 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d6:	4910      	ldr	r1, [pc, #64]	; (8001218 <HAL_DMA_Abort_IT+0xcc>)
 80011d8:	400a      	ands	r2, r1
 80011da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2225      	movs	r2, #37	; 0x25
 80011ea:	2101      	movs	r1, #1
 80011ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2224      	movs	r2, #36	; 0x24
 80011f2:	2100      	movs	r1, #0
 80011f4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d004      	beq.n	8001208 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	0010      	movs	r0, r2
 8001206:	4798      	blx	r3
    }
  }
  return status;
 8001208:	230f      	movs	r3, #15
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	781b      	ldrb	r3, [r3, #0]
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	fffffeff 	.word	0xfffffeff

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e14d      	b.n	80014c8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <HAL_GPIO_Init+0x28>
 8001242:	e13e      	b.n	80014c2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	2b01      	cmp	r3, #1
 800124e:	d005      	beq.n	800125c <HAL_GPIO_Init+0x40>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	4013      	ands	r3, r2
 8001258:	2b02      	cmp	r3, #2
 800125a:	d130      	bne.n	80012be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	409a      	lsls	r2, r3
 800126a:	0013      	movs	r3, r2
 800126c:	43da      	mvns	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001292:	2201      	movs	r2, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	2201      	movs	r2, #1
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2203      	movs	r2, #3
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d017      	beq.n	80012fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2203      	movs	r2, #3
 8001300:	4013      	ands	r3, r2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d123      	bne.n	800134e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	58d3      	ldr	r3, [r2, r3]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2207      	movs	r2, #7
 8001318:	4013      	ands	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2107      	movs	r1, #7
 8001332:	400b      	ands	r3, r1
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	08da      	lsrs	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3208      	adds	r2, #8
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	6939      	ldr	r1, [r7, #16]
 800134c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2203      	movs	r2, #3
 800136c:	401a      	ands	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	23c0      	movs	r3, #192	; 0xc0
 8001388:	029b      	lsls	r3, r3, #10
 800138a:	4013      	ands	r3, r2
 800138c:	d100      	bne.n	8001390 <HAL_GPIO_Init+0x174>
 800138e:	e098      	b.n	80014c2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001390:	4a53      	ldr	r2, [pc, #332]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3318      	adds	r3, #24
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	589b      	ldr	r3, [r3, r2]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2203      	movs	r2, #3
 80013a2:	4013      	ands	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	220f      	movs	r2, #15
 80013a8:	409a      	lsls	r2, r3
 80013aa:	0013      	movs	r3, r2
 80013ac:	43da      	mvns	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	23a0      	movs	r3, #160	; 0xa0
 80013b8:	05db      	lsls	r3, r3, #23
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d019      	beq.n	80013f2 <HAL_GPIO_Init+0x1d6>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a48      	ldr	r2, [pc, #288]	; (80014e4 <HAL_GPIO_Init+0x2c8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x1d2>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a47      	ldr	r2, [pc, #284]	; (80014e8 <HAL_GPIO_Init+0x2cc>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x1ce>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a46      	ldr	r2, [pc, #280]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x1ca>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a45      	ldr	r2, [pc, #276]	; (80014f0 <HAL_GPIO_Init+0x2d4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x1c6>
 80013de:	2304      	movs	r3, #4
 80013e0:	e008      	b.n	80013f4 <HAL_GPIO_Init+0x1d8>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x1d8>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x1d8>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x1d8>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x1d8>
 80013f2:	2300      	movs	r3, #0
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	2103      	movs	r1, #3
 80013f8:	400a      	ands	r2, r1
 80013fa:	00d2      	lsls	r2, r2, #3
 80013fc:	4093      	lsls	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001404:	4936      	ldr	r1, [pc, #216]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3318      	adds	r3, #24
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001412:	4a33      	ldr	r2, [pc, #204]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	58d3      	ldr	r3, [r2, r3]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43da      	mvns	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	025b      	lsls	r3, r3, #9
 800142c:	4013      	ands	r3, r2
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001438:	4929      	ldr	r1, [pc, #164]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001440:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 8001442:	2384      	movs	r3, #132	; 0x84
 8001444:	58d3      	ldr	r3, [r2, r3]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43da      	mvns	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	029b      	lsls	r3, r3, #10
 800145a:	4013      	ands	r3, r2
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001466:	491e      	ldr	r1, [pc, #120]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 8001468:	2284      	movs	r2, #132	; 0x84
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	035b      	lsls	r3, r3, #13
 8001486:	4013      	ands	r3, r2
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43da      	mvns	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	4013      	ands	r3, r2
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	40da      	lsrs	r2, r3
 80014d0:	1e13      	subs	r3, r2, #0
 80014d2:	d000      	beq.n	80014d6 <HAL_GPIO_Init+0x2ba>
 80014d4:	e6aa      	b.n	800122c <HAL_GPIO_Init+0x10>
  }
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b006      	add	sp, #24
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021800 	.word	0x40021800
 80014e4:	50000400 	.word	0x50000400
 80014e8:	50000800 	.word	0x50000800
 80014ec:	50000c00 	.word	0x50000c00
 80014f0:	50001000 	.word	0x50001000

080014f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	0008      	movs	r0, r1
 80014fe:	0011      	movs	r1, r2
 8001500:	1cbb      	adds	r3, r7, #2
 8001502:	1c02      	adds	r2, r0, #0
 8001504:	801a      	strh	r2, [r3, #0]
 8001506:	1c7b      	adds	r3, r7, #1
 8001508:	1c0a      	adds	r2, r1, #0
 800150a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800150c:	1c7b      	adds	r3, r7, #1
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001514:	1cbb      	adds	r3, r7, #2
 8001516:	881a      	ldrh	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800151c:	e003      	b.n	8001526 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800151e:	1cbb      	adds	r3, r7, #2
 8001520:	881a      	ldrh	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800153e:	4013      	ands	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d11f      	bne.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	0013      	movs	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	189b      	adds	r3, r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4912      	ldr	r1, [pc, #72]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001562:	0018      	movs	r0, r3
 8001564:	f7fe fdd6 	bl	8000114 <__udivsi3>
 8001568:	0003      	movs	r3, r0
 800156a:	3301      	adds	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156e:	e008      	b.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3b01      	subs	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	e001      	b.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e009      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	401a      	ands	r2, r3
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	429a      	cmp	r2, r3
 8001592:	d0ed      	beq.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b004      	add	sp, #16
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40007000 	.word	0x40007000
 80015a4:	fffff9ff 	.word	0xfffff9ff
 80015a8:	20000160 	.word	0x20000160
 80015ac:	000f4240 	.word	0x000f4240

080015b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	23e0      	movs	r3, #224	; 0xe0
 80015ba:	01db      	lsls	r3, r3, #7
 80015bc:	4013      	ands	r3, r2
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f000 fb56 	bl	8001c88 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	d100      	bne.n	80015e8 <HAL_RCC_OscConfig+0x20>
 80015e6:	e07d      	b.n	80016e4 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e8:	4bc3      	ldr	r3, [pc, #780]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2238      	movs	r2, #56	; 0x38
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f2:	4bc1      	ldr	r3, [pc, #772]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2203      	movs	r2, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b10      	cmp	r3, #16
 8001600:	d102      	bne.n	8001608 <HAL_RCC_OscConfig+0x40>
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d002      	beq.n	800160e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160e:	4bba      	ldr	r3, [pc, #744]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	029b      	lsls	r3, r3, #10
 8001616:	4013      	ands	r3, r2
 8001618:	d063      	beq.n	80016e2 <HAL_RCC_OscConfig+0x11a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d15f      	bne.n	80016e2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f000 fb30 	bl	8001c88 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_RCC_OscConfig+0x7c>
 8001634:	4bb0      	ldr	r3, [pc, #704]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4baf      	ldr	r3, [pc, #700]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	0249      	lsls	r1, r1, #9
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e020      	b.n	8001686 <HAL_RCC_OscConfig+0xbe>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	02db      	lsls	r3, r3, #11
 800164c:	429a      	cmp	r2, r3
 800164e:	d10e      	bne.n	800166e <HAL_RCC_OscConfig+0xa6>
 8001650:	4ba9      	ldr	r3, [pc, #676]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4ba8      	ldr	r3, [pc, #672]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	02c9      	lsls	r1, r1, #11
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	4ba6      	ldr	r3, [pc, #664]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4ba5      	ldr	r3, [pc, #660]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	0249      	lsls	r1, r1, #9
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e00b      	b.n	8001686 <HAL_RCC_OscConfig+0xbe>
 800166e:	4ba2      	ldr	r3, [pc, #648]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4ba1      	ldr	r3, [pc, #644]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001674:	49a1      	ldr	r1, [pc, #644]	; (80018fc <HAL_RCC_OscConfig+0x334>)
 8001676:	400a      	ands	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	4b9f      	ldr	r3, [pc, #636]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b9e      	ldr	r3, [pc, #632]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001680:	499f      	ldr	r1, [pc, #636]	; (8001900 <HAL_RCC_OscConfig+0x338>)
 8001682:	400a      	ands	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d014      	beq.n	80016b8 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fbdb 	bl	8000e48 <HAL_GetTick>
 8001692:	0003      	movs	r3, r0
 8001694:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fbd6 	bl	8000e48 <HAL_GetTick>
 800169c:	0002      	movs	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e2ee      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016aa:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	029b      	lsls	r3, r3, #10
 80016b2:	4013      	ands	r3, r2
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xd0>
 80016b6:	e015      	b.n	80016e4 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fbc6 	bl	8000e48 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c2:	f7ff fbc1 	bl	8000e48 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e2d9      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d4:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	029b      	lsls	r3, r3, #10
 80016dc:	4013      	ands	r3, r2
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0xfa>
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2202      	movs	r2, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d100      	bne.n	80016f0 <HAL_RCC_OscConfig+0x128>
 80016ee:	e099      	b.n	8001824 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f0:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2238      	movs	r2, #56	; 0x38
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016fa:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2203      	movs	r2, #3
 8001700:	4013      	ands	r3, r2
 8001702:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2b10      	cmp	r3, #16
 8001708:	d102      	bne.n	8001710 <HAL_RCC_OscConfig+0x148>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d002      	beq.n	8001716 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d135      	bne.n	8001782 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001716:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4013      	ands	r3, r2
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x166>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e2ac      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4a74      	ldr	r2, [pc, #464]	; (8001904 <HAL_RCC_OscConfig+0x33c>)
 8001734:	4013      	ands	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	021a      	lsls	r2, r3, #8
 800173e:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d112      	bne.n	8001770 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800174a:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6e      	ldr	r2, [pc, #440]	; (8001908 <HAL_RCC_OscConfig+0x340>)
 8001750:	4013      	ands	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800175e:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0adb      	lsrs	r3, r3, #11
 8001764:	2207      	movs	r2, #7
 8001766:	4013      	ands	r3, r2
 8001768:	4a68      	ldr	r2, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x344>)
 800176a:	40da      	lsrs	r2, r3
 800176c:	4b68      	ldr	r3, [pc, #416]	; (8001910 <HAL_RCC_OscConfig+0x348>)
 800176e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x34c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0018      	movs	r0, r3
 8001776:	f7ff fb0b 	bl	8000d90 <HAL_InitTick>
 800177a:	1e03      	subs	r3, r0, #0
 800177c:	d051      	beq.n	8001822 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e282      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d030      	beq.n	80017ec <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800178a:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a5e      	ldr	r2, [pc, #376]	; (8001908 <HAL_RCC_OscConfig+0x340>)
 8001790:	4013      	ands	r3, r2
 8001792:	0019      	movs	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	0049      	lsls	r1, r1, #1
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb4c 	bl	8000e48 <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b6:	f7ff fb47 	bl	8000e48 <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e25f      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4013      	ands	r3, r2
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <HAL_RCC_OscConfig+0x33c>)
 80017da:	4013      	ands	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	021a      	lsls	r2, r3, #8
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	e01b      	b.n	8001824 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017ec:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017f2:	4949      	ldr	r1, [pc, #292]	; (8001918 <HAL_RCC_OscConfig+0x350>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb26 	bl	8000e48 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fb21 	bl	8000e48 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e239      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4013      	ands	r3, r2
 800181e:	d1f0      	bne.n	8001802 <HAL_RCC_OscConfig+0x23a>
 8001820:	e000      	b.n	8001824 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001822:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2208      	movs	r2, #8
 800182a:	4013      	ands	r3, r2
 800182c:	d047      	beq.n	80018be <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2238      	movs	r2, #56	; 0x38
 8001834:	4013      	ands	r3, r2
 8001836:	2b18      	cmp	r3, #24
 8001838:	d10a      	bne.n	8001850 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	2202      	movs	r2, #2
 8001840:	4013      	ands	r3, r2
 8001842:	d03c      	beq.n	80018be <HAL_RCC_OscConfig+0x2f6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d138      	bne.n	80018be <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e21b      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d019      	beq.n	800188c <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800185a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800185e:	2101      	movs	r1, #1
 8001860:	430a      	orrs	r2, r1
 8001862:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff faf0 	bl	8000e48 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff faeb 	bl	8000e48 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e203      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	2202      	movs	r2, #2
 8001886:	4013      	ands	r3, r2
 8001888:	d0f1      	beq.n	800186e <HAL_RCC_OscConfig+0x2a6>
 800188a:	e018      	b.n	80018be <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800188e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001892:	2101      	movs	r1, #1
 8001894:	438a      	bics	r2, r1
 8001896:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fad6 	bl	8000e48 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a2:	f7ff fad1 	bl	8000e48 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1e9      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80018b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d1f1      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2204      	movs	r2, #4
 80018c4:	4013      	ands	r3, r2
 80018c6:	d100      	bne.n	80018ca <HAL_RCC_OscConfig+0x302>
 80018c8:	e0c6      	b.n	8001a58 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ca:	231f      	movs	r3, #31
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2238      	movs	r2, #56	; 0x38
 80018d8:	4013      	ands	r3, r2
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d11e      	bne.n	800191c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	2202      	movs	r2, #2
 80018e4:	4013      	ands	r3, r2
 80018e6:	d100      	bne.n	80018ea <HAL_RCC_OscConfig+0x322>
 80018e8:	e0b6      	b.n	8001a58 <HAL_RCC_OscConfig+0x490>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d000      	beq.n	80018f4 <HAL_RCC_OscConfig+0x32c>
 80018f2:	e0b1      	b.n	8001a58 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e1c7      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
 80018f8:	40021000 	.word	0x40021000
 80018fc:	fffeffff 	.word	0xfffeffff
 8001900:	fffbffff 	.word	0xfffbffff
 8001904:	ffff80ff 	.word	0xffff80ff
 8001908:	ffffc7ff 	.word	0xffffc7ff
 800190c:	00f42400 	.word	0x00f42400
 8001910:	20000160 	.word	0x20000160
 8001914:	20000164 	.word	0x20000164
 8001918:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800191c:	4bb8      	ldr	r3, [pc, #736]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 800191e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	055b      	lsls	r3, r3, #21
 8001924:	4013      	ands	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x364>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x366>
 800192c:	2300      	movs	r3, #0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d011      	beq.n	8001956 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4bb3      	ldr	r3, [pc, #716]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001936:	4bb2      	ldr	r3, [pc, #712]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0549      	lsls	r1, r1, #21
 800193c:	430a      	orrs	r2, r1
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001940:	4baf      	ldr	r3, [pc, #700]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	055b      	lsls	r3, r3, #21
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800194e:	231f      	movs	r3, #31
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001956:	4bab      	ldr	r3, [pc, #684]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d11a      	bne.n	8001998 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001962:	4ba8      	ldr	r3, [pc, #672]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4ba7      	ldr	r3, [pc, #668]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0049      	lsls	r1, r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001970:	f7ff fa6a 	bl	8000e48 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fa65 	bl	8000e48 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e17d      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198c:	4b9d      	ldr	r3, [pc, #628]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x3e6>
 80019a0:	4b97      	ldr	r3, [pc, #604]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 80019a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019a4:	4b96      	ldr	r3, [pc, #600]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x420>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x408>
 80019b6:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 80019b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ba:	4b91      	ldr	r3, [pc, #580]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 80019bc:	2104      	movs	r1, #4
 80019be:	430a      	orrs	r2, r1
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80019c2:	4b8f      	ldr	r3, [pc, #572]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 80019c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c6:	4b8e      	ldr	r3, [pc, #568]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	430a      	orrs	r2, r1
 80019cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0x420>
 80019d0:	4b8b      	ldr	r3, [pc, #556]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 80019d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019d4:	4b8a      	ldr	r3, [pc, #552]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	438a      	bics	r2, r1
 80019da:	65da      	str	r2, [r3, #92]	; 0x5c
 80019dc:	4b88      	ldr	r3, [pc, #544]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 80019de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019e0:	4b87      	ldr	r3, [pc, #540]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 80019e2:	2104      	movs	r1, #4
 80019e4:	438a      	bics	r2, r1
 80019e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d014      	beq.n	8001a1a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fa2a 	bl	8000e48 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f8:	e009      	b.n	8001a0e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff fa25 	bl	8000e48 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4a80      	ldr	r2, [pc, #512]	; (8001c08 <HAL_RCC_OscConfig+0x640>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e13c      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0e:	4b7c      	ldr	r3, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x432>
 8001a18:	e013      	b.n	8001a42 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa15 	bl	8000e48 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a22:	e009      	b.n	8001a38 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff fa10 	bl	8000e48 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	4a76      	ldr	r2, [pc, #472]	; (8001c08 <HAL_RCC_OscConfig+0x640>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e127      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a38:	4b71      	ldr	r3, [pc, #452]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a42:	231f      	movs	r3, #31
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4b6c      	ldr	r3, [pc, #432]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a50:	4b6b      	ldr	r3, [pc, #428]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001a52:	496e      	ldr	r1, [pc, #440]	; (8001c0c <HAL_RCC_OscConfig+0x644>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d039      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a6a:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b64      	ldr	r3, [pc, #400]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	03c9      	lsls	r1, r1, #15
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f9e6 	bl	8000e48 <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a82:	f7ff f9e1 	bl	8000e48 <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0f9      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a94:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x4ba>
 8001aa0:	e019      	b.n	8001ad6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aa2:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001aa8:	4959      	ldr	r1, [pc, #356]	; (8001c10 <HAL_RCC_OscConfig+0x648>)
 8001aaa:	400a      	ands	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aae:	f7ff f9cb 	bl	8000e48 <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab8:	f7ff f9c6 	bl	8000e48 <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e0de      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001aca:	4b4d      	ldr	r3, [pc, #308]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d100      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x518>
 8001ade:	e0d2      	b.n	8001c86 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae0:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2238      	movs	r2, #56	; 0x38
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d100      	bne.n	8001aee <HAL_RCC_OscConfig+0x526>
 8001aec:	e081      	b.n	8001bf2 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d156      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001afc:	4945      	ldr	r1, [pc, #276]	; (8001c14 <HAL_RCC_OscConfig+0x64c>)
 8001afe:	400a      	ands	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff f9a1 	bl	8000e48 <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff f99c 	bl	8000e48 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0b4      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	049b      	lsls	r3, r3, #18
 8001b26:	4013      	ands	r3, r2
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b2a:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	; (8001c18 <HAL_RCC_OscConfig+0x650>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	431a      	orrs	r2, r3
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5e:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	0449      	lsls	r1, r1, #17
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0549      	lsls	r1, r1, #21
 8001b76:	430a      	orrs	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f965 	bl	8000e48 <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff f960 	bl	8000e48 <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e078      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	049b      	lsls	r3, r3, #18
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x5bc>
 8001ba2:	e070      	b.n	8001c86 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001baa:	491a      	ldr	r1, [pc, #104]	; (8001c14 <HAL_RCC_OscConfig+0x64c>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001bb6:	2103      	movs	r1, #3
 8001bb8:	438a      	bics	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001bc2:	4916      	ldr	r1, [pc, #88]	; (8001c1c <HAL_RCC_OscConfig+0x654>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f93e 	bl	8000e48 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f939 	bl	8000e48 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e051      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	049b      	lsls	r3, r3, #18
 8001bec:	4013      	ands	r3, r2
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x60a>
 8001bf0:	e049      	b.n	8001c86 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d112      	bne.n	8001c20 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e044      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40007000 	.word	0x40007000
 8001c08:	00001388 	.word	0x00001388
 8001c0c:	efffffff 	.word	0xefffffff
 8001c10:	ffbfffff 	.word	0xffbfffff
 8001c14:	feffffff 	.word	0xfeffffff
 8001c18:	11c1808c 	.word	0x11c1808c
 8001c1c:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_RCC_OscConfig+0x6c8>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d126      	bne.n	8001c82 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2270      	movs	r2, #112	; 0x70
 8001c38:	401a      	ands	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d11f      	bne.n	8001c82 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	23fe      	movs	r3, #254	; 0xfe
 8001c46:	01db      	lsls	r3, r3, #7
 8001c48:	401a      	ands	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d116      	bne.n	8001c82 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	23f8      	movs	r3, #248	; 0xf8
 8001c58:	039b      	lsls	r3, r3, #14
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d10e      	bne.n	8001c82 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	23e0      	movs	r3, #224	; 0xe0
 8001c68:	051b      	lsls	r3, r3, #20
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	0f5b      	lsrs	r3, r3, #29
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b008      	add	sp, #32
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0e9      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2207      	movs	r2, #7
 8001cae:	4013      	ands	r3, r2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d91e      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b73      	ldr	r3, [pc, #460]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2207      	movs	r2, #7
 8001cbc:	4393      	bics	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f8be 	bl	8000e48 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd2:	f7ff f8b9 	bl	8000e48 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	4a6a      	ldr	r2, [pc, #424]	; (8001e88 <HAL_RCC_ClockConfig+0x1f4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0ca      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce6:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2207      	movs	r2, #7
 8001cec:	4013      	ands	r3, r2
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2204      	movs	r2, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	d006      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d08:	4b60      	ldr	r3, [pc, #384]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d0e:	21e0      	movs	r1, #224	; 0xe0
 8001d10:	01c9      	lsls	r1, r1, #7
 8001d12:	430a      	orrs	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d16:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4a5d      	ldr	r2, [pc, #372]	; (8001e90 <HAL_RCC_ClockConfig+0x1fc>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4013      	ands	r3, r2
 8001d32:	d057      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	d12b      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e097      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d54:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	049b      	lsls	r3, r3, #18
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d11f      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e08b      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6c:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4013      	ands	r3, r2
 8001d76:	d113      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e07f      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d84:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	2202      	movs	r2, #2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e074      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e06d      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001da0:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2207      	movs	r2, #7
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db4:	f7ff f848 	bl	8000e48 <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbc:	e009      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbe:	f7ff f843 	bl	8000e48 <HAL_GetTick>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	4a2f      	ldr	r2, [pc, #188]	; (8001e88 <HAL_RCC_ClockConfig+0x1f4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e054      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2238      	movs	r2, #56	; 0x38
 8001dd8:	401a      	ands	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d1ec      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2207      	movs	r2, #7
 8001dea:	4013      	ands	r3, r2
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d21e      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2207      	movs	r2, #7
 8001df8:	4393      	bics	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e04:	f7ff f820 	bl	8000e48 <HAL_GetTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e0c:	e009      	b.n	8001e22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0e:	f7ff f81b 	bl	8000e48 <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_RCC_ClockConfig+0x1f4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e02c      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2207      	movs	r2, #7
 8001e28:	4013      	ands	r3, r2
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2204      	movs	r2, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_RCC_ClockConfig+0x200>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e4e:	f000 f829 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e52:	0001      	movs	r1, r0
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_RCC_ClockConfig+0x204>)
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	58d3      	ldr	r3, [r2, r3]
 8001e64:	221f      	movs	r2, #31
 8001e66:	4013      	ands	r3, r2
 8001e68:	000a      	movs	r2, r1
 8001e6a:	40da      	lsrs	r2, r3
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x208>)
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_ClockConfig+0x20c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7fe ff8b 	bl	8000d90 <HAL_InitTick>
 8001e7a:	0003      	movs	r3, r0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40022000 	.word	0x40022000
 8001e88:	00001388 	.word	0x00001388
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	fffff0ff 	.word	0xfffff0ff
 8001e94:	ffff8fff 	.word	0xffff8fff
 8001e98:	08004bdc 	.word	0x08004bdc
 8001e9c:	20000160 	.word	0x20000160
 8001ea0:	20000164 	.word	0x20000164

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eaa:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2238      	movs	r2, #56	; 0x38
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d10f      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001eb4:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0adb      	lsrs	r3, r3, #11
 8001eba:	2207      	movs	r2, #7
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	4835      	ldr	r0, [pc, #212]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eca:	f7fe f923 	bl	8000114 <__udivsi3>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	e05d      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2238      	movs	r2, #56	; 0x38
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee0:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	e054      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2238      	movs	r2, #56	; 0x38
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d138      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ef2:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	2207      	movs	r2, #7
 8001f04:	4013      	ands	r3, r2
 8001f06:	3301      	adds	r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d10d      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	4824      	ldr	r0, [pc, #144]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f14:	f7fe f8fe 	bl	8000114 <__udivsi3>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	227f      	movs	r2, #127	; 0x7f
 8001f24:	4013      	ands	r3, r2
 8001f26:	434b      	muls	r3, r1
 8001f28:	617b      	str	r3, [r7, #20]
        break;
 8001f2a:	e00d      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	481c      	ldr	r0, [pc, #112]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f30:	f7fe f8f0 	bl	8000114 <__udivsi3>
 8001f34:	0003      	movs	r3, r0
 8001f36:	0019      	movs	r1, r3
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	227f      	movs	r2, #127	; 0x7f
 8001f40:	4013      	ands	r3, r2
 8001f42:	434b      	muls	r3, r1
 8001f44:	617b      	str	r3, [r7, #20]
        break;
 8001f46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0f5b      	lsrs	r3, r3, #29
 8001f4e:	2207      	movs	r2, #7
 8001f50:	4013      	ands	r3, r2
 8001f52:	3301      	adds	r3, #1
 8001f54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	6978      	ldr	r0, [r7, #20]
 8001f5a:	f7fe f8db 	bl	8000114 <__udivsi3>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e015      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2238      	movs	r2, #56	; 0x38
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d103      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2238      	movs	r2, #56	; 0x38
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b18      	cmp	r3, #24
 8001f82:	d103      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f84:	23fa      	movs	r3, #250	; 0xfa
 8001f86:	01db      	lsls	r3, r3, #7
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e001      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f90:	693b      	ldr	r3, [r7, #16]
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b006      	add	sp, #24
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	00f42400 	.word	0x00f42400
 8001fa4:	007a1200 	.word	0x007a1200

08001fa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fac:	4b02      	ldr	r3, [pc, #8]	; (8001fb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	20000160 	.word	0x20000160

08001fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fbc:	b5b0      	push	{r4, r5, r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001fc0:	f7ff fff2 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001fc4:	0004      	movs	r4, r0
 8001fc6:	f7ff faf3 	bl	80015b0 <LL_RCC_GetAPB1Prescaler>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	0b1a      	lsrs	r2, r3, #12
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	58d3      	ldr	r3, [r2, r3]
 8001fd4:	221f      	movs	r2, #31
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	40dc      	lsrs	r4, r3
 8001fda:	0023      	movs	r3, r4
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	08004c1c 	.word	0x08004c1c

08001fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ff0:	2313      	movs	r3, #19
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff8:	2312      	movs	r3, #18
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	029b      	lsls	r3, r3, #10
 8002008:	4013      	ands	r3, r2
 800200a:	d100      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800200c:	e0ad      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2011      	movs	r0, #17
 8002010:	183b      	adds	r3, r7, r0
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	055b      	lsls	r3, r3, #21
 800201e:	4013      	ands	r3, r2
 8002020:	d110      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0549      	lsls	r1, r1, #21
 800202c:	430a      	orrs	r2, r1
 800202e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002030:	4b40      	ldr	r3, [pc, #256]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	055b      	lsls	r3, r3, #21
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203e:	183b      	adds	r3, r7, r0
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002044:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0049      	lsls	r1, r1, #1
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002052:	f7fe fef9 	bl	8000e48 <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800205a:	e00b      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7fe fef4 	bl	8000e48 <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d904      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800206a:	2313      	movs	r3, #19
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	2203      	movs	r2, #3
 8002070:	701a      	strb	r2, [r3, #0]
        break;
 8002072:	e005      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002074:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4013      	ands	r3, r2
 800207e:	d0ed      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002080:	2313      	movs	r3, #19
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d15e      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800208a:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800208c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800208e:	23c0      	movs	r3, #192	; 0xc0
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4013      	ands	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d019      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d014      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020a6:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	4a24      	ldr	r2, [pc, #144]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020b0:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	0249      	lsls	r1, r1, #9
 80020ba:	430a      	orrs	r2, r1
 80020bc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020c4:	491e      	ldr	r1, [pc, #120]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d016      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe feb6 	bl	8000e48 <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e0:	e00c      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe feb1 	bl	8000e48 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d904      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020f2:	2313      	movs	r3, #19
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2203      	movs	r2, #3
 80020f8:	701a      	strb	r2, [r3, #0]
            break;
 80020fa:	e004      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	2202      	movs	r2, #2
 8002102:	4013      	ands	r3, r2
 8002104:	d0ed      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002106:	2313      	movs	r3, #19
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002114:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002120:	430a      	orrs	r2, r1
 8002122:	65da      	str	r2, [r3, #92]	; 0x5c
 8002124:	e016      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002126:	2312      	movs	r3, #18
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2213      	movs	r2, #19
 800212c:	18ba      	adds	r2, r7, r2
 800212e:	7812      	ldrb	r2, [r2, #0]
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e00f      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	fffffcff 	.word	0xfffffcff
 8002140:	fffeffff 	.word	0xfffeffff
 8002144:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002148:	2312      	movs	r3, #18
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2213      	movs	r2, #19
 800214e:	18ba      	adds	r2, r7, r2
 8002150:	7812      	ldrb	r2, [r2, #0]
 8002152:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002154:	2311      	movs	r3, #17
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4bb6      	ldr	r3, [pc, #728]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002162:	4bb5      	ldr	r3, [pc, #724]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002164:	49b5      	ldr	r1, [pc, #724]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002166:	400a      	ands	r2, r1
 8002168:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	4013      	ands	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002174:	4bb0      	ldr	r3, [pc, #704]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	2203      	movs	r2, #3
 800217a:	4393      	bics	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4bad      	ldr	r3, [pc, #692]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002184:	430a      	orrs	r2, r1
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2202      	movs	r2, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002192:	4ba9      	ldr	r3, [pc, #676]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	220c      	movs	r2, #12
 8002198:	4393      	bics	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	4ba5      	ldr	r3, [pc, #660]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021a2:	430a      	orrs	r2, r1
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2204      	movs	r2, #4
 80021ac:	4013      	ands	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021b0:	4ba1      	ldr	r3, [pc, #644]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	2230      	movs	r2, #48	; 0x30
 80021b6:	4393      	bics	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	4b9e      	ldr	r3, [pc, #632]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2210      	movs	r2, #16
 80021ca:	4013      	ands	r3, r2
 80021cc:	d009      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ce:	4b9a      	ldr	r3, [pc, #616]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	4a9b      	ldr	r2, [pc, #620]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	4b96      	ldr	r3, [pc, #600]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	015b      	lsls	r3, r3, #5
 80021ea:	4013      	ands	r3, r2
 80021ec:	d009      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80021ee:	4b92      	ldr	r3, [pc, #584]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	4a94      	ldr	r2, [pc, #592]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	4b8e      	ldr	r3, [pc, #568]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021fe:	430a      	orrs	r2, r1
 8002200:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4013      	ands	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220e:	4b8a      	ldr	r3, [pc, #552]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	4a8d      	ldr	r2, [pc, #564]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800221c:	4b86      	ldr	r3, [pc, #536]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800221e:	430a      	orrs	r2, r1
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4013      	ands	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800222e:	4b82      	ldr	r3, [pc, #520]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	4a86      	ldr	r2, [pc, #536]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002234:	4013      	ands	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223c:	4b7e      	ldr	r3, [pc, #504]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800223e:	430a      	orrs	r2, r1
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2220      	movs	r2, #32
 8002248:	4013      	ands	r3, r2
 800224a:	d009      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224c:	4b7a      	ldr	r3, [pc, #488]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	4a7f      	ldr	r2, [pc, #508]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	4b77      	ldr	r3, [pc, #476]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800225c:	430a      	orrs	r2, r1
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2240      	movs	r2, #64	; 0x40
 8002266:	4013      	ands	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800226a:	4b73      	ldr	r3, [pc, #460]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	4a79      	ldr	r2, [pc, #484]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002270:	4013      	ands	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800227a:	430a      	orrs	r2, r1
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	01db      	lsls	r3, r3, #7
 8002286:	4013      	ands	r3, r2
 8002288:	d015      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800228a:	4b6b      	ldr	r3, [pc, #428]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	0899      	lsrs	r1, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002296:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002298:	430a      	orrs	r2, r1
 800229a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	05db      	lsls	r3, r3, #23
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d106      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022a8:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	4b62      	ldr	r3, [pc, #392]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	0249      	lsls	r1, r1, #9
 80022b2:	430a      	orrs	r2, r1
 80022b4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	031b      	lsls	r3, r3, #12
 80022be:	4013      	ands	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	2240      	movs	r2, #64	; 0x40
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d0:	4b59      	ldr	r3, [pc, #356]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022d2:	430a      	orrs	r2, r1
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	039b      	lsls	r3, r3, #14
 80022de:	4013      	ands	r3, r2
 80022e0:	d016      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022e2:	4b55      	ldr	r3, [pc, #340]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	4a5c      	ldr	r2, [pc, #368]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f0:	4b51      	ldr	r3, [pc, #324]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	03db      	lsls	r3, r3, #15
 80022fe:	429a      	cmp	r2, r3
 8002300:	d106      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002302:	4b4d      	ldr	r3, [pc, #308]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0449      	lsls	r1, r1, #17
 800230c:	430a      	orrs	r2, r1
 800230e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	03db      	lsls	r3, r3, #15
 8002318:	4013      	ands	r3, r2
 800231a:	d016      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800231c:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	4a4e      	ldr	r2, [pc, #312]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002322:	4013      	ands	r3, r2
 8002324:	0019      	movs	r1, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800232c:	430a      	orrs	r2, r1
 800232e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	045b      	lsls	r3, r3, #17
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800233c:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0449      	lsls	r1, r1, #17
 8002346:	430a      	orrs	r2, r1
 8002348:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	4013      	ands	r3, r2
 8002354:	d014      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002356:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	2203      	movs	r2, #3
 800235c:	4393      	bics	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002366:	430a      	orrs	r2, r1
 8002368:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d106      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002372:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	4b30      	ldr	r3, [pc, #192]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	0249      	lsls	r1, r1, #9
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	019b      	lsls	r3, r3, #6
 8002388:	4013      	ands	r3, r2
 800238a:	d014      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800238c:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	220c      	movs	r2, #12
 8002392:	4393      	bics	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800239a:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800239c:	430a      	orrs	r2, r1
 800239e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d106      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023a8:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	0249      	lsls	r1, r1, #9
 80023b2:	430a      	orrs	r2, r1
 80023b4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	045b      	lsls	r3, r3, #17
 80023be:	4013      	ands	r3, r2
 80023c0:	d016      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	019b      	lsls	r3, r3, #6
 80023de:	429a      	cmp	r2, r3
 80023e0:	d106      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	0449      	lsls	r1, r1, #17
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	049b      	lsls	r3, r3, #18
 80023f8:	4013      	ands	r3, r2
 80023fa:	d016      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	4a10      	ldr	r2, [pc, #64]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002402:	4013      	ands	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800240c:	430a      	orrs	r2, r1
 800240e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	429a      	cmp	r2, r3
 800241a:	d106      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	0449      	lsls	r1, r1, #17
 8002426:	430a      	orrs	r2, r1
 8002428:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800242a:	2312      	movs	r3, #18
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	781b      	ldrb	r3, [r3, #0]
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b006      	add	sp, #24
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	efffffff 	.word	0xefffffff
 8002440:	fffff3ff 	.word	0xfffff3ff
 8002444:	fffffcff 	.word	0xfffffcff
 8002448:	fff3ffff 	.word	0xfff3ffff
 800244c:	ffcfffff 	.word	0xffcfffff
 8002450:	ffffcfff 	.word	0xffffcfff
 8002454:	ffff3fff 	.word	0xffff3fff
 8002458:	ffbfffff 	.word	0xffbfffff
 800245c:	feffffff 	.word	0xfeffffff

08002460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e046      	b.n	8002500 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2284      	movs	r2, #132	; 0x84
 8002476:	589b      	ldr	r3, [r3, r2]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d107      	bne.n	800248c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	2100      	movs	r1, #0
 8002482:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0018      	movs	r0, r3
 8002488:	f7fe fb58 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2284      	movs	r2, #132	; 0x84
 8002490:	2124      	movs	r1, #36	; 0x24
 8002492:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	438a      	bics	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 fd36 	bl	8002f18 <UART_SetConfig>
 80024ac:	0003      	movs	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e024      	b.n	8002500 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f001 f8a9 	bl	8003618 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	490d      	ldr	r1, [pc, #52]	; (8002508 <HAL_UART_Init+0xa8>)
 80024d2:	400a      	ands	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	212a      	movs	r1, #42	; 0x2a
 80024e2:	438a      	bics	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f001 f941 	bl	8003780 <UART_CheckIdleState>
 80024fe:	0003      	movs	r3, r0
}
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	b002      	add	sp, #8
 8002506:	bd80      	pop	{r7, pc}
 8002508:	ffffb7ff 	.word	0xffffb7ff

0800250c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	1dbb      	adds	r3, r7, #6
 800251a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2284      	movs	r2, #132	; 0x84
 8002520:	589b      	ldr	r3, [r3, r2]
 8002522:	2b20      	cmp	r3, #32
 8002524:	d000      	beq.n	8002528 <HAL_UART_Transmit+0x1c>
 8002526:	e097      	b.n	8002658 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_UART_Transmit+0x2a>
 800252e:	1dbb      	adds	r3, r7, #6
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e08f      	b.n	800265a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	015b      	lsls	r3, r3, #5
 8002542:	429a      	cmp	r2, r3
 8002544:	d109      	bne.n	800255a <HAL_UART_Transmit+0x4e>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	d001      	beq.n	800255a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	5c9b      	ldrb	r3, [r3, r2]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_UART_Transmit+0x5c>
 8002564:	2302      	movs	r3, #2
 8002566:	e078      	b.n	800265a <HAL_UART_Transmit+0x14e>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	2101      	movs	r1, #1
 800256e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	228c      	movs	r2, #140	; 0x8c
 8002574:	2100      	movs	r1, #0
 8002576:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2284      	movs	r2, #132	; 0x84
 800257c:	2121      	movs	r1, #33	; 0x21
 800257e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002580:	f7fe fc62 	bl	8000e48 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1dba      	adds	r2, r7, #6
 800258c:	2154      	movs	r1, #84	; 0x54
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1dba      	adds	r2, r7, #6
 8002596:	2156      	movs	r1, #86	; 0x56
 8002598:	8812      	ldrh	r2, [r2, #0]
 800259a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	015b      	lsls	r3, r3, #5
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d108      	bne.n	80025ba <HAL_UART_Transmit+0xae>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e003      	b.n	80025c2 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80025ca:	e02c      	b.n	8002626 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	0013      	movs	r3, r2
 80025d6:	2200      	movs	r2, #0
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	f001 f91b 	bl	8003814 <UART_WaitOnFlagUntilTimeout>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e039      	b.n	800265a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	001a      	movs	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	05d2      	lsls	r2, r2, #23
 80025f8:	0dd2      	lsrs	r2, r2, #23
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	3302      	adds	r3, #2
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	e007      	b.n	8002614 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3301      	adds	r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2256      	movs	r2, #86	; 0x56
 8002618:	5a9b      	ldrh	r3, [r3, r2]
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b299      	uxth	r1, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2256      	movs	r2, #86	; 0x56
 8002624:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2256      	movs	r2, #86	; 0x56
 800262a:	5a9b      	ldrh	r3, [r3, r2]
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1cc      	bne.n	80025cc <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	0013      	movs	r3, r2
 800263c:	2200      	movs	r2, #0
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	f001 f8e8 	bl	8003814 <UART_WaitOnFlagUntilTimeout>
 8002644:	1e03      	subs	r3, r0, #0
 8002646:	d001      	beq.n	800264c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e006      	b.n	800265a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2284      	movs	r2, #132	; 0x84
 8002650:	2120      	movs	r1, #32
 8002652:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b008      	add	sp, #32
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	; 0x30
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	1dbb      	adds	r3, r7, #6
 8002670:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2284      	movs	r2, #132	; 0x84
 8002676:	589b      	ldr	r3, [r3, r2]
 8002678:	2b20      	cmp	r3, #32
 800267a:	d000      	beq.n	800267e <HAL_UART_Transmit_IT+0x1a>
 800267c:	e0a0      	b.n	80027c0 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_UART_Transmit_IT+0x28>
 8002684:	1dbb      	adds	r3, r7, #6
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e098      	b.n	80027c2 <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	015b      	lsls	r3, r3, #5
 8002698:	429a      	cmp	r2, r3
 800269a:	d109      	bne.n	80026b0 <HAL_UART_Transmit_IT+0x4c>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2201      	movs	r2, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e088      	b.n	80027c2 <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	5c9b      	ldrb	r3, [r3, r2]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_UART_Transmit_IT+0x5a>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e081      	b.n	80027c2 <HAL_UART_Transmit_IT+0x15e>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1dba      	adds	r2, r7, #6
 80026d0:	2154      	movs	r1, #84	; 0x54
 80026d2:	8812      	ldrh	r2, [r2, #0]
 80026d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1dba      	adds	r2, r7, #6
 80026da:	2156      	movs	r1, #86	; 0x56
 80026dc:	8812      	ldrh	r2, [r2, #0]
 80026de:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	228c      	movs	r2, #140	; 0x8c
 80026ea:	2100      	movs	r1, #0
 80026ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2284      	movs	r2, #132	; 0x84
 80026f2:	2121      	movs	r1, #33	; 0x21
 80026f4:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	059b      	lsls	r3, r3, #22
 80026fe:	429a      	cmp	r2, r3
 8002700:	d12e      	bne.n	8002760 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	015b      	lsls	r3, r3, #5
 800270a:	429a      	cmp	r2, r3
 800270c:	d107      	bne.n	800271e <HAL_UART_Transmit_IT+0xba>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <HAL_UART_Transmit_IT+0x168>)
 800271a:	675a      	str	r2, [r3, #116]	; 0x74
 800271c:	e002      	b.n	8002724 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <HAL_UART_Transmit_IT+0x16c>)
 8002722:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2280      	movs	r2, #128	; 0x80
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272c:	f3ef 8310 	mrs	r3, PRIMASK
 8002730:	61fb      	str	r3, [r7, #28]
  return(result);
 8002732:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
 8002736:	2301      	movs	r3, #1
 8002738:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	f383 8810 	msr	PRIMASK, r3
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2180      	movs	r1, #128	; 0x80
 800274e:	0409      	lsls	r1, r1, #16
 8002750:	430a      	orrs	r2, r1
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	f383 8810 	msr	PRIMASK, r3
}
 800275e:	e02d      	b.n	80027bc <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	015b      	lsls	r3, r3, #5
 8002768:	429a      	cmp	r2, r3
 800276a:	d107      	bne.n	800277c <HAL_UART_Transmit_IT+0x118>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d103      	bne.n	800277c <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a17      	ldr	r2, [pc, #92]	; (80027d4 <HAL_UART_Transmit_IT+0x170>)
 8002778:	675a      	str	r2, [r3, #116]	; 0x74
 800277a:	e002      	b.n	8002782 <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_UART_Transmit_IT+0x174>)
 8002780:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	2100      	movs	r1, #0
 8002788:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278a:	f3ef 8310 	mrs	r3, PRIMASK
 800278e:	613b      	str	r3, [r7, #16]
  return(result);
 8002790:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002794:	2301      	movs	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f383 8810 	msr	PRIMASK, r3
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f383 8810 	msr	PRIMASK, r3
}
 80027ba:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
  }
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b00c      	add	sp, #48	; 0x30
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	08003f15 	.word	0x08003f15
 80027d0:	08003e29 	.word	0x08003e29
 80027d4:	08003d6b 	.word	0x08003d6b
 80027d8:	08003cb7 	.word	0x08003cb7

080027dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	1dbb      	adds	r3, r7, #6
 80027e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2288      	movs	r2, #136	; 0x88
 80027ee:	589b      	ldr	r3, [r3, r2]
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d15a      	bne.n	80028aa <HAL_UART_Receive_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_UART_Receive_IT+0x26>
 80027fa:	1dbb      	adds	r3, r7, #6
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e052      	b.n	80028ac <HAL_UART_Receive_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	015b      	lsls	r3, r3, #5
 800280e:	429a      	cmp	r2, r3
 8002810:	d109      	bne.n	8002826 <HAL_UART_Receive_IT+0x4a>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2201      	movs	r2, #1
 800281e:	4013      	ands	r3, r2
 8002820:	d001      	beq.n	8002826 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e042      	b.n	80028ac <HAL_UART_Receive_IT+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	5c9b      	ldrb	r3, [r3, r2]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_UART_Receive_IT+0x58>
 8002830:	2302      	movs	r3, #2
 8002832:	e03b      	b.n	80028ac <HAL_UART_Receive_IT+0xd0>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	2101      	movs	r1, #1
 800283a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_UART_Receive_IT+0xd8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d025      	beq.n	8002898 <HAL_UART_Receive_IT+0xbc>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_UART_Receive_IT+0xdc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d020      	beq.n	8002898 <HAL_UART_Receive_IT+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	4013      	ands	r3, r2
 8002862:	d019      	beq.n	8002898 <HAL_UART_Receive_IT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002864:	f3ef 8310 	mrs	r3, PRIMASK
 8002868:	613b      	str	r3, [r7, #16]
  return(result);
 800286a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	2301      	movs	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f383 8810 	msr	PRIMASK, r3
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	04c9      	lsls	r1, r1, #19
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f383 8810 	msr	PRIMASK, r3
}
 8002896:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002898:	1dbb      	adds	r3, r7, #6
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f001 f87f 	bl	80039a4 <UART_Start_Receive_IT>
 80028a6:	0003      	movs	r3, r0
 80028a8:	e000      	b.n	80028ac <HAL_UART_Receive_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80028aa:	2302      	movs	r3, #2
  }
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b008      	add	sp, #32
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40008000 	.word	0x40008000
 80028b8:	40008400 	.word	0x40008400

080028bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028bc:	b5b0      	push	{r4, r5, r7, lr}
 80028be:	b0aa      	sub	sp, #168	; 0xa8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	22a4      	movs	r2, #164	; 0xa4
 80028cc:	18b9      	adds	r1, r7, r2
 80028ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	20a0      	movs	r0, #160	; 0xa0
 80028d8:	1839      	adds	r1, r7, r0
 80028da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	249c      	movs	r4, #156	; 0x9c
 80028e4:	1939      	adds	r1, r7, r4
 80028e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028e8:	0011      	movs	r1, r2
 80028ea:	18bb      	adds	r3, r7, r2
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4aa0      	ldr	r2, [pc, #640]	; (8002b70 <HAL_UART_IRQHandler+0x2b4>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	2298      	movs	r2, #152	; 0x98
 80028f4:	18bd      	adds	r5, r7, r2
 80028f6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80028f8:	18bb      	adds	r3, r7, r2
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d11a      	bne.n	8002936 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002900:	187b      	adds	r3, r7, r1
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2220      	movs	r2, #32
 8002906:	4013      	ands	r3, r2
 8002908:	d015      	beq.n	8002936 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800290a:	183b      	adds	r3, r7, r0
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2220      	movs	r2, #32
 8002910:	4013      	ands	r3, r2
 8002912:	d105      	bne.n	8002920 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002914:	193b      	adds	r3, r7, r4
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	055b      	lsls	r3, r3, #21
 800291c:	4013      	ands	r3, r2
 800291e:	d00a      	beq.n	8002936 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	2b00      	cmp	r3, #0
 8002926:	d100      	bne.n	800292a <HAL_UART_IRQHandler+0x6e>
 8002928:	e2cf      	b.n	8002eca <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	0010      	movs	r0, r2
 8002932:	4798      	blx	r3
      }
      return;
 8002934:	e2c9      	b.n	8002eca <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002936:	2398      	movs	r3, #152	; 0x98
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d100      	bne.n	8002942 <HAL_UART_IRQHandler+0x86>
 8002940:	e11e      	b.n	8002b80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002942:	239c      	movs	r3, #156	; 0x9c
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a8a      	ldr	r2, [pc, #552]	; (8002b74 <HAL_UART_IRQHandler+0x2b8>)
 800294a:	4013      	ands	r3, r2
 800294c:	d106      	bne.n	800295c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800294e:	23a0      	movs	r3, #160	; 0xa0
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a88      	ldr	r2, [pc, #544]	; (8002b78 <HAL_UART_IRQHandler+0x2bc>)
 8002956:	4013      	ands	r3, r2
 8002958:	d100      	bne.n	800295c <HAL_UART_IRQHandler+0xa0>
 800295a:	e111      	b.n	8002b80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800295c:	23a4      	movs	r3, #164	; 0xa4
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	d012      	beq.n	800298e <HAL_UART_IRQHandler+0xd2>
 8002968:	23a0      	movs	r3, #160	; 0xa0
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4013      	ands	r3, r2
 8002974:	d00b      	beq.n	800298e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2201      	movs	r2, #1
 800297c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	228c      	movs	r2, #140	; 0x8c
 8002982:	589b      	ldr	r3, [r3, r2]
 8002984:	2201      	movs	r2, #1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	218c      	movs	r1, #140	; 0x8c
 800298c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800298e:	23a4      	movs	r3, #164	; 0xa4
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2202      	movs	r2, #2
 8002996:	4013      	ands	r3, r2
 8002998:	d011      	beq.n	80029be <HAL_UART_IRQHandler+0x102>
 800299a:	239c      	movs	r3, #156	; 0x9c
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2201      	movs	r2, #1
 80029a2:	4013      	ands	r3, r2
 80029a4:	d00b      	beq.n	80029be <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2202      	movs	r2, #2
 80029ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	228c      	movs	r2, #140	; 0x8c
 80029b2:	589b      	ldr	r3, [r3, r2]
 80029b4:	2204      	movs	r2, #4
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	218c      	movs	r1, #140	; 0x8c
 80029bc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029be:	23a4      	movs	r3, #164	; 0xa4
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2204      	movs	r2, #4
 80029c6:	4013      	ands	r3, r2
 80029c8:	d011      	beq.n	80029ee <HAL_UART_IRQHandler+0x132>
 80029ca:	239c      	movs	r3, #156	; 0x9c
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2201      	movs	r2, #1
 80029d2:	4013      	ands	r3, r2
 80029d4:	d00b      	beq.n	80029ee <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2204      	movs	r2, #4
 80029dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	228c      	movs	r2, #140	; 0x8c
 80029e2:	589b      	ldr	r3, [r3, r2]
 80029e4:	2202      	movs	r2, #2
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	218c      	movs	r1, #140	; 0x8c
 80029ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029ee:	23a4      	movs	r3, #164	; 0xa4
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2208      	movs	r2, #8
 80029f6:	4013      	ands	r3, r2
 80029f8:	d017      	beq.n	8002a2a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	23a0      	movs	r3, #160	; 0xa0
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2220      	movs	r2, #32
 8002a02:	4013      	ands	r3, r2
 8002a04:	d105      	bne.n	8002a12 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a06:	239c      	movs	r3, #156	; 0x9c
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a59      	ldr	r2, [pc, #356]	; (8002b74 <HAL_UART_IRQHandler+0x2b8>)
 8002a0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a10:	d00b      	beq.n	8002a2a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2208      	movs	r2, #8
 8002a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	228c      	movs	r2, #140	; 0x8c
 8002a1e:	589b      	ldr	r3, [r3, r2]
 8002a20:	2208      	movs	r2, #8
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	218c      	movs	r1, #140	; 0x8c
 8002a28:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a2a:	23a4      	movs	r3, #164	; 0xa4
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4013      	ands	r3, r2
 8002a36:	d013      	beq.n	8002a60 <HAL_UART_IRQHandler+0x1a4>
 8002a38:	23a0      	movs	r3, #160	; 0xa0
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	04db      	lsls	r3, r3, #19
 8002a42:	4013      	ands	r3, r2
 8002a44:	d00c      	beq.n	8002a60 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	228c      	movs	r2, #140	; 0x8c
 8002a54:	589b      	ldr	r3, [r3, r2]
 8002a56:	2220      	movs	r2, #32
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	218c      	movs	r1, #140	; 0x8c
 8002a5e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	228c      	movs	r2, #140	; 0x8c
 8002a64:	589b      	ldr	r3, [r3, r2]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d100      	bne.n	8002a6c <HAL_UART_IRQHandler+0x1b0>
 8002a6a:	e230      	b.n	8002ece <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a6c:	23a4      	movs	r3, #164	; 0xa4
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2220      	movs	r2, #32
 8002a74:	4013      	ands	r3, r2
 8002a76:	d015      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a78:	23a0      	movs	r3, #160	; 0xa0
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	4013      	ands	r3, r2
 8002a82:	d106      	bne.n	8002a92 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a84:	239c      	movs	r3, #156	; 0x9c
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	055b      	lsls	r3, r3, #21
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d008      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	228c      	movs	r2, #140	; 0x8c
 8002aa8:	589b      	ldr	r3, [r3, r2]
 8002aaa:	2194      	movs	r1, #148	; 0x94
 8002aac:	187a      	adds	r2, r7, r1
 8002aae:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2240      	movs	r2, #64	; 0x40
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d004      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2228      	movs	r2, #40	; 0x28
 8002ac4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ac6:	d047      	beq.n	8002b58 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f001 f876 	bl	8003bbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d137      	bne.n	8002b4e <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ade:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae6:	2090      	movs	r0, #144	; 0x90
 8002ae8:	183a      	adds	r2, r7, r0
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	2301      	movs	r3, #1
 8002aee:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002af2:	f383 8810 	msr	PRIMASK, r3
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2140      	movs	r1, #64	; 0x40
 8002b04:	438a      	bics	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	183b      	adds	r3, r7, r0
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b10:	f383 8810 	msr	PRIMASK, r3
}
 8002b14:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b22:	4a16      	ldr	r2, [pc, #88]	; (8002b7c <HAL_UART_IRQHandler+0x2c0>)
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7fe fb0e 	bl	800114c <HAL_DMA_Abort_IT>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d01a      	beq.n	8002b6a <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3e:	0018      	movs	r0, r3
 8002b40:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b42:	e012      	b.n	8002b6a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 f9d2 	bl	8002ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	e00d      	b.n	8002b6a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 f9cd 	bl	8002ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b56:	e008      	b.n	8002b6a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 f9c8 	bl	8002ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	228c      	movs	r2, #140	; 0x8c
 8002b64:	2100      	movs	r1, #0
 8002b66:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002b68:	e1b1      	b.n	8002ece <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6a:	46c0      	nop			; (mov r8, r8)
    return;
 8002b6c:	e1af      	b.n	8002ece <HAL_UART_IRQHandler+0x612>
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	0000080f 	.word	0x0000080f
 8002b74:	10000001 	.word	0x10000001
 8002b78:	04000120 	.word	0x04000120
 8002b7c:	08003c89 	.word	0x08003c89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d000      	beq.n	8002b8a <HAL_UART_IRQHandler+0x2ce>
 8002b88:	e135      	b.n	8002df6 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b8a:	23a4      	movs	r3, #164	; 0xa4
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2210      	movs	r2, #16
 8002b92:	4013      	ands	r3, r2
 8002b94:	d100      	bne.n	8002b98 <HAL_UART_IRQHandler+0x2dc>
 8002b96:	e12e      	b.n	8002df6 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b98:	23a0      	movs	r3, #160	; 0xa0
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d100      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x2ea>
 8002ba4:	e127      	b.n	8002df6 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2210      	movs	r2, #16
 8002bac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d000      	beq.n	8002bbe <HAL_UART_IRQHandler+0x302>
 8002bbc:	e09e      	b.n	8002cfc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	217e      	movs	r1, #126	; 0x7e
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d100      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x31a>
 8002bd4:	e17d      	b.n	8002ed2 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	225c      	movs	r2, #92	; 0x5c
 8002bda:	5a9b      	ldrh	r3, [r3, r2]
 8002bdc:	187a      	adds	r2, r7, r1
 8002bde:	8812      	ldrh	r2, [r2, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d300      	bcc.n	8002be6 <HAL_UART_IRQHandler+0x32a>
 8002be4:	e175      	b.n	8002ed2 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	187a      	adds	r2, r7, r1
 8002bea:	215e      	movs	r1, #94	; 0x5e
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d16f      	bne.n	8002cde <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c06:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c08:	2301      	movs	r3, #1
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	f383 8810 	msr	PRIMASK, r3
}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	49b1      	ldr	r1, [pc, #708]	; (8002ee4 <HAL_UART_IRQHandler+0x628>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	f383 8810 	msr	PRIMASK, r3
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c30:	f3ef 8310 	mrs	r3, PRIMASK
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c38:	677b      	str	r3, [r7, #116]	; 0x74
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c40:	f383 8810 	msr	PRIMASK, r3
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	438a      	bics	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c58:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5c:	f383 8810 	msr	PRIMASK, r3
}
 8002c60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c62:	f3ef 8310 	mrs	r3, PRIMASK
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c72:	f383 8810 	msr	PRIMASK, r3
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2140      	movs	r1, #64	; 0x40
 8002c84:	438a      	bics	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c8a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8e:	f383 8810 	msr	PRIMASK, r3
}
 8002c92:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2288      	movs	r2, #136	; 0x88
 8002c98:	2120      	movs	r1, #32
 8002c9a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cac:	2301      	movs	r3, #1
 8002cae:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb2:	f383 8810 	msr	PRIMASK, r3
}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2110      	movs	r1, #16
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cca:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cce:	f383 8810 	msr	PRIMASK, r3
}
 8002cd2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fe f9d7 	bl	800108c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	225c      	movs	r2, #92	; 0x5c
 8002ce2:	5a9a      	ldrh	r2, [r3, r2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	215e      	movs	r1, #94	; 0x5e
 8002ce8:	5a5b      	ldrh	r3, [r3, r1]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f903 	bl	8002f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cfa:	e0ea      	b.n	8002ed2 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	225c      	movs	r2, #92	; 0x5c
 8002d00:	5a99      	ldrh	r1, [r3, r2]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	225e      	movs	r2, #94	; 0x5e
 8002d06:	5a9b      	ldrh	r3, [r3, r2]
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	208e      	movs	r0, #142	; 0x8e
 8002d0c:	183b      	adds	r3, r7, r0
 8002d0e:	1a8a      	subs	r2, r1, r2
 8002d10:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	225e      	movs	r2, #94	; 0x5e
 8002d16:	5a9b      	ldrh	r3, [r3, r2]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d100      	bne.n	8002d20 <HAL_UART_IRQHandler+0x464>
 8002d1e:	e0da      	b.n	8002ed6 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002d20:	183b      	adds	r3, r7, r0
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <HAL_UART_IRQHandler+0x46e>
 8002d28:	e0d5      	b.n	8002ed6 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d30:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d32:	2488      	movs	r4, #136	; 0x88
 8002d34:	193a      	adds	r2, r7, r4
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f383 8810 	msr	PRIMASK, r3
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4966      	ldr	r1, [pc, #408]	; (8002ee8 <HAL_UART_IRQHandler+0x62c>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	193b      	adds	r3, r7, r4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f383 8810 	msr	PRIMASK, r3
}
 8002d60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d62:	f3ef 8310 	mrs	r3, PRIMASK
 8002d66:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d68:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d6a:	2484      	movs	r4, #132	; 0x84
 8002d6c:	193a      	adds	r2, r7, r4
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	2301      	movs	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f383 8810 	msr	PRIMASK, r3
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4959      	ldr	r1, [pc, #356]	; (8002eec <HAL_UART_IRQHandler+0x630>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	193b      	adds	r3, r7, r4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2288      	movs	r2, #136	; 0x88
 8002d9e:	2120      	movs	r1, #32
 8002da0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dae:	f3ef 8310 	mrs	r3, PRIMASK
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db6:	2480      	movs	r4, #128	; 0x80
 8002db8:	193a      	adds	r2, r7, r4
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	f383 8810 	msr	PRIMASK, r3
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2110      	movs	r1, #16
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	193b      	adds	r3, r7, r4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	f383 8810 	msr	PRIMASK, r3
}
 8002de4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002de6:	183b      	adds	r3, r7, r0
 8002de8:	881a      	ldrh	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0011      	movs	r1, r2
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 f886 	bl	8002f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002df4:	e06f      	b.n	8002ed6 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002df6:	23a4      	movs	r3, #164	; 0xa4
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	035b      	lsls	r3, r3, #13
 8002e00:	4013      	ands	r3, r2
 8002e02:	d010      	beq.n	8002e26 <HAL_UART_IRQHandler+0x56a>
 8002e04:	239c      	movs	r3, #156	; 0x9c
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	03db      	lsls	r3, r3, #15
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	0352      	lsls	r2, r2, #13
 8002e1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f001 fd6e 	bl	8004900 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e24:	e05a      	b.n	8002edc <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002e26:	23a4      	movs	r3, #164	; 0xa4
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2280      	movs	r2, #128	; 0x80
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d016      	beq.n	8002e60 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002e32:	23a0      	movs	r3, #160	; 0xa0
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2280      	movs	r2, #128	; 0x80
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d106      	bne.n	8002e4c <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002e3e:	239c      	movs	r3, #156	; 0x9c
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d009      	beq.n	8002e60 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d042      	beq.n	8002eda <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	0010      	movs	r0, r2
 8002e5c:	4798      	blx	r3
    }
    return;
 8002e5e:	e03c      	b.n	8002eda <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e60:	23a4      	movs	r3, #164	; 0xa4
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2240      	movs	r2, #64	; 0x40
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d00a      	beq.n	8002e82 <HAL_UART_IRQHandler+0x5c6>
 8002e6c:	23a0      	movs	r3, #160	; 0xa0
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2240      	movs	r2, #64	; 0x40
 8002e74:	4013      	ands	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f001 f8c4 	bl	8004008 <UART_EndTransmit_IT>
    return;
 8002e80:	e02c      	b.n	8002edc <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002e82:	23a4      	movs	r3, #164	; 0xa4
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_UART_IRQHandler+0x5ec>
 8002e90:	23a0      	movs	r3, #160	; 0xa0
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f001 fd3d 	bl	8004920 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ea6:	e019      	b.n	8002edc <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ea8:	23a4      	movs	r3, #164	; 0xa4
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	045b      	lsls	r3, r3, #17
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d012      	beq.n	8002edc <HAL_UART_IRQHandler+0x620>
 8002eb6:	23a0      	movs	r3, #160	; 0xa0
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da0d      	bge.n	8002edc <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f001 fd24 	bl	8004910 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ec8:	e008      	b.n	8002edc <HAL_UART_IRQHandler+0x620>
      return;
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	e006      	b.n	8002edc <HAL_UART_IRQHandler+0x620>
    return;
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	e004      	b.n	8002edc <HAL_UART_IRQHandler+0x620>
      return;
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	e002      	b.n	8002edc <HAL_UART_IRQHandler+0x620>
      return;
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	e000      	b.n	8002edc <HAL_UART_IRQHandler+0x620>
    return;
 8002eda:	46c0      	nop			; (mov r8, r8)
  }
}
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b02a      	add	sp, #168	; 0xa8
 8002ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	fffffeff 	.word	0xfffffeff
 8002ee8:	fffffedf 	.word	0xfffffedf
 8002eec:	effffffe 	.word	0xeffffffe

08002ef0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	000a      	movs	r2, r1
 8002f0a:	1cbb      	adds	r3, r7, #2
 8002f0c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b090      	sub	sp, #64	; 0x40
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f20:	231a      	movs	r3, #26
 8002f22:	2220      	movs	r2, #32
 8002f24:	4694      	mov	ip, r2
 8002f26:	44bc      	add	ip, r7
 8002f28:	4463      	add	r3, ip
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4ac1      	ldr	r2, [pc, #772]	; (8003254 <UART_SetConfig+0x33c>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	0019      	movs	r1, r3
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4abd      	ldr	r2, [pc, #756]	; (8003258 <UART_SetConfig+0x340>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	0018      	movs	r0, r3
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	68d9      	ldr	r1, [r3, #12]
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	0003      	movs	r3, r0
 8002f72:	430b      	orrs	r3, r1
 8002f74:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4ab6      	ldr	r2, [pc, #728]	; (800325c <UART_SetConfig+0x344>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d009      	beq.n	8002f9a <UART_SetConfig+0x82>
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4ab5      	ldr	r2, [pc, #724]	; (8003260 <UART_SetConfig+0x348>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d004      	beq.n	8002f9a <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f96:	4313      	orrs	r3, r2
 8002f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4ab0      	ldr	r2, [pc, #704]	; (8003264 <UART_SetConfig+0x34c>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	4393      	bics	r3, r2
 8002fba:	0018      	movs	r0, r3
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4aa6      	ldr	r2, [pc, #664]	; (8003268 <UART_SetConfig+0x350>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d136      	bne.n	8003042 <UART_SetConfig+0x12a>
 8002fd4:	4ba5      	ldr	r3, [pc, #660]	; (800326c <UART_SetConfig+0x354>)
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	2203      	movs	r2, #3
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d020      	beq.n	8003022 <UART_SetConfig+0x10a>
 8002fe0:	d827      	bhi.n	8003032 <UART_SetConfig+0x11a>
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d00d      	beq.n	8003002 <UART_SetConfig+0xea>
 8002fe6:	d824      	bhi.n	8003032 <UART_SetConfig+0x11a>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <UART_SetConfig+0xda>
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d010      	beq.n	8003012 <UART_SetConfig+0xfa>
 8002ff0:	e01f      	b.n	8003032 <UART_SetConfig+0x11a>
 8002ff2:	231b      	movs	r3, #27
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	4694      	mov	ip, r2
 8002ff8:	44bc      	add	ip, r7
 8002ffa:	4463      	add	r3, ip
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e16f      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003002:	231b      	movs	r3, #27
 8003004:	2220      	movs	r2, #32
 8003006:	4694      	mov	ip, r2
 8003008:	44bc      	add	ip, r7
 800300a:	4463      	add	r3, ip
 800300c:	2202      	movs	r2, #2
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e167      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003012:	231b      	movs	r3, #27
 8003014:	2220      	movs	r2, #32
 8003016:	4694      	mov	ip, r2
 8003018:	44bc      	add	ip, r7
 800301a:	4463      	add	r3, ip
 800301c:	2204      	movs	r2, #4
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e15f      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003022:	231b      	movs	r3, #27
 8003024:	2220      	movs	r2, #32
 8003026:	4694      	mov	ip, r2
 8003028:	44bc      	add	ip, r7
 800302a:	4463      	add	r3, ip
 800302c:	2208      	movs	r2, #8
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e157      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003032:	231b      	movs	r3, #27
 8003034:	2220      	movs	r2, #32
 8003036:	4694      	mov	ip, r2
 8003038:	44bc      	add	ip, r7
 800303a:	4463      	add	r3, ip
 800303c:	2210      	movs	r2, #16
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e14f      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a8a      	ldr	r2, [pc, #552]	; (8003270 <UART_SetConfig+0x358>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d136      	bne.n	80030ba <UART_SetConfig+0x1a2>
 800304c:	4b87      	ldr	r3, [pc, #540]	; (800326c <UART_SetConfig+0x354>)
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	220c      	movs	r2, #12
 8003052:	4013      	ands	r3, r2
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d020      	beq.n	800309a <UART_SetConfig+0x182>
 8003058:	d827      	bhi.n	80030aa <UART_SetConfig+0x192>
 800305a:	2b08      	cmp	r3, #8
 800305c:	d00d      	beq.n	800307a <UART_SetConfig+0x162>
 800305e:	d824      	bhi.n	80030aa <UART_SetConfig+0x192>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <UART_SetConfig+0x152>
 8003064:	2b04      	cmp	r3, #4
 8003066:	d010      	beq.n	800308a <UART_SetConfig+0x172>
 8003068:	e01f      	b.n	80030aa <UART_SetConfig+0x192>
 800306a:	231b      	movs	r3, #27
 800306c:	2220      	movs	r2, #32
 800306e:	4694      	mov	ip, r2
 8003070:	44bc      	add	ip, r7
 8003072:	4463      	add	r3, ip
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e133      	b.n	80032e2 <UART_SetConfig+0x3ca>
 800307a:	231b      	movs	r3, #27
 800307c:	2220      	movs	r2, #32
 800307e:	4694      	mov	ip, r2
 8003080:	44bc      	add	ip, r7
 8003082:	4463      	add	r3, ip
 8003084:	2202      	movs	r2, #2
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e12b      	b.n	80032e2 <UART_SetConfig+0x3ca>
 800308a:	231b      	movs	r3, #27
 800308c:	2220      	movs	r2, #32
 800308e:	4694      	mov	ip, r2
 8003090:	44bc      	add	ip, r7
 8003092:	4463      	add	r3, ip
 8003094:	2204      	movs	r2, #4
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e123      	b.n	80032e2 <UART_SetConfig+0x3ca>
 800309a:	231b      	movs	r3, #27
 800309c:	2220      	movs	r2, #32
 800309e:	4694      	mov	ip, r2
 80030a0:	44bc      	add	ip, r7
 80030a2:	4463      	add	r3, ip
 80030a4:	2208      	movs	r2, #8
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e11b      	b.n	80032e2 <UART_SetConfig+0x3ca>
 80030aa:	231b      	movs	r3, #27
 80030ac:	2220      	movs	r2, #32
 80030ae:	4694      	mov	ip, r2
 80030b0:	44bc      	add	ip, r7
 80030b2:	4463      	add	r3, ip
 80030b4:	2210      	movs	r2, #16
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e113      	b.n	80032e2 <UART_SetConfig+0x3ca>
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6d      	ldr	r2, [pc, #436]	; (8003274 <UART_SetConfig+0x35c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d136      	bne.n	8003132 <UART_SetConfig+0x21a>
 80030c4:	4b69      	ldr	r3, [pc, #420]	; (800326c <UART_SetConfig+0x354>)
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	2230      	movs	r2, #48	; 0x30
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b30      	cmp	r3, #48	; 0x30
 80030ce:	d020      	beq.n	8003112 <UART_SetConfig+0x1fa>
 80030d0:	d827      	bhi.n	8003122 <UART_SetConfig+0x20a>
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d00d      	beq.n	80030f2 <UART_SetConfig+0x1da>
 80030d6:	d824      	bhi.n	8003122 <UART_SetConfig+0x20a>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <UART_SetConfig+0x1ca>
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d010      	beq.n	8003102 <UART_SetConfig+0x1ea>
 80030e0:	e01f      	b.n	8003122 <UART_SetConfig+0x20a>
 80030e2:	231b      	movs	r3, #27
 80030e4:	2220      	movs	r2, #32
 80030e6:	4694      	mov	ip, r2
 80030e8:	44bc      	add	ip, r7
 80030ea:	4463      	add	r3, ip
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e0f7      	b.n	80032e2 <UART_SetConfig+0x3ca>
 80030f2:	231b      	movs	r3, #27
 80030f4:	2220      	movs	r2, #32
 80030f6:	4694      	mov	ip, r2
 80030f8:	44bc      	add	ip, r7
 80030fa:	4463      	add	r3, ip
 80030fc:	2202      	movs	r2, #2
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e0ef      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003102:	231b      	movs	r3, #27
 8003104:	2220      	movs	r2, #32
 8003106:	4694      	mov	ip, r2
 8003108:	44bc      	add	ip, r7
 800310a:	4463      	add	r3, ip
 800310c:	2204      	movs	r2, #4
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e0e7      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003112:	231b      	movs	r3, #27
 8003114:	2220      	movs	r2, #32
 8003116:	4694      	mov	ip, r2
 8003118:	44bc      	add	ip, r7
 800311a:	4463      	add	r3, ip
 800311c:	2208      	movs	r2, #8
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	e0df      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003122:	231b      	movs	r3, #27
 8003124:	2220      	movs	r2, #32
 8003126:	4694      	mov	ip, r2
 8003128:	44bc      	add	ip, r7
 800312a:	4463      	add	r3, ip
 800312c:	2210      	movs	r2, #16
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e0d7      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a50      	ldr	r2, [pc, #320]	; (8003278 <UART_SetConfig+0x360>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d107      	bne.n	800314c <UART_SetConfig+0x234>
 800313c:	231b      	movs	r3, #27
 800313e:	2220      	movs	r2, #32
 8003140:	4694      	mov	ip, r2
 8003142:	44bc      	add	ip, r7
 8003144:	4463      	add	r3, ip
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e0ca      	b.n	80032e2 <UART_SetConfig+0x3ca>
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a4a      	ldr	r2, [pc, #296]	; (800327c <UART_SetConfig+0x364>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d107      	bne.n	8003166 <UART_SetConfig+0x24e>
 8003156:	231b      	movs	r3, #27
 8003158:	2220      	movs	r2, #32
 800315a:	4694      	mov	ip, r2
 800315c:	44bc      	add	ip, r7
 800315e:	4463      	add	r3, ip
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e0bd      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a45      	ldr	r2, [pc, #276]	; (8003280 <UART_SetConfig+0x368>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d107      	bne.n	8003180 <UART_SetConfig+0x268>
 8003170:	231b      	movs	r3, #27
 8003172:	2220      	movs	r2, #32
 8003174:	4694      	mov	ip, r2
 8003176:	44bc      	add	ip, r7
 8003178:	4463      	add	r3, ip
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e0b0      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a35      	ldr	r2, [pc, #212]	; (800325c <UART_SetConfig+0x344>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d143      	bne.n	8003212 <UART_SetConfig+0x2fa>
 800318a:	4b38      	ldr	r3, [pc, #224]	; (800326c <UART_SetConfig+0x354>)
 800318c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800318e:	23c0      	movs	r3, #192	; 0xc0
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4013      	ands	r3, r2
 8003194:	22c0      	movs	r2, #192	; 0xc0
 8003196:	0112      	lsls	r2, r2, #4
 8003198:	4293      	cmp	r3, r2
 800319a:	d02a      	beq.n	80031f2 <UART_SetConfig+0x2da>
 800319c:	22c0      	movs	r2, #192	; 0xc0
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d82e      	bhi.n	8003202 <UART_SetConfig+0x2ea>
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d012      	beq.n	80031d2 <UART_SetConfig+0x2ba>
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d826      	bhi.n	8003202 <UART_SetConfig+0x2ea>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <UART_SetConfig+0x2aa>
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	00d2      	lsls	r2, r2, #3
 80031bc:	4293      	cmp	r3, r2
 80031be:	d010      	beq.n	80031e2 <UART_SetConfig+0x2ca>
 80031c0:	e01f      	b.n	8003202 <UART_SetConfig+0x2ea>
 80031c2:	231b      	movs	r3, #27
 80031c4:	2220      	movs	r2, #32
 80031c6:	4694      	mov	ip, r2
 80031c8:	44bc      	add	ip, r7
 80031ca:	4463      	add	r3, ip
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e087      	b.n	80032e2 <UART_SetConfig+0x3ca>
 80031d2:	231b      	movs	r3, #27
 80031d4:	2220      	movs	r2, #32
 80031d6:	4694      	mov	ip, r2
 80031d8:	44bc      	add	ip, r7
 80031da:	4463      	add	r3, ip
 80031dc:	2202      	movs	r2, #2
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e07f      	b.n	80032e2 <UART_SetConfig+0x3ca>
 80031e2:	231b      	movs	r3, #27
 80031e4:	2220      	movs	r2, #32
 80031e6:	4694      	mov	ip, r2
 80031e8:	44bc      	add	ip, r7
 80031ea:	4463      	add	r3, ip
 80031ec:	2204      	movs	r2, #4
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	e077      	b.n	80032e2 <UART_SetConfig+0x3ca>
 80031f2:	231b      	movs	r3, #27
 80031f4:	2220      	movs	r2, #32
 80031f6:	4694      	mov	ip, r2
 80031f8:	44bc      	add	ip, r7
 80031fa:	4463      	add	r3, ip
 80031fc:	2208      	movs	r2, #8
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e06f      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003202:	231b      	movs	r3, #27
 8003204:	2220      	movs	r2, #32
 8003206:	4694      	mov	ip, r2
 8003208:	44bc      	add	ip, r7
 800320a:	4463      	add	r3, ip
 800320c:	2210      	movs	r2, #16
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e067      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <UART_SetConfig+0x348>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d15b      	bne.n	80032d4 <UART_SetConfig+0x3bc>
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <UART_SetConfig+0x354>)
 800321e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003220:	23c0      	movs	r3, #192	; 0xc0
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4013      	ands	r3, r2
 8003226:	22c0      	movs	r2, #192	; 0xc0
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	4293      	cmp	r3, r2
 800322c:	d042      	beq.n	80032b4 <UART_SetConfig+0x39c>
 800322e:	22c0      	movs	r2, #192	; 0xc0
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	4293      	cmp	r3, r2
 8003234:	d846      	bhi.n	80032c4 <UART_SetConfig+0x3ac>
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	0092      	lsls	r2, r2, #2
 800323a:	4293      	cmp	r3, r2
 800323c:	d02a      	beq.n	8003294 <UART_SetConfig+0x37c>
 800323e:	2280      	movs	r2, #128	; 0x80
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	4293      	cmp	r3, r2
 8003244:	d83e      	bhi.n	80032c4 <UART_SetConfig+0x3ac>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01c      	beq.n	8003284 <UART_SetConfig+0x36c>
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	0052      	lsls	r2, r2, #1
 800324e:	4293      	cmp	r3, r2
 8003250:	d028      	beq.n	80032a4 <UART_SetConfig+0x38c>
 8003252:	e037      	b.n	80032c4 <UART_SetConfig+0x3ac>
 8003254:	cfff69f3 	.word	0xcfff69f3
 8003258:	ffffcfff 	.word	0xffffcfff
 800325c:	40008000 	.word	0x40008000
 8003260:	40008400 	.word	0x40008400
 8003264:	11fff4ff 	.word	0x11fff4ff
 8003268:	40013800 	.word	0x40013800
 800326c:	40021000 	.word	0x40021000
 8003270:	40004400 	.word	0x40004400
 8003274:	40004800 	.word	0x40004800
 8003278:	40004c00 	.word	0x40004c00
 800327c:	40005000 	.word	0x40005000
 8003280:	40013c00 	.word	0x40013c00
 8003284:	231b      	movs	r3, #27
 8003286:	2220      	movs	r2, #32
 8003288:	4694      	mov	ip, r2
 800328a:	44bc      	add	ip, r7
 800328c:	4463      	add	r3, ip
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e026      	b.n	80032e2 <UART_SetConfig+0x3ca>
 8003294:	231b      	movs	r3, #27
 8003296:	2220      	movs	r2, #32
 8003298:	4694      	mov	ip, r2
 800329a:	44bc      	add	ip, r7
 800329c:	4463      	add	r3, ip
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e01e      	b.n	80032e2 <UART_SetConfig+0x3ca>
 80032a4:	231b      	movs	r3, #27
 80032a6:	2220      	movs	r2, #32
 80032a8:	4694      	mov	ip, r2
 80032aa:	44bc      	add	ip, r7
 80032ac:	4463      	add	r3, ip
 80032ae:	2204      	movs	r2, #4
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e016      	b.n	80032e2 <UART_SetConfig+0x3ca>
 80032b4:	231b      	movs	r3, #27
 80032b6:	2220      	movs	r2, #32
 80032b8:	4694      	mov	ip, r2
 80032ba:	44bc      	add	ip, r7
 80032bc:	4463      	add	r3, ip
 80032be:	2208      	movs	r2, #8
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e00e      	b.n	80032e2 <UART_SetConfig+0x3ca>
 80032c4:	231b      	movs	r3, #27
 80032c6:	2220      	movs	r2, #32
 80032c8:	4694      	mov	ip, r2
 80032ca:	44bc      	add	ip, r7
 80032cc:	4463      	add	r3, ip
 80032ce:	2210      	movs	r2, #16
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e006      	b.n	80032e2 <UART_SetConfig+0x3ca>
 80032d4:	231b      	movs	r3, #27
 80032d6:	2220      	movs	r2, #32
 80032d8:	4694      	mov	ip, r2
 80032da:	44bc      	add	ip, r7
 80032dc:	4463      	add	r3, ip
 80032de:	2210      	movs	r2, #16
 80032e0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4ab8      	ldr	r2, [pc, #736]	; (80035c8 <UART_SetConfig+0x6b0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d005      	beq.n	80032f8 <UART_SetConfig+0x3e0>
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4ab6      	ldr	r2, [pc, #728]	; (80035cc <UART_SetConfig+0x6b4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d000      	beq.n	80032f8 <UART_SetConfig+0x3e0>
 80032f6:	e097      	b.n	8003428 <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032f8:	231b      	movs	r3, #27
 80032fa:	2220      	movs	r2, #32
 80032fc:	4694      	mov	ip, r2
 80032fe:	44bc      	add	ip, r7
 8003300:	4463      	add	r3, ip
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d015      	beq.n	8003334 <UART_SetConfig+0x41c>
 8003308:	dc18      	bgt.n	800333c <UART_SetConfig+0x424>
 800330a:	2b04      	cmp	r3, #4
 800330c:	d00d      	beq.n	800332a <UART_SetConfig+0x412>
 800330e:	dc15      	bgt.n	800333c <UART_SetConfig+0x424>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <UART_SetConfig+0x402>
 8003314:	2b02      	cmp	r3, #2
 8003316:	d005      	beq.n	8003324 <UART_SetConfig+0x40c>
 8003318:	e010      	b.n	800333c <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800331a:	f7fe fe4f 	bl	8001fbc <HAL_RCC_GetPCLK1Freq>
 800331e:	0003      	movs	r3, r0
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003322:	e015      	b.n	8003350 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003324:	4baa      	ldr	r3, [pc, #680]	; (80035d0 <UART_SetConfig+0x6b8>)
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003328:	e012      	b.n	8003350 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332a:	f7fe fdbb 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 800332e:	0003      	movs	r3, r0
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003332:	e00d      	b.n	8003350 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800333a:	e009      	b.n	8003350 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003340:	231a      	movs	r3, #26
 8003342:	2220      	movs	r2, #32
 8003344:	4694      	mov	ip, r2
 8003346:	44bc      	add	ip, r7
 8003348:	4463      	add	r3, ip
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
        break;
 800334e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003352:	2b00      	cmp	r3, #0
 8003354:	d100      	bne.n	8003358 <UART_SetConfig+0x440>
 8003356:	e146      	b.n	80035e6 <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800335c:	4b9d      	ldr	r3, [pc, #628]	; (80035d4 <UART_SetConfig+0x6bc>)
 800335e:	0052      	lsls	r2, r2, #1
 8003360:	5ad3      	ldrh	r3, [r2, r3]
 8003362:	0019      	movs	r1, r3
 8003364:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003366:	f7fc fed5 	bl	8000114 <__udivsi3>
 800336a:	0003      	movs	r3, r0
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	0013      	movs	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	189b      	adds	r3, r3, r2
 8003378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800337a:	429a      	cmp	r2, r3
 800337c:	d305      	bcc.n	800338a <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003386:	429a      	cmp	r2, r3
 8003388:	d907      	bls.n	800339a <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 800338a:	231a      	movs	r3, #26
 800338c:	2220      	movs	r2, #32
 800338e:	4694      	mov	ip, r2
 8003390:	44bc      	add	ip, r7
 8003392:	4463      	add	r3, ip
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e045      	b.n	8003426 <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a6:	4b8b      	ldr	r3, [pc, #556]	; (80035d4 <UART_SetConfig+0x6bc>)
 80033a8:	0052      	lsls	r2, r2, #1
 80033aa:	5ad3      	ldrh	r3, [r2, r3]
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	69b8      	ldr	r0, [r7, #24]
 80033b8:	69f9      	ldr	r1, [r7, #28]
 80033ba:	f7fd f821 	bl	8000400 <__aeabi_uldivmod>
 80033be:	0002      	movs	r2, r0
 80033c0:	000b      	movs	r3, r1
 80033c2:	0e11      	lsrs	r1, r2, #24
 80033c4:	021d      	lsls	r5, r3, #8
 80033c6:	430d      	orrs	r5, r1
 80033c8:	0214      	lsls	r4, r2, #8
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68b8      	ldr	r0, [r7, #8]
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	1900      	adds	r0, r0, r4
 80033dc:	4169      	adcs	r1, r5
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	2300      	movs	r3, #0
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f7fd f808 	bl	8000400 <__aeabi_uldivmod>
 80033f0:	0002      	movs	r2, r0
 80033f2:	000b      	movs	r3, r1
 80033f4:	0013      	movs	r3, r2
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fa:	23c0      	movs	r3, #192	; 0xc0
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	429a      	cmp	r2, r3
 8003400:	d309      	bcc.n	8003416 <UART_SetConfig+0x4fe>
 8003402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	035b      	lsls	r3, r3, #13
 8003408:	429a      	cmp	r2, r3
 800340a:	d204      	bcs.n	8003416 <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	e007      	b.n	8003426 <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 8003416:	231a      	movs	r3, #26
 8003418:	2220      	movs	r2, #32
 800341a:	4694      	mov	ip, r2
 800341c:	44bc      	add	ip, r7
 800341e:	4463      	add	r3, ip
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003424:	e0df      	b.n	80035e6 <UART_SetConfig+0x6ce>
 8003426:	e0de      	b.n	80035e6 <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	429a      	cmp	r2, r3
 8003432:	d000      	beq.n	8003436 <UART_SetConfig+0x51e>
 8003434:	e074      	b.n	8003520 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 8003436:	231b      	movs	r3, #27
 8003438:	2220      	movs	r2, #32
 800343a:	4694      	mov	ip, r2
 800343c:	44bc      	add	ip, r7
 800343e:	4463      	add	r3, ip
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b08      	cmp	r3, #8
 8003444:	d015      	beq.n	8003472 <UART_SetConfig+0x55a>
 8003446:	dc18      	bgt.n	800347a <UART_SetConfig+0x562>
 8003448:	2b04      	cmp	r3, #4
 800344a:	d00d      	beq.n	8003468 <UART_SetConfig+0x550>
 800344c:	dc15      	bgt.n	800347a <UART_SetConfig+0x562>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <UART_SetConfig+0x540>
 8003452:	2b02      	cmp	r3, #2
 8003454:	d005      	beq.n	8003462 <UART_SetConfig+0x54a>
 8003456:	e010      	b.n	800347a <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003458:	f7fe fdb0 	bl	8001fbc <HAL_RCC_GetPCLK1Freq>
 800345c:	0003      	movs	r3, r0
 800345e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003460:	e015      	b.n	800348e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <UART_SetConfig+0x6b8>)
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003466:	e012      	b.n	800348e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003468:	f7fe fd1c 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 800346c:	0003      	movs	r3, r0
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003470:	e00d      	b.n	800348e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003478:	e009      	b.n	800348e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800347e:	231a      	movs	r3, #26
 8003480:	2220      	movs	r2, #32
 8003482:	4694      	mov	ip, r2
 8003484:	44bc      	add	ip, r7
 8003486:	4463      	add	r3, ip
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
        break;
 800348c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	2b00      	cmp	r3, #0
 8003492:	d100      	bne.n	8003496 <UART_SetConfig+0x57e>
 8003494:	e0a7      	b.n	80035e6 <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800349a:	4b4e      	ldr	r3, [pc, #312]	; (80035d4 <UART_SetConfig+0x6bc>)
 800349c:	0052      	lsls	r2, r2, #1
 800349e:	5ad3      	ldrh	r3, [r2, r3]
 80034a0:	0019      	movs	r1, r3
 80034a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034a4:	f7fc fe36 	bl	8000114 <__udivsi3>
 80034a8:	0003      	movs	r3, r0
 80034aa:	005a      	lsls	r2, r3, #1
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	18d2      	adds	r2, r2, r3
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0019      	movs	r1, r3
 80034ba:	0010      	movs	r0, r2
 80034bc:	f7fc fe2a 	bl	8000114 <__udivsi3>
 80034c0:	0003      	movs	r3, r0
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d921      	bls.n	8003510 <UART_SetConfig+0x5f8>
 80034cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	025b      	lsls	r3, r3, #9
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d21c      	bcs.n	8003510 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	b29a      	uxth	r2, r3
 80034da:	200e      	movs	r0, #14
 80034dc:	2420      	movs	r4, #32
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	181b      	adds	r3, r3, r0
 80034e2:	210f      	movs	r1, #15
 80034e4:	438a      	bics	r2, r1
 80034e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2207      	movs	r2, #7
 80034f0:	4013      	ands	r3, r2
 80034f2:	b299      	uxth	r1, r3
 80034f4:	193b      	adds	r3, r7, r4
 80034f6:	181b      	adds	r3, r3, r0
 80034f8:	193a      	adds	r2, r7, r4
 80034fa:	1812      	adds	r2, r2, r0
 80034fc:	8812      	ldrh	r2, [r2, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	193a      	adds	r2, r7, r4
 8003508:	1812      	adds	r2, r2, r0
 800350a:	8812      	ldrh	r2, [r2, #0]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	e06a      	b.n	80035e6 <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003510:	231a      	movs	r3, #26
 8003512:	2220      	movs	r2, #32
 8003514:	4694      	mov	ip, r2
 8003516:	44bc      	add	ip, r7
 8003518:	4463      	add	r3, ip
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e062      	b.n	80035e6 <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003520:	231b      	movs	r3, #27
 8003522:	2220      	movs	r2, #32
 8003524:	4694      	mov	ip, r2
 8003526:	44bc      	add	ip, r7
 8003528:	4463      	add	r3, ip
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d015      	beq.n	800355c <UART_SetConfig+0x644>
 8003530:	dc18      	bgt.n	8003564 <UART_SetConfig+0x64c>
 8003532:	2b04      	cmp	r3, #4
 8003534:	d00d      	beq.n	8003552 <UART_SetConfig+0x63a>
 8003536:	dc15      	bgt.n	8003564 <UART_SetConfig+0x64c>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <UART_SetConfig+0x62a>
 800353c:	2b02      	cmp	r3, #2
 800353e:	d005      	beq.n	800354c <UART_SetConfig+0x634>
 8003540:	e010      	b.n	8003564 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003542:	f7fe fd3b 	bl	8001fbc <HAL_RCC_GetPCLK1Freq>
 8003546:	0003      	movs	r3, r0
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800354a:	e015      	b.n	8003578 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800354c:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <UART_SetConfig+0x6b8>)
 800354e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003550:	e012      	b.n	8003578 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003552:	f7fe fca7 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8003556:	0003      	movs	r3, r0
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800355a:	e00d      	b.n	8003578 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003562:	e009      	b.n	8003578 <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003568:	231a      	movs	r3, #26
 800356a:	2220      	movs	r2, #32
 800356c:	4694      	mov	ip, r2
 800356e:	44bc      	add	ip, r7
 8003570:	4463      	add	r3, ip
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
        break;
 8003576:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357a:	2b00      	cmp	r3, #0
 800357c:	d033      	beq.n	80035e6 <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <UART_SetConfig+0x6bc>)
 8003584:	0052      	lsls	r2, r2, #1
 8003586:	5ad3      	ldrh	r3, [r2, r3]
 8003588:	0019      	movs	r1, r3
 800358a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800358c:	f7fc fdc2 	bl	8000114 <__udivsi3>
 8003590:	0003      	movs	r3, r0
 8003592:	001a      	movs	r2, r3
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	18d2      	adds	r2, r2, r3
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	0019      	movs	r1, r3
 80035a2:	0010      	movs	r0, r2
 80035a4:	f7fc fdb6 	bl	8000114 <__udivsi3>
 80035a8:	0003      	movs	r3, r0
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	2b0f      	cmp	r3, #15
 80035b2:	d911      	bls.n	80035d8 <UART_SetConfig+0x6c0>
 80035b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	025b      	lsls	r3, r3, #9
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d20c      	bcs.n	80035d8 <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	e00e      	b.n	80035e6 <UART_SetConfig+0x6ce>
 80035c8:	40008000 	.word	0x40008000
 80035cc:	40008400 	.word	0x40008400
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	08004c3c 	.word	0x08004c3c
      }
      else
      {
        ret = HAL_ERROR;
 80035d8:	231a      	movs	r3, #26
 80035da:	2220      	movs	r2, #32
 80035dc:	4694      	mov	ip, r2
 80035de:	44bc      	add	ip, r7
 80035e0:	4463      	add	r3, ip
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	226a      	movs	r2, #106	; 0x6a
 80035ea:	2101      	movs	r1, #1
 80035ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	2268      	movs	r2, #104	; 0x68
 80035f2:	2101      	movs	r1, #1
 80035f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	2200      	movs	r2, #0
 80035fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	2200      	movs	r2, #0
 8003600:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003602:	231a      	movs	r3, #26
 8003604:	2220      	movs	r2, #32
 8003606:	4694      	mov	ip, r2
 8003608:	44bc      	add	ip, r7
 800360a:	4463      	add	r3, ip
 800360c:	781b      	ldrb	r3, [r3, #0]
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b010      	add	sp, #64	; 0x40
 8003614:	bdb0      	pop	{r4, r5, r7, pc}
 8003616:	46c0      	nop			; (mov r8, r8)

08003618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	2201      	movs	r2, #1
 8003626:	4013      	ands	r3, r2
 8003628:	d00b      	beq.n	8003642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a4a      	ldr	r2, [pc, #296]	; (800375c <UART_AdvFeatureConfig+0x144>)
 8003632:	4013      	ands	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	2202      	movs	r2, #2
 8003648:	4013      	ands	r3, r2
 800364a:	d00b      	beq.n	8003664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4a43      	ldr	r2, [pc, #268]	; (8003760 <UART_AdvFeatureConfig+0x148>)
 8003654:	4013      	ands	r3, r2
 8003656:	0019      	movs	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	2204      	movs	r2, #4
 800366a:	4013      	ands	r3, r2
 800366c:	d00b      	beq.n	8003686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4a3b      	ldr	r2, [pc, #236]	; (8003764 <UART_AdvFeatureConfig+0x14c>)
 8003676:	4013      	ands	r3, r2
 8003678:	0019      	movs	r1, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	2208      	movs	r2, #8
 800368c:	4013      	ands	r3, r2
 800368e:	d00b      	beq.n	80036a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4a34      	ldr	r2, [pc, #208]	; (8003768 <UART_AdvFeatureConfig+0x150>)
 8003698:	4013      	ands	r3, r2
 800369a:	0019      	movs	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	2210      	movs	r2, #16
 80036ae:	4013      	ands	r3, r2
 80036b0:	d00b      	beq.n	80036ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a2c      	ldr	r2, [pc, #176]	; (800376c <UART_AdvFeatureConfig+0x154>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	2220      	movs	r2, #32
 80036d0:	4013      	ands	r3, r2
 80036d2:	d00b      	beq.n	80036ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4a25      	ldr	r2, [pc, #148]	; (8003770 <UART_AdvFeatureConfig+0x158>)
 80036dc:	4013      	ands	r3, r2
 80036de:	0019      	movs	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	2240      	movs	r2, #64	; 0x40
 80036f2:	4013      	ands	r3, r2
 80036f4:	d01d      	beq.n	8003732 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <UART_AdvFeatureConfig+0x15c>)
 80036fe:	4013      	ands	r3, r2
 8003700:	0019      	movs	r1, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	035b      	lsls	r3, r3, #13
 8003716:	429a      	cmp	r2, r3
 8003718:	d10b      	bne.n	8003732 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4a15      	ldr	r2, [pc, #84]	; (8003778 <UART_AdvFeatureConfig+0x160>)
 8003722:	4013      	ands	r3, r2
 8003724:	0019      	movs	r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	4013      	ands	r3, r2
 800373a:	d00b      	beq.n	8003754 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4a0e      	ldr	r2, [pc, #56]	; (800377c <UART_AdvFeatureConfig+0x164>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  }
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}
 800375c:	fffdffff 	.word	0xfffdffff
 8003760:	fffeffff 	.word	0xfffeffff
 8003764:	fffbffff 	.word	0xfffbffff
 8003768:	ffff7fff 	.word	0xffff7fff
 800376c:	ffffefff 	.word	0xffffefff
 8003770:	ffffdfff 	.word	0xffffdfff
 8003774:	ffefffff 	.word	0xffefffff
 8003778:	ff9fffff 	.word	0xff9fffff
 800377c:	fff7ffff 	.word	0xfff7ffff

08003780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af02      	add	r7, sp, #8
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	228c      	movs	r2, #140	; 0x8c
 800378c:	2100      	movs	r1, #0
 800378e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003790:	f7fd fb5a 	bl	8000e48 <HAL_GetTick>
 8003794:	0003      	movs	r3, r0
 8003796:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2208      	movs	r2, #8
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d10c      	bne.n	80037c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2280      	movs	r2, #128	; 0x80
 80037aa:	0391      	lsls	r1, r2, #14
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4a18      	ldr	r2, [pc, #96]	; (8003810 <UART_CheckIdleState+0x90>)
 80037b0:	9200      	str	r2, [sp, #0]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f000 f82e 	bl	8003814 <UART_WaitOnFlagUntilTimeout>
 80037b8:	1e03      	subs	r3, r0, #0
 80037ba:	d001      	beq.n	80037c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e023      	b.n	8003808 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2204      	movs	r2, #4
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d10c      	bne.n	80037e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	03d1      	lsls	r1, r2, #15
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <UART_CheckIdleState+0x90>)
 80037d8:	9200      	str	r2, [sp, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	f000 f81a 	bl	8003814 <UART_WaitOnFlagUntilTimeout>
 80037e0:	1e03      	subs	r3, r0, #0
 80037e2:	d001      	beq.n	80037e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e00f      	b.n	8003808 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2284      	movs	r2, #132	; 0x84
 80037ec:	2120      	movs	r1, #32
 80037ee:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2288      	movs	r2, #136	; 0x88
 80037f4:	2120      	movs	r1, #32
 80037f6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b004      	add	sp, #16
 800380e:	bd80      	pop	{r7, pc}
 8003810:	01ffffff 	.word	0x01ffffff

08003814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b094      	sub	sp, #80	; 0x50
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	1dfb      	adds	r3, r7, #7
 8003822:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003824:	e0a7      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003828:	3301      	adds	r3, #1
 800382a:	d100      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0x1a>
 800382c:	e0a3      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fd fb0b 	bl	8000e48 <HAL_GetTick>
 8003832:	0002      	movs	r2, r0
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <UART_WaitOnFlagUntilTimeout+0x30>
 800383e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003840:	2b00      	cmp	r3, #0
 8003842:	d13f      	bne.n	80038c4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003844:	f3ef 8310 	mrs	r3, PRIMASK
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800384c:	647b      	str	r3, [r7, #68]	; 0x44
 800384e:	2301      	movs	r3, #1
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	f383 8810 	msr	PRIMASK, r3
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	494e      	ldr	r1, [pc, #312]	; (80039a0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003866:	400a      	ands	r2, r1
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	f383 8810 	msr	PRIMASK, r3
}
 8003874:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003876:	f3ef 8310 	mrs	r3, PRIMASK
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387e:	643b      	str	r3, [r7, #64]	; 0x40
 8003880:	2301      	movs	r3, #1
 8003882:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	f383 8810 	msr	PRIMASK, r3
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2101      	movs	r1, #1
 8003898:	438a      	bics	r2, r1
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a2:	f383 8810 	msr	PRIMASK, r3
}
 80038a6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2284      	movs	r2, #132	; 0x84
 80038ac:	2120      	movs	r1, #32
 80038ae:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2288      	movs	r2, #136	; 0x88
 80038b4:	2120      	movs	r1, #32
 80038b6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2280      	movs	r2, #128	; 0x80
 80038bc:	2100      	movs	r1, #0
 80038be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e069      	b.n	8003998 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2204      	movs	r2, #4
 80038cc:	4013      	ands	r3, r2
 80038ce:	d052      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	401a      	ands	r2, r3
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d148      	bne.n	8003976 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	0112      	lsls	r2, r2, #4
 80038ec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ee:	f3ef 8310 	mrs	r3, PRIMASK
 80038f2:	613b      	str	r3, [r7, #16]
  return(result);
 80038f4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f8:	2301      	movs	r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f383 8810 	msr	PRIMASK, r3
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4924      	ldr	r1, [pc, #144]	; (80039a0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003910:	400a      	ands	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003916:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f383 8810 	msr	PRIMASK, r3
}
 800391e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003920:	f3ef 8310 	mrs	r3, PRIMASK
 8003924:	61fb      	str	r3, [r7, #28]
  return(result);
 8003926:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003928:	64bb      	str	r3, [r7, #72]	; 0x48
 800392a:	2301      	movs	r3, #1
 800392c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f383 8810 	msr	PRIMASK, r3
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2101      	movs	r1, #1
 8003942:	438a      	bics	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	f383 8810 	msr	PRIMASK, r3
}
 8003950:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2284      	movs	r2, #132	; 0x84
 8003956:	2120      	movs	r1, #32
 8003958:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2288      	movs	r2, #136	; 0x88
 800395e:	2120      	movs	r1, #32
 8003960:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	228c      	movs	r2, #140	; 0x8c
 8003966:	2120      	movs	r1, #32
 8003968:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2280      	movs	r2, #128	; 0x80
 800396e:	2100      	movs	r1, #0
 8003970:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e010      	b.n	8003998 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	425a      	negs	r2, r3
 8003986:	4153      	adcs	r3, r2
 8003988:	b2db      	uxtb	r3, r3
 800398a:	001a      	movs	r2, r3
 800398c:	1dfb      	adds	r3, r7, #7
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d100      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0x182>
 8003994:	e747      	b.n	8003826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	b014      	add	sp, #80	; 0x50
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	fffffe5f 	.word	0xfffffe5f

080039a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b094      	sub	sp, #80	; 0x50
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	1dbb      	adds	r3, r7, #6
 80039b0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1dba      	adds	r2, r7, #6
 80039bc:	215c      	movs	r1, #92	; 0x5c
 80039be:	8812      	ldrh	r2, [r2, #0]
 80039c0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1dba      	adds	r2, r7, #6
 80039c6:	215e      	movs	r1, #94	; 0x5e
 80039c8:	8812      	ldrh	r2, [r2, #0]
 80039ca:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	015b      	lsls	r3, r3, #5
 80039da:	429a      	cmp	r2, r3
 80039dc:	d10d      	bne.n	80039fa <UART_Start_Receive_IT+0x56>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <UART_Start_Receive_IT+0x4c>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2260      	movs	r2, #96	; 0x60
 80039ea:	496f      	ldr	r1, [pc, #444]	; (8003ba8 <UART_Start_Receive_IT+0x204>)
 80039ec:	5299      	strh	r1, [r3, r2]
 80039ee:	e02e      	b.n	8003a4e <UART_Start_Receive_IT+0xaa>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2260      	movs	r2, #96	; 0x60
 80039f4:	21ff      	movs	r1, #255	; 0xff
 80039f6:	5299      	strh	r1, [r3, r2]
 80039f8:	e029      	b.n	8003a4e <UART_Start_Receive_IT+0xaa>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10d      	bne.n	8003a1e <UART_Start_Receive_IT+0x7a>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d104      	bne.n	8003a14 <UART_Start_Receive_IT+0x70>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2260      	movs	r2, #96	; 0x60
 8003a0e:	21ff      	movs	r1, #255	; 0xff
 8003a10:	5299      	strh	r1, [r3, r2]
 8003a12:	e01c      	b.n	8003a4e <UART_Start_Receive_IT+0xaa>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2260      	movs	r2, #96	; 0x60
 8003a18:	217f      	movs	r1, #127	; 0x7f
 8003a1a:	5299      	strh	r1, [r3, r2]
 8003a1c:	e017      	b.n	8003a4e <UART_Start_Receive_IT+0xaa>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	055b      	lsls	r3, r3, #21
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d10d      	bne.n	8003a46 <UART_Start_Receive_IT+0xa2>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <UART_Start_Receive_IT+0x98>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2260      	movs	r2, #96	; 0x60
 8003a36:	217f      	movs	r1, #127	; 0x7f
 8003a38:	5299      	strh	r1, [r3, r2]
 8003a3a:	e008      	b.n	8003a4e <UART_Start_Receive_IT+0xaa>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2260      	movs	r2, #96	; 0x60
 8003a40:	213f      	movs	r1, #63	; 0x3f
 8003a42:	5299      	strh	r1, [r3, r2]
 8003a44:	e003      	b.n	8003a4e <UART_Start_Receive_IT+0xaa>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2260      	movs	r2, #96	; 0x60
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	228c      	movs	r2, #140	; 0x8c
 8003a52:	2100      	movs	r1, #0
 8003a54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2288      	movs	r2, #136	; 0x88
 8003a5a:	2122      	movs	r1, #34	; 0x22
 8003a5c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a62:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a68:	2301      	movs	r3, #1
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	f383 8810 	msr	PRIMASK, r3
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2101      	movs	r1, #1
 8003a80:	430a      	orrs	r2, r1
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8a:	f383 8810 	msr	PRIMASK, r3
}
 8003a8e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	059b      	lsls	r3, r3, #22
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d150      	bne.n	8003b3e <UART_Start_Receive_IT+0x19a>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2268      	movs	r2, #104	; 0x68
 8003aa0:	5a9b      	ldrh	r3, [r3, r2]
 8003aa2:	1dba      	adds	r2, r7, #6
 8003aa4:	8812      	ldrh	r2, [r2, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d349      	bcc.n	8003b3e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	015b      	lsls	r3, r3, #5
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d107      	bne.n	8003ac6 <UART_Start_Receive_IT+0x122>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a3a      	ldr	r2, [pc, #232]	; (8003bac <UART_Start_Receive_IT+0x208>)
 8003ac2:	671a      	str	r2, [r3, #112]	; 0x70
 8003ac4:	e002      	b.n	8003acc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a39      	ldr	r2, [pc, #228]	; (8003bb0 <UART_Start_Receive_IT+0x20c>)
 8003aca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ada:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ade:	2301      	movs	r3, #1
 8003ae0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	0049      	lsls	r1, r1, #1
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f383 8810 	msr	PRIMASK, r3
}
 8003b06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b08:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b10:	647b      	str	r3, [r7, #68]	; 0x44
 8003b12:	2301      	movs	r3, #1
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	f383 8810 	msr	PRIMASK, r3
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2180      	movs	r1, #128	; 0x80
 8003b2a:	0549      	lsls	r1, r1, #21
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b32:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	f383 8810 	msr	PRIMASK, r3
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	e02e      	b.n	8003b9c <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	015b      	lsls	r3, r3, #5
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d107      	bne.n	8003b5a <UART_Start_Receive_IT+0x1b6>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <UART_Start_Receive_IT+0x210>)
 8003b56:	671a      	str	r2, [r3, #112]	; 0x70
 8003b58:	e002      	b.n	8003b60 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <UART_Start_Receive_IT+0x214>)
 8003b5e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	2100      	movs	r1, #0
 8003b66:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b68:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6c:	613b      	str	r3, [r7, #16]
  return(result);
 8003b6e:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003b70:	643b      	str	r3, [r7, #64]	; 0x40
 8003b72:	2301      	movs	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f383 8810 	msr	PRIMASK, r3
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2190      	movs	r1, #144	; 0x90
 8003b8a:	0049      	lsls	r1, r1, #1
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f383 8810 	msr	PRIMASK, r3
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b014      	add	sp, #80	; 0x50
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	000001ff 	.word	0x000001ff
 8003bac:	0800461d 	.word	0x0800461d
 8003bb0:	08004339 	.word	0x08004339
 8003bb4:	080041cd 	.word	0x080041cd
 8003bb8:	08004061 	.word	0x08004061

08003bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08e      	sub	sp, #56	; 0x38
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc8:	617b      	str	r3, [r7, #20]
  return(result);
 8003bca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bce:	2301      	movs	r3, #1
 8003bd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f383 8810 	msr	PRIMASK, r3
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4926      	ldr	r1, [pc, #152]	; (8003c80 <UART_EndRxTransfer+0xc4>)
 8003be6:	400a      	ands	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f383 8810 	msr	PRIMASK, r3
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfa:	623b      	str	r3, [r7, #32]
  return(result);
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8003c00:	2301      	movs	r3, #1
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	f383 8810 	msr	PRIMASK, r3
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	491b      	ldr	r1, [pc, #108]	; (8003c84 <UART_EndRxTransfer+0xc8>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d118      	bne.n	8003c62 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c30:	f3ef 8310 	mrs	r3, PRIMASK
 8003c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c36:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f383 8810 	msr	PRIMASK, r3
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2110      	movs	r1, #16
 8003c52:	438a      	bics	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2288      	movs	r2, #136	; 0x88
 8003c66:	2120      	movs	r1, #32
 8003c68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b00e      	add	sp, #56	; 0x38
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	fffffedf 	.word	0xfffffedf
 8003c84:	effffffe 	.word	0xeffffffe

08003c88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	225e      	movs	r2, #94	; 0x5e
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2256      	movs	r2, #86	; 0x56
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7ff f921 	bl	8002ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b004      	add	sp, #16
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b08a      	sub	sp, #40	; 0x28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2284      	movs	r2, #132	; 0x84
 8003cc2:	589b      	ldr	r3, [r3, r2]
 8003cc4:	2b21      	cmp	r3, #33	; 0x21
 8003cc6:	d14c      	bne.n	8003d62 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2256      	movs	r2, #86	; 0x56
 8003ccc:	5a9b      	ldrh	r3, [r3, r2]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d132      	bne.n	8003d3a <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cda:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cde:	2301      	movs	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f383 8810 	msr	PRIMASK, r3
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	438a      	bics	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f383 8810 	msr	PRIMASK, r3
}
 8003d04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d06:	f3ef 8310 	mrs	r3, PRIMASK
 8003d0a:	617b      	str	r3, [r7, #20]
  return(result);
 8003d0c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	2301      	movs	r3, #1
 8003d12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f383 8810 	msr	PRIMASK, r3
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2140      	movs	r1, #64	; 0x40
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f383 8810 	msr	PRIMASK, r3
}
 8003d36:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003d38:	e013      	b.n	8003d62 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2256      	movs	r2, #86	; 0x56
 8003d54:	5a9b      	ldrh	r3, [r3, r2]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b299      	uxth	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2256      	movs	r2, #86	; 0x56
 8003d60:	5299      	strh	r1, [r3, r2]
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b00a      	add	sp, #40	; 0x28
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b08c      	sub	sp, #48	; 0x30
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2284      	movs	r2, #132	; 0x84
 8003d76:	589b      	ldr	r3, [r3, r2]
 8003d78:	2b21      	cmp	r3, #33	; 0x21
 8003d7a:	d151      	bne.n	8003e20 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2256      	movs	r2, #86	; 0x56
 8003d80:	5a9b      	ldrh	r3, [r3, r2]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d132      	bne.n	8003dee <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d88:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d92:	2301      	movs	r3, #1
 8003d94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f383 8810 	msr	PRIMASK, r3
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2180      	movs	r1, #128	; 0x80
 8003daa:	438a      	bics	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f383 8810 	msr	PRIMASK, r3
}
 8003db8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dba:	f3ef 8310 	mrs	r3, PRIMASK
 8003dbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003dc0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f383 8810 	msr	PRIMASK, r3
}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f383 8810 	msr	PRIMASK, r3
}
 8003dea:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003dec:	e018      	b.n	8003e20 <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	001a      	movs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	05d2      	lsls	r2, r2, #23
 8003e00:	0dd2      	lsrs	r2, r2, #23
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e08:	1c9a      	adds	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2256      	movs	r2, #86	; 0x56
 8003e12:	5a9b      	ldrh	r3, [r3, r2]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b299      	uxth	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2256      	movs	r2, #86	; 0x56
 8003e1e:	5299      	strh	r1, [r3, r2]
}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b00c      	add	sp, #48	; 0x30
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08c      	sub	sp, #48	; 0x30
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2284      	movs	r2, #132	; 0x84
 8003e34:	589b      	ldr	r3, [r3, r2]
 8003e36:	2b21      	cmp	r3, #33	; 0x21
 8003e38:	d165      	bne.n	8003f06 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e3a:	232e      	movs	r3, #46	; 0x2e
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	216a      	movs	r1, #106	; 0x6a
 8003e42:	5a52      	ldrh	r2, [r2, r1]
 8003e44:	801a      	strh	r2, [r3, #0]
 8003e46:	e059      	b.n	8003efc <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2256      	movs	r2, #86	; 0x56
 8003e4c:	5a9b      	ldrh	r3, [r3, r2]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d133      	bne.n	8003ebc <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e54:	f3ef 8310 	mrs	r3, PRIMASK
 8003e58:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5e:	2301      	movs	r3, #1
 8003e60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f383 8810 	msr	PRIMASK, r3
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4926      	ldr	r1, [pc, #152]	; (8003f10 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8003e76:	400a      	ands	r2, r1
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f383 8810 	msr	PRIMASK, r3
}
 8003e84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e86:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e8c:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e90:	2301      	movs	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f383 8810 	msr	PRIMASK, r3
}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2140      	movs	r1, #64	; 0x40
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	f383 8810 	msr	PRIMASK, r3
}
 8003eb6:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003eb8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003eba:	e024      	b.n	8003f06 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2280      	movs	r2, #128	; 0x80
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d013      	beq.n	8003ef0 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ecc:	781a      	ldrb	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2256      	movs	r2, #86	; 0x56
 8003ee2:	5a9b      	ldrh	r3, [r3, r2]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b299      	uxth	r1, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2256      	movs	r2, #86	; 0x56
 8003eee:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ef0:	212e      	movs	r1, #46	; 0x2e
 8003ef2:	187b      	adds	r3, r7, r1
 8003ef4:	881a      	ldrh	r2, [r3, #0]
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	3a01      	subs	r2, #1
 8003efa:	801a      	strh	r2, [r3, #0]
 8003efc:	232e      	movs	r3, #46	; 0x2e
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1a0      	bne.n	8003e48 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b00c      	add	sp, #48	; 0x30
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	ff7fffff 	.word	0xff7fffff

08003f14 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08c      	sub	sp, #48	; 0x30
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2284      	movs	r2, #132	; 0x84
 8003f20:	589b      	ldr	r3, [r3, r2]
 8003f22:	2b21      	cmp	r3, #33	; 0x21
 8003f24:	d16a      	bne.n	8003ffc <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f26:	232e      	movs	r3, #46	; 0x2e
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	216a      	movs	r1, #106	; 0x6a
 8003f2e:	5a52      	ldrh	r2, [r2, r1]
 8003f30:	801a      	strh	r2, [r3, #0]
 8003f32:	e05e      	b.n	8003ff2 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2256      	movs	r2, #86	; 0x56
 8003f38:	5a9b      	ldrh	r3, [r3, r2]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d133      	bne.n	8003fa8 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f40:	f3ef 8310 	mrs	r3, PRIMASK
 8003f44:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f46:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f383 8810 	msr	PRIMASK, r3
}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4928      	ldr	r1, [pc, #160]	; (8004004 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003f62:	400a      	ands	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f383 8810 	msr	PRIMASK, r3
}
 8003f70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f72:	f3ef 8310 	mrs	r3, PRIMASK
 8003f76:	617b      	str	r3, [r7, #20]
  return(result);
 8003f78:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f7a:	623b      	str	r3, [r7, #32]
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f383 8810 	msr	PRIMASK, r3
}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2140      	movs	r1, #64	; 0x40
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f383 8810 	msr	PRIMASK, r3
}
 8003fa2:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003fa4:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003fa6:	e029      	b.n	8003ffc <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	2280      	movs	r2, #128	; 0x80
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d018      	beq.n	8003fe6 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	001a      	movs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	05d2      	lsls	r2, r2, #23
 8003fc6:	0dd2      	lsrs	r2, r2, #23
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fce:	1c9a      	adds	r2, r3, #2
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2256      	movs	r2, #86	; 0x56
 8003fd8:	5a9b      	ldrh	r3, [r3, r2]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b299      	uxth	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2256      	movs	r2, #86	; 0x56
 8003fe4:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003fe6:	212e      	movs	r1, #46	; 0x2e
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	881a      	ldrh	r2, [r3, #0]
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	232e      	movs	r3, #46	; 0x2e
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d19b      	bne.n	8003f34 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b00c      	add	sp, #48	; 0x30
 8004002:	bd80      	pop	{r7, pc}
 8004004:	ff7fffff 	.word	0xff7fffff

08004008 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004010:	f3ef 8310 	mrs	r3, PRIMASK
 8004014:	60bb      	str	r3, [r7, #8]
  return(result);
 8004016:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	2301      	movs	r3, #1
 800401c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f383 8810 	msr	PRIMASK, r3
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2140      	movs	r1, #64	; 0x40
 8004032:	438a      	bics	r2, r1
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f383 8810 	msr	PRIMASK, r3
}
 8004040:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2284      	movs	r2, #132	; 0x84
 8004046:	2120      	movs	r1, #32
 8004048:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	0018      	movs	r0, r3
 8004054:	f7fc faea 	bl	800062c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b006      	add	sp, #24
 800405e:	bd80      	pop	{r7, pc}

08004060 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b090      	sub	sp, #64	; 0x40
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004068:	203e      	movs	r0, #62	; 0x3e
 800406a:	183b      	adds	r3, r7, r0
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	2160      	movs	r1, #96	; 0x60
 8004070:	5a52      	ldrh	r2, [r2, r1]
 8004072:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2288      	movs	r2, #136	; 0x88
 8004078:	589b      	ldr	r3, [r3, r2]
 800407a:	2b22      	cmp	r3, #34	; 0x22
 800407c:	d000      	beq.n	8004080 <UART_RxISR_8BIT+0x20>
 800407e:	e097      	b.n	80041b0 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004086:	213c      	movs	r1, #60	; 0x3c
 8004088:	187b      	adds	r3, r7, r1
 800408a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800408c:	187b      	adds	r3, r7, r1
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b2da      	uxtb	r2, r3
 8004092:	183b      	adds	r3, r7, r0
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b2d9      	uxtb	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	400a      	ands	r2, r1
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	225e      	movs	r2, #94	; 0x5e
 80040b0:	5a9b      	ldrh	r3, [r3, r2]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b299      	uxth	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	225e      	movs	r2, #94	; 0x5e
 80040bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	225e      	movs	r2, #94	; 0x5e
 80040c2:	5a9b      	ldrh	r3, [r3, r2]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d000      	beq.n	80040cc <UART_RxISR_8BIT+0x6c>
 80040ca:	e079      	b.n	80041c0 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040cc:	f3ef 8310 	mrs	r3, PRIMASK
 80040d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80040d2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d6:	2301      	movs	r3, #1
 80040d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f383 8810 	msr	PRIMASK, r3
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4936      	ldr	r1, [pc, #216]	; (80041c8 <UART_RxISR_8BIT+0x168>)
 80040ee:	400a      	ands	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
 8004108:	2301      	movs	r3, #1
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	f383 8810 	msr	PRIMASK, r3
}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2101      	movs	r1, #1
 8004120:	438a      	bics	r2, r1
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412a:	f383 8810 	msr	PRIMASK, r3
}
 800412e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2288      	movs	r2, #136	; 0x88
 8004134:	2120      	movs	r1, #32
 8004136:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d12f      	bne.n	80041a6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414c:	f3ef 8310 	mrs	r3, PRIMASK
 8004150:	60fb      	str	r3, [r7, #12]
  return(result);
 8004152:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
 8004156:	2301      	movs	r3, #1
 8004158:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f383 8810 	msr	PRIMASK, r3
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2110      	movs	r1, #16
 800416e:	438a      	bics	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f383 8810 	msr	PRIMASK, r3
}
 800417c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	2210      	movs	r2, #16
 8004186:	4013      	ands	r3, r2
 8004188:	2b10      	cmp	r3, #16
 800418a:	d103      	bne.n	8004194 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2210      	movs	r2, #16
 8004192:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	225c      	movs	r2, #92	; 0x5c
 8004198:	5a9a      	ldrh	r2, [r3, r2]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	0011      	movs	r1, r2
 800419e:	0018      	movs	r0, r3
 80041a0:	f7fe feae 	bl	8002f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041a4:	e00c      	b.n	80041c0 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	0018      	movs	r0, r3
 80041aa:	f7fc fa4d 	bl	8000648 <HAL_UART_RxCpltCallback>
}
 80041ae:	e007      	b.n	80041c0 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2108      	movs	r1, #8
 80041bc:	430a      	orrs	r2, r1
 80041be:	619a      	str	r2, [r3, #24]
}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b010      	add	sp, #64	; 0x40
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	fffffedf 	.word	0xfffffedf

080041cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b090      	sub	sp, #64	; 0x40
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041d4:	203e      	movs	r0, #62	; 0x3e
 80041d6:	183b      	adds	r3, r7, r0
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	2160      	movs	r1, #96	; 0x60
 80041dc:	5a52      	ldrh	r2, [r2, r1]
 80041de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2288      	movs	r2, #136	; 0x88
 80041e4:	589b      	ldr	r3, [r3, r2]
 80041e6:	2b22      	cmp	r3, #34	; 0x22
 80041e8:	d000      	beq.n	80041ec <UART_RxISR_16BIT+0x20>
 80041ea:	e097      	b.n	800431c <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f2:	213c      	movs	r1, #60	; 0x3c
 80041f4:	187b      	adds	r3, r7, r1
 80041f6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80041fe:	187b      	adds	r3, r7, r1
 8004200:	183a      	adds	r2, r7, r0
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	8812      	ldrh	r2, [r2, #0]
 8004206:	4013      	ands	r3, r2
 8004208:	b29a      	uxth	r2, r3
 800420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	1c9a      	adds	r2, r3, #2
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	225e      	movs	r2, #94	; 0x5e
 800421c:	5a9b      	ldrh	r3, [r3, r2]
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b299      	uxth	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	225e      	movs	r2, #94	; 0x5e
 8004228:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	225e      	movs	r2, #94	; 0x5e
 800422e:	5a9b      	ldrh	r3, [r3, r2]
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d000      	beq.n	8004238 <UART_RxISR_16BIT+0x6c>
 8004236:	e079      	b.n	800432c <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004238:	f3ef 8310 	mrs	r3, PRIMASK
 800423c:	617b      	str	r3, [r7, #20]
  return(result);
 800423e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004240:	637b      	str	r3, [r7, #52]	; 0x34
 8004242:	2301      	movs	r3, #1
 8004244:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f383 8810 	msr	PRIMASK, r3
}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4936      	ldr	r1, [pc, #216]	; (8004334 <UART_RxISR_16BIT+0x168>)
 800425a:	400a      	ands	r2, r1
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f383 8810 	msr	PRIMASK, r3
}
 8004268:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426a:	f3ef 8310 	mrs	r3, PRIMASK
 800426e:	623b      	str	r3, [r7, #32]
  return(result);
 8004270:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004272:	633b      	str	r3, [r7, #48]	; 0x30
 8004274:	2301      	movs	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	f383 8810 	msr	PRIMASK, r3
}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2101      	movs	r1, #1
 800428c:	438a      	bics	r2, r1
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	f383 8810 	msr	PRIMASK, r3
}
 800429a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2288      	movs	r2, #136	; 0x88
 80042a0:	2120      	movs	r1, #32
 80042a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d12f      	bne.n	8004312 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b8:	f3ef 8310 	mrs	r3, PRIMASK
 80042bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80042be:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c2:	2301      	movs	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f383 8810 	msr	PRIMASK, r3
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2110      	movs	r1, #16
 80042da:	438a      	bics	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f383 8810 	msr	PRIMASK, r3
}
 80042e8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	2210      	movs	r2, #16
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d103      	bne.n	8004300 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2210      	movs	r2, #16
 80042fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	225c      	movs	r2, #92	; 0x5c
 8004304:	5a9a      	ldrh	r2, [r3, r2]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	0011      	movs	r1, r2
 800430a:	0018      	movs	r0, r3
 800430c:	f7fe fdf8 	bl	8002f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004310:	e00c      	b.n	800432c <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	0018      	movs	r0, r3
 8004316:	f7fc f997 	bl	8000648 <HAL_UART_RxCpltCallback>
}
 800431a:	e007      	b.n	800432c <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2108      	movs	r1, #8
 8004328:	430a      	orrs	r2, r1
 800432a:	619a      	str	r2, [r3, #24]
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b010      	add	sp, #64	; 0x40
 8004332:	bd80      	pop	{r7, pc}
 8004334:	fffffedf 	.word	0xfffffedf

08004338 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b09c      	sub	sp, #112	; 0x70
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004340:	236a      	movs	r3, #106	; 0x6a
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	2160      	movs	r1, #96	; 0x60
 8004348:	5a52      	ldrh	r2, [r2, r1]
 800434a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2288      	movs	r2, #136	; 0x88
 8004368:	589b      	ldr	r3, [r3, r2]
 800436a:	2b22      	cmp	r3, #34	; 0x22
 800436c:	d000      	beq.n	8004370 <UART_RxISR_8BIT_FIFOEN+0x38>
 800436e:	e141      	b.n	80045f4 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004370:	235e      	movs	r3, #94	; 0x5e
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	2168      	movs	r1, #104	; 0x68
 8004378:	5a52      	ldrh	r2, [r2, r1]
 800437a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800437c:	e0e8      	b.n	8004550 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004384:	215c      	movs	r1, #92	; 0x5c
 8004386:	187b      	adds	r3, r7, r1
 8004388:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800438a:	187b      	adds	r3, r7, r1
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	236a      	movs	r3, #106	; 0x6a
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b2d9      	uxtb	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439c:	400a      	ands	r2, r1
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	225e      	movs	r2, #94	; 0x5e
 80043b0:	5a9b      	ldrh	r3, [r3, r2]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b299      	uxth	r1, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	225e      	movs	r2, #94	; 0x5e
 80043bc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	2207      	movs	r2, #7
 80043ca:	4013      	ands	r3, r2
 80043cc:	d049      	beq.n	8004462 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d0:	2201      	movs	r2, #1
 80043d2:	4013      	ands	r3, r2
 80043d4:	d010      	beq.n	80043f8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80043d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4013      	ands	r3, r2
 80043de:	d00b      	beq.n	80043f8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2201      	movs	r2, #1
 80043e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	228c      	movs	r2, #140	; 0x8c
 80043ec:	589b      	ldr	r3, [r3, r2]
 80043ee:	2201      	movs	r2, #1
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	218c      	movs	r1, #140	; 0x8c
 80043f6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fa:	2202      	movs	r2, #2
 80043fc:	4013      	ands	r3, r2
 80043fe:	d00f      	beq.n	8004420 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004402:	2201      	movs	r2, #1
 8004404:	4013      	ands	r3, r2
 8004406:	d00b      	beq.n	8004420 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2202      	movs	r2, #2
 800440e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	228c      	movs	r2, #140	; 0x8c
 8004414:	589b      	ldr	r3, [r3, r2]
 8004416:	2204      	movs	r2, #4
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	218c      	movs	r1, #140	; 0x8c
 800441e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004422:	2204      	movs	r2, #4
 8004424:	4013      	ands	r3, r2
 8004426:	d00f      	beq.n	8004448 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800442a:	2201      	movs	r2, #1
 800442c:	4013      	ands	r3, r2
 800442e:	d00b      	beq.n	8004448 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2204      	movs	r2, #4
 8004436:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	228c      	movs	r2, #140	; 0x8c
 800443c:	589b      	ldr	r3, [r3, r2]
 800443e:	2202      	movs	r2, #2
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	218c      	movs	r1, #140	; 0x8c
 8004446:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	228c      	movs	r2, #140	; 0x8c
 800444c:	589b      	ldr	r3, [r3, r2]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0018      	movs	r0, r3
 8004456:	f7fe fd4b 	bl	8002ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	228c      	movs	r2, #140	; 0x8c
 800445e:	2100      	movs	r1, #0
 8004460:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	225e      	movs	r2, #94	; 0x5e
 8004466:	5a9b      	ldrh	r3, [r3, r2]
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d170      	bne.n	8004550 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800446e:	f3ef 8310 	mrs	r3, PRIMASK
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004476:	65bb      	str	r3, [r7, #88]	; 0x58
 8004478:	2301      	movs	r3, #1
 800447a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	f383 8810 	msr	PRIMASK, r3
}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	495f      	ldr	r1, [pc, #380]	; (800460c <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8004490:	400a      	ands	r2, r1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004496:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449a:	f383 8810 	msr	PRIMASK, r3
}
 800449e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a0:	f3ef 8310 	mrs	r3, PRIMASK
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044a8:	657b      	str	r3, [r7, #84]	; 0x54
 80044aa:	2301      	movs	r3, #1
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b0:	f383 8810 	msr	PRIMASK, r3
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4953      	ldr	r1, [pc, #332]	; (8004610 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 80044c2:	400a      	ands	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
 80044c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044cc:	f383 8810 	msr	PRIMASK, r3
}
 80044d0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2288      	movs	r2, #136	; 0x88
 80044d6:	2120      	movs	r1, #32
 80044d8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d12f      	bne.n	8004548 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ee:	f3ef 8310 	mrs	r3, PRIMASK
 80044f2:	623b      	str	r3, [r7, #32]
  return(result);
 80044f4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f6:	653b      	str	r3, [r7, #80]	; 0x50
 80044f8:	2301      	movs	r3, #1
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2110      	movs	r1, #16
 8004510:	438a      	bics	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004516:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	2210      	movs	r2, #16
 8004528:	4013      	ands	r3, r2
 800452a:	2b10      	cmp	r3, #16
 800452c:	d103      	bne.n	8004536 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2210      	movs	r2, #16
 8004534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	225c      	movs	r2, #92	; 0x5c
 800453a:	5a9a      	ldrh	r2, [r3, r2]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0011      	movs	r1, r2
 8004540:	0018      	movs	r0, r3
 8004542:	f7fe fcdd 	bl	8002f00 <HAL_UARTEx_RxEventCallback>
 8004546:	e003      	b.n	8004550 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f7fc f87c 	bl	8000648 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004550:	235e      	movs	r3, #94	; 0x5e
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800455a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455c:	2220      	movs	r2, #32
 800455e:	4013      	ands	r3, r2
 8004560:	d000      	beq.n	8004564 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004562:	e70c      	b.n	800437e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004564:	204e      	movs	r0, #78	; 0x4e
 8004566:	183b      	adds	r3, r7, r0
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	215e      	movs	r1, #94	; 0x5e
 800456c:	5a52      	ldrh	r2, [r2, r1]
 800456e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004570:	0001      	movs	r1, r0
 8004572:	187b      	adds	r3, r7, r1
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d044      	beq.n	8004604 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2268      	movs	r2, #104	; 0x68
 800457e:	5a9b      	ldrh	r3, [r3, r2]
 8004580:	187a      	adds	r2, r7, r1
 8004582:	8812      	ldrh	r2, [r2, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d23d      	bcs.n	8004604 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004588:	f3ef 8310 	mrs	r3, PRIMASK
 800458c:	60bb      	str	r3, [r7, #8]
  return(result);
 800458e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004590:	64bb      	str	r3, [r7, #72]	; 0x48
 8004592:	2301      	movs	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f383 8810 	msr	PRIMASK, r3
}
 800459c:	46c0      	nop			; (mov r8, r8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	491a      	ldr	r1, [pc, #104]	; (8004614 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f383 8810 	msr	PRIMASK, r3
}
 80045b8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a16      	ldr	r2, [pc, #88]	; (8004618 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80045be:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c0:	f3ef 8310 	mrs	r3, PRIMASK
 80045c4:	617b      	str	r3, [r7, #20]
  return(result);
 80045c6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80045c8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ca:	2301      	movs	r3, #1
 80045cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f383 8810 	msr	PRIMASK, r3
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2120      	movs	r1, #32
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f383 8810 	msr	PRIMASK, r3
}
 80045f0:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045f2:	e007      	b.n	8004604 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2108      	movs	r1, #8
 8004600:	430a      	orrs	r2, r1
 8004602:	619a      	str	r2, [r3, #24]
}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	46bd      	mov	sp, r7
 8004608:	b01c      	add	sp, #112	; 0x70
 800460a:	bd80      	pop	{r7, pc}
 800460c:	fffffeff 	.word	0xfffffeff
 8004610:	effffffe 	.word	0xeffffffe
 8004614:	efffffff 	.word	0xefffffff
 8004618:	08004061 	.word	0x08004061

0800461c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b09e      	sub	sp, #120	; 0x78
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004624:	2372      	movs	r3, #114	; 0x72
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	2160      	movs	r1, #96	; 0x60
 800462c:	5a52      	ldrh	r2, [r2, r1]
 800462e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2288      	movs	r2, #136	; 0x88
 800464c:	589b      	ldr	r3, [r3, r2]
 800464e:	2b22      	cmp	r3, #34	; 0x22
 8004650:	d000      	beq.n	8004654 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004652:	e141      	b.n	80048d8 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004654:	2366      	movs	r3, #102	; 0x66
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	2168      	movs	r1, #104	; 0x68
 800465c:	5a52      	ldrh	r2, [r2, r1]
 800465e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004660:	e0e8      	b.n	8004834 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004668:	2164      	movs	r1, #100	; 0x64
 800466a:	187b      	adds	r3, r7, r1
 800466c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004674:	187b      	adds	r3, r7, r1
 8004676:	2272      	movs	r2, #114	; 0x72
 8004678:	18ba      	adds	r2, r7, r2
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	8812      	ldrh	r2, [r2, #0]
 800467e:	4013      	ands	r3, r2
 8004680:	b29a      	uxth	r2, r3
 8004682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004684:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	225e      	movs	r2, #94	; 0x5e
 8004694:	5a9b      	ldrh	r3, [r3, r2]
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b299      	uxth	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	225e      	movs	r2, #94	; 0x5e
 80046a0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80046aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ac:	2207      	movs	r2, #7
 80046ae:	4013      	ands	r3, r2
 80046b0:	d049      	beq.n	8004746 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b4:	2201      	movs	r2, #1
 80046b6:	4013      	ands	r3, r2
 80046b8:	d010      	beq.n	80046dc <UART_RxISR_16BIT_FIFOEN+0xc0>
 80046ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4013      	ands	r3, r2
 80046c2:	d00b      	beq.n	80046dc <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2201      	movs	r2, #1
 80046ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	228c      	movs	r2, #140	; 0x8c
 80046d0:	589b      	ldr	r3, [r3, r2]
 80046d2:	2201      	movs	r2, #1
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	218c      	movs	r1, #140	; 0x8c
 80046da:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046de:	2202      	movs	r2, #2
 80046e0:	4013      	ands	r3, r2
 80046e2:	d00f      	beq.n	8004704 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80046e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046e6:	2201      	movs	r2, #1
 80046e8:	4013      	ands	r3, r2
 80046ea:	d00b      	beq.n	8004704 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2202      	movs	r2, #2
 80046f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	228c      	movs	r2, #140	; 0x8c
 80046f8:	589b      	ldr	r3, [r3, r2]
 80046fa:	2204      	movs	r2, #4
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	218c      	movs	r1, #140	; 0x8c
 8004702:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004706:	2204      	movs	r2, #4
 8004708:	4013      	ands	r3, r2
 800470a:	d00f      	beq.n	800472c <UART_RxISR_16BIT_FIFOEN+0x110>
 800470c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800470e:	2201      	movs	r2, #1
 8004710:	4013      	ands	r3, r2
 8004712:	d00b      	beq.n	800472c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2204      	movs	r2, #4
 800471a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	228c      	movs	r2, #140	; 0x8c
 8004720:	589b      	ldr	r3, [r3, r2]
 8004722:	2202      	movs	r2, #2
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	218c      	movs	r1, #140	; 0x8c
 800472a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	228c      	movs	r2, #140	; 0x8c
 8004730:	589b      	ldr	r3, [r3, r2]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0018      	movs	r0, r3
 800473a:	f7fe fbd9 	bl	8002ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	228c      	movs	r2, #140	; 0x8c
 8004742:	2100      	movs	r1, #0
 8004744:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	225e      	movs	r2, #94	; 0x5e
 800474a:	5a9b      	ldrh	r3, [r3, r2]
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d170      	bne.n	8004834 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004752:	f3ef 8310 	mrs	r3, PRIMASK
 8004756:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800475a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800475c:	2301      	movs	r3, #1
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004762:	f383 8810 	msr	PRIMASK, r3
}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	495f      	ldr	r1, [pc, #380]	; (80048f0 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004774:	400a      	ands	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477e:	f383 8810 	msr	PRIMASK, r3
}
 8004782:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004784:	f3ef 8310 	mrs	r3, PRIMASK
 8004788:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800478a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800478c:	65bb      	str	r3, [r7, #88]	; 0x58
 800478e:	2301      	movs	r3, #1
 8004790:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004794:	f383 8810 	msr	PRIMASK, r3
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4953      	ldr	r1, [pc, #332]	; (80048f4 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 80047a6:	400a      	ands	r2, r1
 80047a8:	609a      	str	r2, [r3, #8]
 80047aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b0:	f383 8810 	msr	PRIMASK, r3
}
 80047b4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2288      	movs	r2, #136	; 0x88
 80047ba:	2120      	movs	r1, #32
 80047bc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d12f      	bne.n	800482c <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d2:	f3ef 8310 	mrs	r3, PRIMASK
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047da:	657b      	str	r3, [r7, #84]	; 0x54
 80047dc:	2301      	movs	r3, #1
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	f383 8810 	msr	PRIMASK, r3
}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2110      	movs	r1, #16
 80047f4:	438a      	bics	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	f383 8810 	msr	PRIMASK, r3
}
 8004802:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	2210      	movs	r2, #16
 800480c:	4013      	ands	r3, r2
 800480e:	2b10      	cmp	r3, #16
 8004810:	d103      	bne.n	800481a <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2210      	movs	r2, #16
 8004818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	225c      	movs	r2, #92	; 0x5c
 800481e:	5a9a      	ldrh	r2, [r3, r2]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0011      	movs	r1, r2
 8004824:	0018      	movs	r0, r3
 8004826:	f7fe fb6b 	bl	8002f00 <HAL_UARTEx_RxEventCallback>
 800482a:	e003      	b.n	8004834 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	0018      	movs	r0, r3
 8004830:	f7fb ff0a 	bl	8000648 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004834:	2366      	movs	r3, #102	; 0x66
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d004      	beq.n	8004848 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800483e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004840:	2220      	movs	r2, #32
 8004842:	4013      	ands	r3, r2
 8004844:	d000      	beq.n	8004848 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004846:	e70c      	b.n	8004662 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004848:	2052      	movs	r0, #82	; 0x52
 800484a:	183b      	adds	r3, r7, r0
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	215e      	movs	r1, #94	; 0x5e
 8004850:	5a52      	ldrh	r2, [r2, r1]
 8004852:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004854:	0001      	movs	r1, r0
 8004856:	187b      	adds	r3, r7, r1
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d044      	beq.n	80048e8 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2268      	movs	r2, #104	; 0x68
 8004862:	5a9b      	ldrh	r3, [r3, r2]
 8004864:	187a      	adds	r2, r7, r1
 8004866:	8812      	ldrh	r2, [r2, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d23d      	bcs.n	80048e8 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486c:	f3ef 8310 	mrs	r3, PRIMASK
 8004870:	60fb      	str	r3, [r7, #12]
  return(result);
 8004872:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004874:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004876:	2301      	movs	r3, #1
 8004878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f383 8810 	msr	PRIMASK, r3
}
 8004880:	46c0      	nop			; (mov r8, r8)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	491a      	ldr	r1, [pc, #104]	; (80048f8 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800488e:	400a      	ands	r2, r1
 8004890:	609a      	str	r2, [r3, #8]
 8004892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f383 8810 	msr	PRIMASK, r3
}
 800489c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a16      	ldr	r2, [pc, #88]	; (80048fc <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80048a2:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a4:	f3ef 8310 	mrs	r3, PRIMASK
 80048a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80048aa:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80048ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ae:	2301      	movs	r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f383 8810 	msr	PRIMASK, r3
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2120      	movs	r1, #32
 80048c6:	430a      	orrs	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	f383 8810 	msr	PRIMASK, r3
}
 80048d4:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048d6:	e007      	b.n	80048e8 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2108      	movs	r1, #8
 80048e4:	430a      	orrs	r2, r1
 80048e6:	619a      	str	r2, [r3, #24]
}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b01e      	add	sp, #120	; 0x78
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	fffffeff 	.word	0xfffffeff
 80048f4:	effffffe 	.word	0xeffffffe
 80048f8:	efffffff 	.word	0xefffffff
 80048fc:	080041cd 	.word	0x080041cd

08004900 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004908:	46c0      	nop			; (mov r8, r8)
 800490a:	46bd      	mov	sp, r7
 800490c:	b002      	add	sp, #8
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004928:	46c0      	nop			; (mov r8, r8)
 800492a:	46bd      	mov	sp, r7
 800492c:	b002      	add	sp, #8
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	5c9b      	ldrb	r3, [r3, r2]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_UARTEx_DisableFifoMode+0x16>
 8004942:	2302      	movs	r3, #2
 8004944:	e027      	b.n	8004996 <HAL_UARTEx_DisableFifoMode+0x66>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2280      	movs	r2, #128	; 0x80
 800494a:	2101      	movs	r1, #1
 800494c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2284      	movs	r2, #132	; 0x84
 8004952:	2124      	movs	r1, #36	; 0x24
 8004954:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2101      	movs	r1, #1
 800496a:	438a      	bics	r2, r1
 800496c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4a0b      	ldr	r2, [pc, #44]	; (80049a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004972:	4013      	ands	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2284      	movs	r2, #132	; 0x84
 8004988:	2120      	movs	r1, #32
 800498a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2280      	movs	r2, #128	; 0x80
 8004990:	2100      	movs	r1, #0
 8004992:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b004      	add	sp, #16
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	dfffffff 	.word	0xdfffffff

080049a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2280      	movs	r2, #128	; 0x80
 80049b2:	5c9b      	ldrb	r3, [r3, r2]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e02e      	b.n	8004a1a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2280      	movs	r2, #128	; 0x80
 80049c0:	2101      	movs	r1, #1
 80049c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2284      	movs	r2, #132	; 0x84
 80049c8:	2124      	movs	r1, #36	; 0x24
 80049ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2101      	movs	r1, #1
 80049e0:	438a      	bics	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	08d9      	lsrs	r1, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f000 f854 	bl	8004aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2284      	movs	r2, #132	; 0x84
 8004a0c:	2120      	movs	r1, #32
 8004a0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2280      	movs	r2, #128	; 0x80
 8004a14:	2100      	movs	r1, #0
 8004a16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b004      	add	sp, #16
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	5c9b      	ldrb	r3, [r3, r2]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e02f      	b.n	8004a9c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2280      	movs	r2, #128	; 0x80
 8004a40:	2101      	movs	r1, #1
 8004a42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2284      	movs	r2, #132	; 0x84
 8004a48:	2124      	movs	r1, #36	; 0x24
 8004a4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2101      	movs	r1, #1
 8004a60:	438a      	bics	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	4a0e      	ldr	r2, [pc, #56]	; (8004aa4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	0019      	movs	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f000 f813 	bl	8004aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2284      	movs	r2, #132	; 0x84
 8004a8e:	2120      	movs	r1, #32
 8004a90:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2280      	movs	r2, #128	; 0x80
 8004a96:	2100      	movs	r1, #0
 8004a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b004      	add	sp, #16
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	f1ffffff 	.word	0xf1ffffff

08004aa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d108      	bne.n	8004aca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	226a      	movs	r2, #106	; 0x6a
 8004abc:	2101      	movs	r1, #1
 8004abe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2268      	movs	r2, #104	; 0x68
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ac8:	e043      	b.n	8004b52 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004aca:	260f      	movs	r6, #15
 8004acc:	19bb      	adds	r3, r7, r6
 8004ace:	2208      	movs	r2, #8
 8004ad0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ad2:	200e      	movs	r0, #14
 8004ad4:	183b      	adds	r3, r7, r0
 8004ad6:	2208      	movs	r2, #8
 8004ad8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	0e5b      	lsrs	r3, r3, #25
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	240d      	movs	r4, #13
 8004ae6:	193b      	adds	r3, r7, r4
 8004ae8:	2107      	movs	r1, #7
 8004aea:	400a      	ands	r2, r1
 8004aec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	0f5b      	lsrs	r3, r3, #29
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	250c      	movs	r5, #12
 8004afa:	197b      	adds	r3, r7, r5
 8004afc:	2107      	movs	r1, #7
 8004afe:	400a      	ands	r2, r1
 8004b00:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b02:	183b      	adds	r3, r7, r0
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	197a      	adds	r2, r7, r5
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	4914      	ldr	r1, [pc, #80]	; (8004b5c <UARTEx_SetNbDataToProcess+0xb4>)
 8004b0c:	5c8a      	ldrb	r2, [r1, r2]
 8004b0e:	435a      	muls	r2, r3
 8004b10:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b12:	197b      	adds	r3, r7, r5
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	4a12      	ldr	r2, [pc, #72]	; (8004b60 <UARTEx_SetNbDataToProcess+0xb8>)
 8004b18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	f7fb fb84 	bl	8000228 <__divsi3>
 8004b20:	0003      	movs	r3, r0
 8004b22:	b299      	uxth	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	226a      	movs	r2, #106	; 0x6a
 8004b28:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b2a:	19bb      	adds	r3, r7, r6
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	193a      	adds	r2, r7, r4
 8004b30:	7812      	ldrb	r2, [r2, #0]
 8004b32:	490a      	ldr	r1, [pc, #40]	; (8004b5c <UARTEx_SetNbDataToProcess+0xb4>)
 8004b34:	5c8a      	ldrb	r2, [r1, r2]
 8004b36:	435a      	muls	r2, r3
 8004b38:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b3a:	193b      	adds	r3, r7, r4
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <UARTEx_SetNbDataToProcess+0xb8>)
 8004b40:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b42:	0019      	movs	r1, r3
 8004b44:	f7fb fb70 	bl	8000228 <__divsi3>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	b299      	uxth	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2268      	movs	r2, #104	; 0x68
 8004b50:	5299      	strh	r1, [r3, r2]
}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b005      	add	sp, #20
 8004b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	08004c54 	.word	0x08004c54
 8004b60:	08004c5c 	.word	0x08004c5c

08004b64 <__libc_init_array>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	2600      	movs	r6, #0
 8004b68:	4d0c      	ldr	r5, [pc, #48]	; (8004b9c <__libc_init_array+0x38>)
 8004b6a:	4c0d      	ldr	r4, [pc, #52]	; (8004ba0 <__libc_init_array+0x3c>)
 8004b6c:	1b64      	subs	r4, r4, r5
 8004b6e:	10a4      	asrs	r4, r4, #2
 8004b70:	42a6      	cmp	r6, r4
 8004b72:	d109      	bne.n	8004b88 <__libc_init_array+0x24>
 8004b74:	2600      	movs	r6, #0
 8004b76:	f000 f821 	bl	8004bbc <_init>
 8004b7a:	4d0a      	ldr	r5, [pc, #40]	; (8004ba4 <__libc_init_array+0x40>)
 8004b7c:	4c0a      	ldr	r4, [pc, #40]	; (8004ba8 <__libc_init_array+0x44>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	42a6      	cmp	r6, r4
 8004b84:	d105      	bne.n	8004b92 <__libc_init_array+0x2e>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	00b3      	lsls	r3, r6, #2
 8004b8a:	58eb      	ldr	r3, [r5, r3]
 8004b8c:	4798      	blx	r3
 8004b8e:	3601      	adds	r6, #1
 8004b90:	e7ee      	b.n	8004b70 <__libc_init_array+0xc>
 8004b92:	00b3      	lsls	r3, r6, #2
 8004b94:	58eb      	ldr	r3, [r5, r3]
 8004b96:	4798      	blx	r3
 8004b98:	3601      	adds	r6, #1
 8004b9a:	e7f2      	b.n	8004b82 <__libc_init_array+0x1e>
 8004b9c:	08004c6c 	.word	0x08004c6c
 8004ba0:	08004c6c 	.word	0x08004c6c
 8004ba4:	08004c6c 	.word	0x08004c6c
 8004ba8:	08004c70 	.word	0x08004c70

08004bac <memset>:
 8004bac:	0003      	movs	r3, r0
 8004bae:	1882      	adds	r2, r0, r2
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d100      	bne.n	8004bb6 <memset+0xa>
 8004bb4:	4770      	bx	lr
 8004bb6:	7019      	strb	r1, [r3, #0]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	e7f9      	b.n	8004bb0 <memset+0x4>

08004bbc <_init>:
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc2:	bc08      	pop	{r3}
 8004bc4:	469e      	mov	lr, r3
 8004bc6:	4770      	bx	lr

08004bc8 <_fini>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bce:	bc08      	pop	{r3}
 8004bd0:	469e      	mov	lr, r3
 8004bd2:	4770      	bx	lr
